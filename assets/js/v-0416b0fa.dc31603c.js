"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[350],{2221:(e,a,r)=>{r.r(a),r.d(a,{data:()=>d});const d={key:"v-0416b0fa",path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",title:"c语言内存排布",lang:"zh-CN",frontmatter:{title:"c语言内存排布",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2021/05/10 00:21",tag:["cs","计组"]},excerpt:"",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],git:{}}},1701:(e,a,r)=>{r.r(a),r.d(a,{default:()=>t});const d=(0,r(6252).uE)('<h1 id="c语言介绍" tabindex="-1"><a class="header-anchor" href="#c语言介绍" aria-hidden="true">#</a> c语言介绍</h1><p>本来想写c语言的内存如何对齐的，但是想想这个也挺简单的大家自己网上搜一下就行了，我也懒的写了 以后要是有空再写，先鸽了</p><h1 id="_12-3更新" tabindex="-1"><a class="header-anchor" href="#_12-3更新" aria-hidden="true">#</a> 12.3更新</h1><p>简单来说就是一个元素以其自身大小为单位进行寻址，由此可以推出其内存布局</p><h1 id="数据在内存中放置方向" tabindex="-1"><a class="header-anchor" href="#数据在内存中放置方向" aria-hidden="true">#</a> 数据在内存中放置方向</h1><h2 id="大端对齐与小端对齐" tabindex="-1"><a class="header-anchor" href="#大端对齐与小端对齐" aria-hidden="true">#</a> 大端对齐与小端对齐</h2><p>简而言之就是大的在前或者小的在前</p>',7),h={},t=(0,r(3744).Z)(h,[["render",function(e,a){return d}]])}}]);