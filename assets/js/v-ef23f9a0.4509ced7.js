"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[909],{8098:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-ef23f9a0",path:"/record/go_redis.html",title:"go连接redis",lang:"zh-CN",frontmatter:{title:"go连接redis",tag:["go","redis"],categories:["go","redis"],date:"2022/01/02 11:01"},excerpt:"",headers:[],git:{}}},5720:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="go操作redis" tabindex="-1"><a class="header-anchor" href="#go操作redis" aria-hidden="true">#</a> go操作redis</h1><p>使用 <code>&quot;github.com/go-redis/redis&quot;</code>包 使用 <code>go get -u github.com/go-redis/redis</code> go get 参数</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>-d 只下载不安装\n-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用\n-fix 在获取源码之后先运行 fix，然后再去做其他的事情\n-t 同时也下载需要为运行测试所需要的包\n-u 强制使用网络去更新包和它的依赖包\n-v 显示执行的命令\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里我使用docker启动redis服务，同时开启一个客户端</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> docker run --name redis_server -p 6379:6379 -d redis:latest //启动服务端\n\n docker run -it --network host --rm redis:latest redis-cli //启动 --rm 是退出时清除容器\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>go中连接</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>    <span class="token keyword">var</span> rdb <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client\n\trdb <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>\n\t\tAddr<span class="token punctuation">:</span> <span class="token string">&quot;localhost:6379&quot;</span><span class="token punctuation">,</span>\n\t\tPassword<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n\t\tDB<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token boolean">_</span><span class="token punctuation">,</span>err <span class="token operator">:=</span>rdb<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//测试连接</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',7),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])}}]);