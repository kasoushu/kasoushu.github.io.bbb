"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[390],{1805:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7f5909be",path:"/record/golang.html",title:"Golang碎碎念",lang:"zh-CN",frontmatter:{title:"Golang碎碎念",date:"2022/01/01 23:39"},excerpt:"",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],git:{}}},9310:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});const e=(0,a(6252).uE)('<h2 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h2><p>_用法</p><ol><li>导入包时，仅引用该包，（即只执行init函数）</li><li>省略变量</li></ol><p>变量声明 var name type; 变量声明自动初始化 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil 批量声明</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    var (\n        a string\n        b int\n        c bool\n        d float32\n    )\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>数组声明</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    全局：\n    var arr0 [5]int = [5]int{1, 2, 3}\n    var arr1 = [5]int{1, 2, 3, 4, 5}\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\n    var str = [5]string{3: &quot;hello world&quot;, 4: &quot;tom&quot;}\n    局部：\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {&quot;user1&quot;, 10}, // 可省略元素类型。\n        {&quot;user2&quot;, 20}, // 别忘了最后一行的逗号。\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>golang 分配内存</p><ol><li>new</li><li>make <ol><li>map只能为slice, map, channel分配内存，并返回一个初始化的值.</li></ol></li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>make(map[string]string)\nmake([]int, 2)\nmake([]int, 2, 4) \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li><p>第一种用法，即缺少长度的参数，只传类型，这种用法只能用在类型为map或chan的场景，例如make([]int)是会报错的。这样返回的空间长度都是默认为0的。</p></li><li><p>第二种用法，指定了长度，例如make([]int, 2)返回的是一个长度为2的slice</p></li><li><p>第三种用法，第二参数指定的是切片的长度，第三个参数是用来指定预留的空间长度，例如a := make([]int, 2, 4), 这里值得注意的是返回的切片a的总长度是4，预留的意思并不是另外多出来4的长度，其实是包含了前面2个已经切片的个数的。所以举个例子当你这样用的时候 a := make([]int, 4, 2)，就会报语法错误。</p></li></ol><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2><p>判断是否存在</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>func main() {\n    scoreMap := make(map[string]int)\n    scoreMap[&quot;张三&quot;] = 90\n    scoreMap[&quot;小明&quot;] = 100\n    // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\n    v, ok := scoreMap[&quot;张三&quot;]\n    if ok {\n        fmt.Println(v)\n    } else {\n        fmt.Println(&quot;查无此人&quot;)\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2><p>是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。 匿名字段 匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>多返回值可直接作为其他函数调用实参</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>package main\n\nfunc test() (int, int) {\n    return 1, 2\n}\n\nfunc add(x, y int) int {\n    return x + y\n}\n\nfunc sum(n ...int) int {\n    var x int\n    for _, i := range n {\n        x += i\n    }\n\n    return x\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>defer</p><ol><li>关闭文件句柄</li><li>锁资源释放</li><li>数据库连接释放</li></ol>',21),l={},r=(0,a(3744).Z)(l,[["render",function(n,s){return e}]])}}]);