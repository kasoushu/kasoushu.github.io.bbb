"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[461],{2110:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5a0eaa76",path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",title:"连通分量",lang:"zh-CN",frontmatter:{title:"连通分量",date:"2021/01/11 23:56",tags:["图论"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],git:{}}},7832:(n,s,a)=>{a.r(s),a.d(s,{default:()=>_});var p=a(6252);const t=(0,p.uE)('<h1 id="连通分量" tabindex="-1"><a class="header-anchor" href="#连通分量" aria-hidden="true">#</a> 连通分量</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。</p><p>强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图。</p><h2 id="tarjan-算法" tabindex="-1"><a class="header-anchor" href="#tarjan-算法" aria-hidden="true">#</a> tarjan 算法</h2><h3 id="dfs生成树" tabindex="-1"><a class="header-anchor" href="#dfs生成树" aria-hidden="true">#</a> dfs生成树</h3><p>在介绍该算法之前，先来了解 DFS 生成树 ，我们以下面的有向图为例：</p>',7),o=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20210116003201385",originSrc:"https://kasoushu-picture-1300449754.cos.ap-shanghai.myqcloud.com/pic/image-20210116003201385.png",data:"aurora"})],-1),c=(0,p.uE)('<p>有向图的 DFS 生成树主要有 4 种边（不一定全部出现）：</p><ol><li>树边（tree edge）：绿色边，每次搜索找到一个还没有访问过的结点的时候就形成了一条树边。</li><li>反祖边（back edge）：黄色边，也被叫做回边，即指向祖先结点的边。</li><li>横叉边（cross edge）：红色边，它主要是在搜索的时候遇到了一个已经访问过的结点，但是这个结点 <strong>并不是</strong> 当前结点的祖先时形成的。</li><li>前向边（forward edge）：蓝色边，它是在搜索的时候遇到子树中的结点的时候形成的。</li></ol><hr><p>我们考虑 DFS 生成树与强连通分量之间的关系。</p><p>如果结点  是某个强连通分量在搜索树中遇到的第一个结点，那么这个强连通分量的其余结点肯定是在搜索树中以  为根的子树中。  被称为这个强连通分量的根。</p><p>反证法：假设有个结点  在该强连通分量中但是不在以  为根的子树中，那么  到  的路径中肯定有一条离开子树的边。但是这样的边只可能是横叉边或者反祖边，然而这两条边都要求指向的结点已经被访问过了，这就和  是第一个访问的结点矛盾了。得证。</p><h3 id="tarjan算法求强连通分量" tabindex="-1"><a class="header-anchor" href="#tarjan算法求强连通分量" aria-hidden="true">#</a> tarjan算法求强连通分量</h3><p>在 Tarjan 算法中为每个结点  维护了以下几个变量：</p><ol><li>：深度优先搜索遍历时结点  被搜索的次序。</li><li>：设以  为根的子树为  。  定义为以下结点的  的最小值：  中的结点；从  通过一条不在搜索树上的边能到达的结点。</li></ol><p>一个结点的子树内结点的 dfn 都大于该结点的 dfn。</p><p>从根开始的一条路径上的 dfn 严格递增，low 严格非降。</p><p>按照深度优先搜索算法搜索的次序对图中所有的结点进行搜索。在搜索过程中，对于结点  和与其相邻的结点  （v 不是 u 的父节点）考虑 3 种情况：</p><ol><li>未被访问：继续对  进行深度搜索。在回溯过程中，用  更新  。因为存在从  到  的直接路径，所以  能够回溯到的已经在栈中的结点，  也一定能够回溯到。</li><li>被访问过，已经在栈中：即已经被访问过，根据  值的定义（能够回溯到的最早的已经在栈中的结点），则用  更新  。</li><li>被访问过，已不在在栈中：说明  已搜索完毕，其所在连通分量已被处理，所以不用对其做操作。</li></ol><p>代码如下：</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tp<span class="token punctuation">;</span>\n<span class="token keyword">int</span> scc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sc<span class="token punctuation">;</span>  <span class="token comment">// 结点 i 所在 scc 的编号</span>\n<span class="token keyword">int</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 强连通 i 的大小</span>\n<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in_stack<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">++</span>sc<span class="token punctuation">;</span>  <span class="token comment">//强连通分量数加1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//将某个点v属于第sc个连通分量</span>\n      sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// sc这个连通分量的点的个数加1</span>\n      in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//让v这个点不在栈中</span>\n      <span class="token operator">--</span>tp<span class="token punctuation">;</span> <span class="token comment">//栈顶减一</span>\n    <span class="token punctuation">}</span>\n    scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//同上</span>\n    sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n    in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token operator">--</span>tp<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',15),e={href:"https://www.cnblogs.com/shadowland/p/5872257.html",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("https://www.cnblogs.com/shadowland/p/5872257.html"),l=(0,p.Uk)(" 一个比较好的tarjan算法详解"),i=(0,p.uE)('<h2 id="kosaraju-算法" tabindex="-1"><a class="header-anchor" href="#kosaraju-算法" aria-hidden="true">#</a> Kosaraju 算法</h2><p>Kosaraju 算法依靠两次简单的 DFS 实现。</p><p>第一次 DFS，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯之前给顶点编号，也就是后序遍历。</p><p>第二次 DFS，对于反向后的图，以标号最大的顶点作为起点开始 DFS。这样遍历到的顶点集合就是一个强连通分量。对于所有未访问过的结点，选取标号最大的，重复上述过程。</p><p>两次 DFS 结束后，强连通分量就找出来了，Kosaraju 算法的时间复杂度为 (V+E)。邻接矩阵为（V^2);</p><p>代码如下</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// g 是原图，g2 是反图</span>\n<span class="token comment">// color数组统计每个点属于哪个连通分量，s为栈,栈顶将最大的标记</span>\n<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> sccCnt<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//kosaraju 算法是先进行第一次dfs，然后第二次dfs从栈中取出最大的没有被遍历的元素进行遍历。</span>\n<span class="token comment">//第二次dfs是对g的逆图g^T进行遍历</span>\n<span class="token keyword">void</span> <span class="token function">kosaraju</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sccCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">++</span>sccCnt<span class="token punctuation">;</span>\n      <span class="token function">dfs2</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="garbow-算法" tabindex="-1"><a class="header-anchor" href="#garbow-算法" aria-hidden="true">#</a> Garbow 算法</h2><p>Garbow 算法是 Tarjan 算法的另一种实现，Tarjan 算法是用 dfn 和 low 来计算强连通分量的根，Garbow 维护一个节点栈，并用第二个栈来确定何时从第一个栈中弹出属于同一个强连通分量的节点。从节点  开始的 DFS 过程中，当一条路径显示这组节点都属于同一个强连通分量时，只要栈顶节点的访问时间大于根节点  的访问时间，就从第二个栈中弹出这个节点，那么最后只留下根节点  。在这个过程中每一个被弹出的节点都属于同一个强连通分量。</p><p>当回溯到某一个节点  时，如果这个节点在第二个栈的顶部，就说明这个节点是强连通分量的起始节点，在这个节点之后搜索到的那些节点都属于同一个强连通分量，于是从第一个栈中弹出那些节点，构成强连通分量。</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">garbow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  stack1<span class="token punctuation">[</span><span class="token operator">++</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  stack2<span class="token punctuation">[</span><span class="token operator">++</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfs_clock<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token function">garbow</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sccno<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> p2<span class="token operator">--</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    p2<span class="token operator">--</span><span class="token punctuation">;</span>\n    scc_cnt<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n      sccno<span class="token punctuation">[</span>stack1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scc_cnt<span class="token punctuation">;</span>\n      <span class="token comment">// all_scc[scc_cnt] ++;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">find_scc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  dfs_clock <span class="token operator">=</span> scc_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>sccno<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sccno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">garbow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h1 id="缩点" tabindex="-1"><a class="header-anchor" href="#缩点" aria-hidden="true">#</a> 缩点</h1><p>将一个强连通分量看作一个点，可以由此建立新图，或进行其他操作</p><h1 id="割点" tabindex="-1"><a class="header-anchor" href="#割点" aria-hidden="true">#</a> 割点</h1><p>定义：对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。</p><p>判断条件：再进行tarjan算法求极大联通分量时，若$low_v \\geq num_u$ 时，即使得儿子无法不通过祖先回到祖先，此时u为割点。</p><p>例题：</p><blockquote><p>题目描述: 给出一个 nn 个点，mm 条边的无向图，求图的割点。 输入格式: 第一行输入两个正整数 n,mn,m。下面 mm 行每行输入两个正整数 x,yx,y 表示 xx 到 yy 有一条边。 输出格式: 第一行输出割点个数。第二行按照节点编号从小到大输出节点，用空格隔开。</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>#include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span> \n#include <span class="token operator">&lt;</span>algorithm<span class="token operator">&gt;</span> \n#include <span class="token operator">&lt;</span>vector<span class="token operator">&gt;</span>\n#include <span class="token operator">&lt;</span>queue<span class="token operator">&gt;</span>\n#include <span class="token operator">&lt;</span><span class="token keyword">map</span><span class="token operator">&gt;</span>\n#include <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n#include <span class="token operator">&lt;</span>bits<span class="token operator">/</span>stdc<span class="token operator">++</span><span class="token punctuation">.</span>h<span class="token operator">&gt;</span>\nusing namespace std<span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token builtin">int</span> mm <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>\nvector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token number">100005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> dfn<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token builtin">bool</span> vis<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dot<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nvoid <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token builtin">int</span> u<span class="token punctuation">,</span><span class="token builtin">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">//cout&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;f&lt;&lt;endl;</span>\n    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>ind<span class="token punctuation">;</span>\n    <span class="token builtin">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span>auto k<span class="token punctuation">:</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            child<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">!=</span>u<span class="token operator">&amp;&amp;</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//满足割点的条件low_v&gt;=num_u </span>\n                dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n                res<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span>u<span class="token operator">&amp;&amp;</span>child<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果一个节点u拥有两个子树，那么他也是割点</span>\n        <span class="token comment">//cout&lt;&lt;&quot;&gt;=2 &quot;&lt;&lt;u&lt;&lt;&#39; &#39;&lt;&lt;f&lt;&lt;endl;</span>\n        dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n        res<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> char <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token builtin">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>dot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>习题</p>',20),k={href:"https://www.luogu.com.cn/problem/P3387",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("https://www.luogu.com.cn/problem/P3387"),b=(0,p.Uk)(" 缩点模板题"),m={href:"https://www.luogu.com.cn/problem/P3388",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("https://www.luogu.com.cn/problem/P3388"),w=(0,p.Uk)(" 割点模板题"),f={href:"https://loj.ac/p/10091",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("https://loj.ac/p/10091"),g=(0,p.Uk)(" 受欢迎的牛"),y=(0,p._)("p",null,"参考：oiwiki 强连通分量",-1),v={},_=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,o,c,(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("a",e,[u,(0,p.Wm)(a)]),l])]),i,(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("a",k,[r,(0,p.Wm)(a)]),b])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("a",m,[d,(0,p.Wm)(a)]),w])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("a",f,[h,(0,p.Wm)(a)]),g]),y])],64)}]])}}]);