"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[143],{6396:(n,s,a)=>{a.d(s,{g:()=>d});var e=a(7478),t=a(5748),r=a(1598),p=a(1341),l=a(1843),o=a(6911),i=a(881),c=a(9146);const u=(0,a(7621).vW)((({app:n,router:s,siteData:a})=>{})),d=[e.Z,t.Z,r.Z,p.Z,l.Z,o.Z,i.Z,c.Z,u]},9947:(n,s,a)=>{a.d(s,{p:()=>r});var e=a(3051),t=a(8805);const r=[e.Z,t.Z]},4611:(n,s,a)=>{a.d(s,{l:()=>p});var e=a(1263),t=a(6243),r=a(7593);const p=[e.Z,t.Z,r.Z]},4150:(n,s,a)=>{a.d(s,{Z:()=>t});var e=a(6252);const t={404:(0,e.RC)((()=>Promise.all([a.e(973),a.e(431)]).then(a.bind(a,2431)))),Layout:(0,e.RC)((()=>a.e(240).then(a.bind(a,9240))))}},6056:(n,s,a)=>{a.d(s,{b:()=>t});var e=a(6252);const t={"v-0416b0fa":(0,e.RC)((()=>a.e(350).then(a.bind(a,1701)))),"v-6087f698":(0,e.RC)((()=>a.e(522).then(a.bind(a,9073)))),"v-f65824fc":(0,e.RC)((()=>a.e(826).then(a.bind(a,9193)))),"v-ef23f9a0":(0,e.RC)((()=>a.e(909).then(a.bind(a,5720)))),"v-7f5909be":(0,e.RC)((()=>a.e(390).then(a.bind(a,9310)))),"v-15bb06e3":(0,e.RC)((()=>a.e(380).then(a.bind(a,9790)))),"v-0b557a49":(0,e.RC)((()=>a.e(542).then(a.bind(a,2828)))),"v-fb6448d2":(0,e.RC)((()=>a.e(60).then(a.bind(a,7838)))),"v-7cab0f64":(0,e.RC)((()=>a.e(392).then(a.bind(a,9290)))),"v-be3aac98":(0,e.RC)((()=>a.e(281).then(a.bind(a,8817)))),"v-4d557aaa":(0,e.RC)((()=>a.e(4).then(a.bind(a,4879)))),"v-47e6875f":(0,e.RC)((()=>a.e(468).then(a.bind(a,1417)))),"v-5aacfb4f":(0,e.RC)((()=>a.e(675).then(a.bind(a,9465)))),"v-5a0eaa76":(0,e.RC)((()=>a.e(461).then(a.bind(a,7832)))),"v-13fec48d":(0,e.RC)((()=>a.e(13).then(a.bind(a,5981)))),"v-3706649a":(0,e.RC)((()=>a.e(88).then(a.bind(a,8109)))),"v-8daa1a0e":(0,e.RC)((()=>a.e(509).then(a.bind(a,1829)))),"v-74bc627b":(0,e.RC)((()=>a.e(5).then(a.bind(a,9085)))),"v-14f724bf":(0,e.RC)((()=>a.e(69).then(a.bind(a,8784)))),"v-14e6501c":(0,e.RC)((()=>a.e(713).then(a.bind(a,779)))),"v-744d024e":(0,e.RC)((()=>a.e(146).then(a.bind(a,7034)))),"v-705c21a6":(0,e.RC)((()=>a.e(888).then(a.bind(a,8099)))),"v-6629f178":(0,e.RC)((()=>a.e(158).then(a.bind(a,7984)))),"v-f693f690":(0,e.RC)((()=>a.e(516).then(a.bind(a,2209)))),"v-e2acc714":(0,e.RC)((()=>a.e(356).then(a.bind(a,5506)))),"v-3c506944":(0,e.RC)((()=>a.e(219).then(a.bind(a,5455)))),"v-3279cf61":(0,e.RC)((()=>a.e(118).then(a.bind(a,1973))))}},9706:(n,s,a)=>{a.d(s,{T:()=>e});const e={"v-0416b0fa":()=>a.e(350).then(a.bind(a,2221)).then((({data:n})=>n)),"v-6087f698":()=>a.e(522).then(a.bind(a,3414)).then((({data:n})=>n)),"v-f65824fc":()=>a.e(826).then(a.bind(a,8725)).then((({data:n})=>n)),"v-ef23f9a0":()=>a.e(909).then(a.bind(a,8098)).then((({data:n})=>n)),"v-7f5909be":()=>a.e(390).then(a.bind(a,1805)).then((({data:n})=>n)),"v-15bb06e3":()=>a.e(380).then(a.bind(a,7070)).then((({data:n})=>n)),"v-0b557a49":()=>a.e(542).then(a.bind(a,8106)).then((({data:n})=>n)),"v-fb6448d2":()=>a.e(60).then(a.bind(a,818)).then((({data:n})=>n)),"v-7cab0f64":()=>a.e(392).then(a.bind(a,7223)).then((({data:n})=>n)),"v-be3aac98":()=>a.e(281).then(a.bind(a,4128)).then((({data:n})=>n)),"v-4d557aaa":()=>a.e(4).then(a.bind(a,4572)).then((({data:n})=>n)),"v-47e6875f":()=>a.e(468).then(a.bind(a,43)).then((({data:n})=>n)),"v-5aacfb4f":()=>a.e(675).then(a.bind(a,2634)).then((({data:n})=>n)),"v-5a0eaa76":()=>a.e(461).then(a.bind(a,2110)).then((({data:n})=>n)),"v-13fec48d":()=>a.e(13).then(a.bind(a,1509)).then((({data:n})=>n)),"v-3706649a":()=>a.e(88).then(a.bind(a,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>a.e(509).then(a.bind(a,6464)).then((({data:n})=>n)),"v-74bc627b":()=>a.e(5).then(a.bind(a,2988)).then((({data:n})=>n)),"v-14f724bf":()=>a.e(69).then(a.bind(a,4770)).then((({data:n})=>n)),"v-14e6501c":()=>a.e(713).then(a.bind(a,4502)).then((({data:n})=>n)),"v-744d024e":()=>a.e(146).then(a.bind(a,6041)).then((({data:n})=>n)),"v-705c21a6":()=>a.e(888).then(a.bind(a,6762)).then((({data:n})=>n)),"v-6629f178":()=>a.e(158).then(a.bind(a,4141)).then((({data:n})=>n)),"v-f693f690":()=>a.e(516).then(a.bind(a,1442)).then((({data:n})=>n)),"v-e2acc714":()=>a.e(356).then(a.bind(a,6790)).then((({data:n})=>n)),"v-3c506944":()=>a.e(219).then(a.bind(a,3350)).then((({data:n})=>n)),"v-3279cf61":()=>a.e(118).then(a.bind(a,8588)).then((({data:n})=>n))}},4634:(n,s,a)=>{a.d(s,{g:()=>t});var e=a(4802);const t=[["v-0416b0fa","/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",{},["/record/c语言的内存排布.html","/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83","/record/c语言的内存排布.md","/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.md"]],["v-6087f698","/record/docker.html",{},["/record/docker","/record/docker.md"]],["v-f65824fc","/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",{},["/record/gin商城项目.html","/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE","/record/gin商城项目.md","/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.md"]],["v-ef23f9a0","/record/go_redis.html",{},["/record/go_redis","/record/go_redis.md"]],["v-7f5909be","/record/golang.html",{},["/record/golang","/record/golang.md"]],["v-15bb06e3","/record/redis.html",{},["/record/redis","/record/redis.md"]],["v-0b557a49","/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",{},["/record/redis缓存实践.html","/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5","/record/redis缓存实践.md","/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.md"]],["v-fb6448d2","/record/regex.html",{},["/record/regex","/record/regex.md"]],["v-7cab0f64","/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",{},["/record/初探bilibili微服务框架kratos.html","/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos","/record/初探bilibili微服务框架kratos.md","/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.md"]],["v-be3aac98","/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",{},["/record/初探golang微服务.html","/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1","/record/初探golang微服务.md","/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.md"]],["v-4d557aaa","/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",{},["/record/我的第一个微服务项目.html","/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE","/record/我的第一个微服务项目.md","/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.md"]],["v-47e6875f","/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",{},["/record/考研记录.html","/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95","/record/考研记录.md","/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.md"]],["v-5aacfb4f","/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",{},["/record/记一次leetcode周赛-md.html","/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md","/record/记一次leetcode周赛-md.md","/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.md"]],["v-5a0eaa76","/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",{},["/record/连通分量.html","/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F","/record/连通分量.md","/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.md"]],["v-13fec48d","/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",{},["/record/青春鼠鼠不会数学期望就寄了吧.html","/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7","/record/青春鼠鼠不会数学期望就寄了吧.md","/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-f693f690","/aurora-register/",{},["/aurora-register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]]].reduce(((n,[s,a,t,r])=>(n.push({name:s,path:a,component:e.Y,meta:t},...r.map((n=>({path:n,redirect:a})))),n)),[{name:"404",path:"/:catchAll(.*)",component:e.Y}])},5472:(n,s,a)=>{a.d(s,{D:()=>e});const e=[{title:"c语言内存排布",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",pathLocale:"/",extraFields:[]},{title:"docker学习",headers:[{level:2,title:"常用命令",slug:"常用命令",children:[]}],path:"/record/docker.html",pathLocale:"/",extraFields:[]},{title:"gin商城项目",headers:[],path:"/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",pathLocale:"/",extraFields:[]},{title:"go连接redis",headers:[],path:"/record/go_redis.html",pathLocale:"/",extraFields:[]},{title:"Golang碎碎念",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],path:"/record/golang.html",pathLocale:"/",extraFields:[]},{title:"初探redis",headers:[{level:2,title:"redis 特点",slug:"redis-特点",children:[]},{level:2,title:"redis简单操作",slug:"redis简单操作",children:[]},{level:2,title:"常用数据类型",slug:"常用数据类型",children:[{level:3,title:"String",slug:"string",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"Hasp",slug:"hasp",children:[]},{level:3,title:"Zset 有序列表",slug:"zset-有序列表",children:[]},{level:3,title:"Bitmaps",slug:"bitmaps",children:[]},{level:3,title:"HyperLoglog",slug:"hyperloglog",children:[]},{level:3,title:"Geospatial",slug:"geospatial",children:[]}]},{level:2,title:"Redis 订阅发布",slug:"redis-订阅发布",children:[]},{level:2,title:"事务",slug:"事务",children:[{level:3,title:"乐观锁，悲观锁",slug:"乐观锁-悲观锁",children:[]}]},{level:2,title:"Redis 配置",slug:"redis-配置",children:[]}],path:"/record/redis.html",pathLocale:"/",extraFields:[]},{title:"Redis缓存实践",headers:[{level:2,title:"几种读写方式",slug:"几种读写方式",children:[]}],path:"/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",pathLocale:"/",extraFields:[]},{title:"正则表达式学习",headers:[{level:2,title:"常见的匹配",slug:"常见的匹配",children:[]}],path:"/record/regex.html",pathLocale:"/",extraFields:[]},{title:"初探bilibili微服务框架kratos",headers:[],path:"/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",pathLocale:"/",extraFields:[]},{title:"初探golang微服务",headers:[],path:"/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",pathLocale:"/",extraFields:[]},{title:"我的第一个微服务项目",headers:[{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"暂定要使用的技术",slug:"暂定要使用的技术",children:[]},{level:2,title:"目前进度",slug:"目前进度",children:[]}],path:"/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",pathLocale:"/",extraFields:[]},{title:"考研记录",headers:[],path:"/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",pathLocale:"/",extraFields:[]},{title:"记一次leetcode周赛.md",headers:[{level:2,title:"记这周的周赛题",slug:"记这周的周赛题",children:[]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"1.可以形成最大正发行的矩形数目",slug:"_1-可以形成最大正发行的矩形数目",children:[]},{level:3,title:"2.同积元组",slug:"_2-同积元组",children:[]},{level:3,title:"3重新排列后的最大子矩阵",slug:"_3重新排列后的最大子矩阵",children:[]},{level:3,title:"4.猫和老鼠||",slug:"_4-猫和老鼠",children:[]}]}],path:"/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",pathLocale:"/",extraFields:[]},{title:"连通分量",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",pathLocale:"/",extraFields:[]},{title:"青春鼠鼠不会数学期望就寄了吧",headers:[{level:2,title:"1. 0-1分布",slug:"_1-0-1分布",children:[]},{level:2,title:"二项分布",slug:"二项分布",children:[]},{level:2,title:"3. 泊松分布",slug:"_3-泊松分布",children:[]},{level:2,title:"4.几何分布",slug:"_4-几何分布",children:[]},{level:2,title:"结语",slug:"结语",children:[]}],path:"/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]}]},5220:(n,s,a)=>{a.d(s,{H:()=>e});const e={base:"/",lang:"zh-CN",title:"嘤嘤嘤QAQ，不要点啊，呜呜呜",description:"",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ14WdvWBE05NlsE_oKYWo6YMcpNMWduZVN1w&usqp=CAU",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,s,a)=>{a.d(s,{f:()=>e});const e={navbar:[{text:"推荐",iconClass:"aurora-navbar-si-glyph-glass-water",children:[{text:"搜索引擎",children:[{text:"Bing",link:"https://www.bing.com/"},{text:"谷歌",link:"https://www.google.com/"}]},{text:"域名解析",children:[{text:"CloudFlare",link:"https://www.cloudflare.com/"}]}]},{text:"tag",link:"/tag",iconClass:"aurora-navbar-hua2"},{text:"其他",iconClass:"aurora-navbar-a-ziyuan107",children:[{text:"友链",link:"/link",iconClass:"aurora-navbar-guide"},{text:"说说",link:"/mood",iconClass:"aurora-navbar-weather"},{text:"相册",link:"/photo",iconClass:"aurora-navbar-kechengguanli"},{text:"时间线",link:"/archive",iconClass:"aurora-navbar-si-glyph-egg"}]},{text:"关于",link:"/about",iconClass:"aurora-navbar-a-ziyuan107"}],darkMode:!1,repo:"https://github.com/qsyyke/vuepress-theme-aurora",repoIconClass:"aurora-navbar-github",docsRepo:"https://github.com/qsyyke/aurora-docs",githubActions:!0,docsBranch:"main",repoLabel:"Aurora-theme",editLink:!0,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"lastTime",logoColor:"#2c3e50",showFont:"程",heroImg:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSEls19o7YLhDj6hp0zO3JtCSuysvAl1XtT8g&usqp=CAU",logo:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSEls19o7YLhDj6hp0zO3JtCSuysvAl1XtT8g&usqp=CAU",lazyLoadingImg:"https://ooszy.cco.vin/img/blog-public/ljz.gif",homePageLazyLoadingImg:"https://ooszy.cco.vin/img/blog-public/ljz.gif",customRandomSay:!1,customRandomValue:"哼！不许看，大坏蛋，嘤嘤嘤。不要啊，呜呜，哼唧唧 = =",socials:[{aHref:"https://github.com/kasoushu/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://space.bilibili.com/94898893",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"mailto:kasoushu@gmail.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-email"}],logoTitle:"采采小草莓",headTitle:"QAQ,(* ^ *)",description:"个人自怨自艾的小角落",keyword:"肥宅，二次元？，彩比，二",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bar:!1,title:"关于",describe:["喜欢安静,不喜社交","常听日语歌或者周杰伦","为混口饭吃学习coding","非常懒","爱好看动画片看妹子"],tag:["社恐","安静","小说","宅","懒"],showTag:!0},{bar:!0,title:"技  能",describe:[{name:"golang",score:20},{name:"c++",score:35},{name:"rust",score:15}],showTag:!1},{showTag:!1,bar:!0,title:"掌握框架",describe:[{name:"gin",score:0},{name:"vue",score:10}]},{bar:!0,showTag:!1,title:"掌握技能",describe:[{name:"Ctrl C V",score:100}]},{title:"未来计划",bar:!1,tag:[],showTag:!1,describe:["混吃等死","考上研","出国读书"]}],randomSawQuery:"hitokoto",method:"get",randomColor:["#ffcad4","#d8e2dc","#8d99ae","#b8f2e6","#84c7d0","#aed9e0","#00b4d8","#caf0f8","#fbc4ab","#fdc5f5","#84dcc6","#a9def9","#fcf6bd","#f0a6ca","#b9faf8","#42a5f5","#ff9800","#b39ddb","#6d45bb","#b388ff","#1565c0","#26c6da","#5e548e","#90f1ef","#5b5f97","#bbe6e4","#42bfdd","#72ddf7","#8093f1","#9ed8d8","#7ea8be","#ef90b3","#b892ef","#c0b9dd","#c0d9dd","#75c9c8","#ded9e2","#b5e2fa","#62b6cb","#5fa8d3","#0fa3b1","#b5e2fa","#5fa8d3","#62b6cb","#b892ff"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],friendLinks:[{title:"友链",links:[]}],siteInformation:{title:"你的名字",url:"你的站点",logo:"你的站点logo,示例：https://ooszy.cco.vin/img/ico/yuan.png",describe:"站点描述",cover:"你想设置的背景",contact:"email: kasoushu@gmail.com, qq:2054803836",otherDescribe:["申请友链请按照下面格式，在此页面留言，我看到就会进行添加","博客名称    博客地址      博客描述      博客logo","友链申请要求","拒绝涉政/涉黄/太多广告/盈利性站点","站点能正常访问"]},fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by @caicai","网站以备案","备案号:浙ICP备2021017115号"],isShowFooter:!0,isShowThemeCopyright:!1,isShowRunTime:!0,startRunTime:"1/10/2021 00:00:00",prefixRuntime:"小破站已运行",message:["没有公告"],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"青衫烟雨客",isFitter:!0,defaultBorderRadius:10,defaultOpacity:.8,isHomePageFollow:!0,defaultBlur:.5,split:"~",donate:{articlePage:!0,aboutPage:!0,donateProduct:[{name:"以太坊钱包",prefix:""}]},comment:{showComment:!0,serverURL:"https://aurora-local-7hrjb6mp8-qsyyke.vercel.app/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"没有描述捏",author:"@caicai",preBlog:"caicai",suffixBlog:" theme",avatar:"/shawu.png"},showOnlineMood:!0,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!1,page:["https://picoss.cco.vin/animate/wall/555260.png","https://picoss.cco.vin/animate/wall/404901.png","https://picoss.cco.vin/animate/wall/734386.png"],friend:["https://picoss.cco.vin/animate/wall/669.png","https://picoss.cco.vin/animate/wall/5332.png"],tag:["https://picoss.cco.vin/animate/wall/763311.png"],mood:["https://picoss.cco.vin/animate/wall/5849.png"]},homeWps:["/bg/1.jpg","/bg/2.jpeg","/bg/3.jpg","/bg/4.png","/bg/5.jpeg","/bg/6.png","/bg/7.jpeg","/bg/8.jpeg","/bg/9.jpeg"],homeWpsMobile:["/bg/1.jpg","/bg/3.jpg"],pageSize:4,githubUrl:"https://github.com/kasoushu",latestPageSize:6,showHomePageImg:!1,sidebarCatalogLevel:3,homePageImgApi:"https://api.ixiaowai.cn/api/api.php",mobileCutText:"caicai",sidebarTag:"categories",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"🌸",articleH3Icon:"🐳",articleH4Icon:"⛄",sidebarAvatar:"/shawu.png",sugCountPerMin:300,showRecommend:!0,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!0,wave:{showWave:!1},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.6,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"2A2Dyd2AffrnldhwftlEddVn-MdYXbMMI",appKey:"qHYTbb91iOPLelyC9lpbXxLH",masterKey:"eUwfvS3luIPnPiHS5SpEhDYr"},showPageMeta:!1,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},afDianUrl:"https://afdian.net/@qsyyke",homeTopText:"置顶",sidebarDesc:"采鸡一枚，啥也不会，喜欢做白日梦",locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,s,a)=>{a.d(s,{Z:()=>e});const e=[{data:{key:"v-0416b0fa",path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",title:"c语言内存排布",lang:"zh-CN",frontmatter:{title:"c语言内存排布",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2021/05/10 00:21",tag:["cs","计组"]},excerpt:"",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],git:{}},key:"v-0416b0fa",path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",title:"c语言内存排布",lang:"zh-CN",frontmatter:{title:"c语言内存排布",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2021/05/10 00:21",tag:["cs","计组"]},excerpt:"",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],content:"\n\n# c语言介绍\n本来想写c语言的内存如何对齐的，但是想想这个也挺简单的大家自己网上搜一下就行了，我也懒的写了\n以后要是有空再写，先鸽了\n\n# 12.3更新\n\n简单来说就是一个元素以其自身大小为单位进行寻址，由此可以推出其内存布局\n\n# 数据在内存中放置方向\n\n## 大端对齐与小端对齐\n\n简而言之就是大的在前或者小的在前\n",contentRendered:'<h1 id="c语言介绍" tabindex="-1"><a class="header-anchor" href="#c语言介绍" aria-hidden="true">#</a> c语言介绍</h1>\n<p>本来想写c语言的内存如何对齐的，但是想想这个也挺简单的大家自己网上搜一下就行了，我也懒的写了\n以后要是有空再写，先鸽了</p>\n<h1 id="_12-3更新" tabindex="-1"><a class="header-anchor" href="#_12-3更新" aria-hidden="true">#</a> 12.3更新</h1>\n<p>简单来说就是一个元素以其自身大小为单位进行寻址，由此可以推出其内存布局</p>\n<h1 id="数据在内存中放置方向" tabindex="-1"><a class="header-anchor" href="#数据在内存中放置方向" aria-hidden="true">#</a> 数据在内存中放置方向</h1>\n<h2 id="大端对齐与小端对齐" tabindex="-1"><a class="header-anchor" href="#大端对齐与小端对齐" aria-hidden="true">#</a> 大端对齐与小端对齐</h2>\n<p>简而言之就是大的在前或者小的在前</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/c语言的内存排布.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"c语言的内存排布",filePath:"/Users/jck/caicai_blog/docs/record/c语言的内存排布.md",filePathRelative:"record/c语言的内存排布.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/c语言的内存排布.html.vue",componentFilePathRelative:"pages/record/c语言的内存排布.html.vue",componentFileChunkName:"v-0416b0fa",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/c语言的内存排布.html.js",dataFilePathRelative:"pages/record/c语言的内存排布.html.js",dataFileChunkName:"v-0416b0fa",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/c语言的内存排布.html",htmlFilePathRelative:"record/c语言的内存排布.html"},{data:{key:"v-6087f698",path:"/record/docker.html",title:"docker学习",lang:"zh-CN",frontmatter:{title:"docker学习",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/01/02 00:21",tag:["docker"]},excerpt:"",headers:[{level:2,title:"常用命令",slug:"常用命令",children:[]}],git:{}},key:"v-6087f698",path:"/record/docker.html",title:"docker学习",lang:"zh-CN",frontmatter:{title:"docker学习",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/01/02 00:21",tag:["docker"]},excerpt:"",headers:[{level:2,title:"常用命令",slug:"常用命令",children:[]}],content:"\r\n# docker学习\r\n\r\n## 常用命令\r\n\r\n|命令|用处|其他|\r\n|---|---|---|\r\n|docker container run -it name:.. process |运行一个容器的一个程序|-it是交互模式|\r\n|docker image ls|列举镜像||\r\n|ps -elf|列举运行的进程||\r\n|c-PQ|保持运行退出容器||\r\n|docker container exec -it name process|进入一个运行的容器||\r\n|docker container ls|列举容器|-al列举所有容器 |\r\n\r\n",contentRendered:'<h1 id="docker学习" tabindex="-1"><a class="header-anchor" href="#docker学习" aria-hidden="true">#</a> docker学习</h1>\n<h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用处</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker container run -it name:.. process</td>\n<td>运行一个容器的一个程序</td>\n<td>-it是交互模式</td>\n</tr>\n<tr>\n<td>docker image ls</td>\n<td>列举镜像</td>\n<td></td>\n</tr>\n<tr>\n<td>ps -elf</td>\n<td>列举运行的进程</td>\n<td></td>\n</tr>\n<tr>\n<td>c-PQ</td>\n<td>保持运行退出容器</td>\n<td></td>\n</tr>\n<tr>\n<td>docker container exec -it name process</td>\n<td>进入一个运行的容器</td>\n<td></td>\n</tr>\n<tr>\n<td>docker container ls</td>\n<td>列举容器</td>\n<td>-al列举所有容器</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/docker.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"docker",filePath:"/Users/jck/caicai_blog/docs/record/docker.md",filePathRelative:"record/docker.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/docker.html.vue",componentFilePathRelative:"pages/record/docker.html.vue",componentFileChunkName:"v-6087f698",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/docker.html.js",dataFilePathRelative:"pages/record/docker.html.js",dataFileChunkName:"v-6087f698",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/docker.html",htmlFilePathRelative:"record/docker.html"},{data:{key:"v-f65824fc",path:"/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",title:"gin商城项目",lang:"zh-CN",frontmatter:{title:"gin商城项目",tag:["go","mysql","gin","vue"],categories:["go","gin","project","vue"],date:"2022/01/23 01:38"},excerpt:"",headers:[],git:{}},key:"v-f65824fc",path:"/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",title:"gin商城项目",lang:"zh-CN",frontmatter:{title:"gin商城项目",tag:["go","mysql","gin","vue"],categories:["go","gin","project","vue"],date:"2022/01/23 01:38"},excerpt:"",headers:[],content:"\n# Summary\n\n为了更好的学习go和想增加自己的项目经验，在这个月我再一次仔细的学习了一下go及其http框架gin，并用它设计了一个商城后台服务，并用vue写了一个前端。迫于时间有限，我目前只实现了用户，订单，商品管理。以及实现了商城管理员后台管理的前端页面，前端页面使用vue + ant design for vue ui库 设计，实现了管理员修改管理员信息以及管理添加，更新，删除，查询商品和进行订单管理，订单统计功能。鉴权部分为使用的jwt验证，用户或者管理员访问后端api时需携带对应的token。项目地址为：https://github.com/kasoushu/vue-mall .\n\n使用的技术\n|后端|说明|文档|\n|---|---|---|\n|gin|web框架|https://github.com/gin-gonic/gin|\n|mysql|mysql驱动|https://github.com/go-sql-driver/mysql|\n|jwt|用户验证|https://github.com/dgrijalva/jwt-go|\n|viper|配置管理|https://github.com/spf13/viper|\n\n|前端|说明|文档|\n|---|---|---|\n|vue3|前端框架|https://v3.vuejs.org/|\n|ant design|ui库|https://next.antdv.com/docs/vue/introduce/|\n|axios|前端请求库|https://www.axios-http.cn/docs/api_intro|\n|vuex|状态管理|https://vuex.vuejs.org/|\n|vue route|网页路由|https://router.vuejs.org/zh|",contentRendered:'<h1 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h1>\n<p>为了更好的学习go和想增加自己的项目经验，在这个月我再一次仔细的学习了一下go及其http框架gin，并用它设计了一个商城后台服务，并用vue写了一个前端。迫于时间有限，我目前只实现了用户，订单，商品管理。以及实现了商城管理员后台管理的前端页面，前端页面使用vue + ant design for vue ui库 设计，实现了管理员修改管理员信息以及管理添加，更新，删除，查询商品和进行订单管理，订单统计功能。鉴权部分为使用的jwt验证，用户或者管理员访问后端api时需携带对应的token。项目地址为：https://github.com/kasoushu/vue-mall .</p>\n<p>使用的技术</p>\n<table>\n<thead>\n<tr>\n<th>后端</th>\n<th>说明</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gin</td>\n<td>web框架</td>\n<td>https://github.com/gin-gonic/gin</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql驱动</td>\n<td>https://github.com/go-sql-driver/mysql</td>\n</tr>\n<tr>\n<td>jwt</td>\n<td>用户验证</td>\n<td>https://github.com/dgrijalva/jwt-go</td>\n</tr>\n<tr>\n<td>viper</td>\n<td>配置管理</td>\n<td>https://github.com/spf13/viper</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>前端</th>\n<th>说明</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vue3</td>\n<td>前端框架</td>\n<td>https://v3.vuejs.org/</td>\n</tr>\n<tr>\n<td>ant design</td>\n<td>ui库</td>\n<td>https://next.antdv.com/docs/vue/introduce/</td>\n</tr>\n<tr>\n<td>axios</td>\n<td>前端请求库</td>\n<td>https://www.axios-http.cn/docs/api_intro</td>\n</tr>\n<tr>\n<td>vuex</td>\n<td>状态管理</td>\n<td>https://vuex.vuejs.org/</td>\n</tr>\n<tr>\n<td>vue route</td>\n<td>网页路由</td>\n<td>https://router.vuejs.org/zh</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/gin商城项目.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"gin商城项目",filePath:"/Users/jck/caicai_blog/docs/record/gin商城项目.md",filePathRelative:"record/gin商城项目.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/gin商城项目.html.vue",componentFilePathRelative:"pages/record/gin商城项目.html.vue",componentFileChunkName:"v-f65824fc",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/gin商城项目.html.js",dataFilePathRelative:"pages/record/gin商城项目.html.js",dataFileChunkName:"v-f65824fc",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/gin商城项目.html",htmlFilePathRelative:"record/gin商城项目.html"},{data:{key:"v-ef23f9a0",path:"/record/go_redis.html",title:"go连接redis",lang:"zh-CN",frontmatter:{title:"go连接redis",tag:["go","redis"],categories:["go","redis"],date:"2022/01/02 11:01"},excerpt:"",headers:[],git:{}},key:"v-ef23f9a0",path:"/record/go_redis.html",title:"go连接redis",lang:"zh-CN",frontmatter:{title:"go连接redis",tag:["go","redis"],categories:["go","redis"],date:"2022/01/02 11:01"},excerpt:"",headers:[],content:'\n\n# go操作redis\n\n使用\t`"github.com/go-redis/redis"`包\n使用 `go get -u github.com/go-redis/redis`\ngo get 参数\n```\n-d 只下载不安装\n-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用\n-fix 在获取源码之后先运行 fix，然后再去做其他的事情\n-t 同时也下载需要为运行测试所需要的包\n-u 强制使用网络去更新包和它的依赖包\n-v 显示执行的命令\n```\n这里我使用docker启动redis服务，同时开启一个客户端\n\n```\n docker run --name redis_server -p 6379:6379 -d redis:latest //启动服务端\n\n docker run -it --network host --rm redis:latest redis-cli //启动 --rm 是退出时清除容器\n\n```\n\ngo中连接\n```go\n    var rdb *redis.Client\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr: "localhost:6379",\n\t\tPassword: "",\n\t\tDB: 0,\n\t})\n\t_,err :=rdb.Ping().Result() //测试连接\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n```',contentRendered:'<h1 id="go操作redis" tabindex="-1"><a class="header-anchor" href="#go操作redis" aria-hidden="true">#</a> go操作redis</h1>\n<p>使用\t<code>&quot;github.com/go-redis/redis&quot;</code>包\n使用 <code>go get -u github.com/go-redis/redis</code>\ngo get 参数</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>-d 只下载不安装\n-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用\n-fix 在获取源码之后先运行 fix，然后再去做其他的事情\n-t 同时也下载需要为运行测试所需要的包\n-u 强制使用网络去更新包和它的依赖包\n-v 显示执行的命令\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里我使用docker启动redis服务，同时开启一个客户端</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> docker run --name redis_server -p 6379:6379 -d redis:latest //启动服务端\n\n docker run -it --network host --rm redis:latest redis-cli //启动 --rm 是退出时清除容器\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>go中连接</p>\n<div class="language-go ext-go line-numbers-mode"><pre v-pre class="language-go"><code>    <span class="token keyword">var</span> rdb <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client\n\trdb <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>\n\t\tAddr<span class="token punctuation">:</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>\n\t\tPassword<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n\t\tDB<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token boolean">_</span><span class="token punctuation">,</span>err <span class="token operator">:=</span>rdb<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//测试连接</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/go_redis.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"go_redis",filePath:"/Users/jck/caicai_blog/docs/record/go_redis.md",filePathRelative:"record/go_redis.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/go_redis.html.vue",componentFilePathRelative:"pages/record/go_redis.html.vue",componentFileChunkName:"v-ef23f9a0",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/go_redis.html.js",dataFilePathRelative:"pages/record/go_redis.html.js",dataFileChunkName:"v-ef23f9a0",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/go_redis.html",htmlFilePathRelative:"record/go_redis.html"},{data:{key:"v-7f5909be",path:"/record/golang.html",title:"Golang碎碎念",lang:"zh-CN",frontmatter:{title:"Golang碎碎念",date:"2022/01/01 23:39"},excerpt:"",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],git:{}},key:"v-7f5909be",path:"/record/golang.html",title:"Golang碎碎念",lang:"zh-CN",frontmatter:{title:"Golang碎碎念",date:"2022/01/01 23:39"},excerpt:"",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],content:'\r\n\r\n\r\n## 杂项\r\n\r\n_用法\r\n1. 导入包时，仅引用该包，（即只执行init函数）\r\n2. 省略变量\r\n\r\n变量声明\r\nvar name type;\r\n变量声明自动初始化\r\n整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil\r\n批量声明\r\n```\r\n    var (\r\n        a string\r\n        b int\r\n        c bool\r\n        d float32\r\n    )\r\n```\r\n\r\n\r\n数组声明\r\n```\r\n    全局：\r\n    var arr0 [5]int = [5]int{1, 2, 3}\r\n    var arr1 = [5]int{1, 2, 3, 4, 5}\r\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\r\n    var str = [5]string{3: "hello world", 4: "tom"}\r\n    局部：\r\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\r\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\r\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\r\n    d := [...]struct {\r\n        name string\r\n        age  uint8\r\n    }{\r\n        {"user1", 10}, // 可省略元素类型。\r\n        {"user2", 20}, // 别忘了最后一行的逗号。\r\n    }\r\n```\r\n\r\ngolang 分配内存\r\n1. new\r\n2. make\r\n   1. map只能为slice, map, channel分配内存，并返回一个初始化的值.           \r\n```\r\nmake(map[string]string)\r\nmake([]int, 2)\r\nmake([]int, 2, 4) \r\n```\r\n\r\n1. 第一种用法，即缺少长度的参数，只传类型，这种用法只能用在类型为map或chan的场景，例如make([]int)是会报错的。这样返回的空间长度都是默认为0的。\r\n\r\n2. 第二种用法，指定了长度，例如make([]int, 2)返回的是一个长度为2的slice\r\n\r\n3. 第三种用法，第二参数指定的是切片的长度，第三个参数是用来指定预留的空间长度，例如a := make([]int, 2, 4), 这里值得注意的是返回的切片a的总长度是4，预留的意思并不是另外多出来4的长度，其实是包含了前面2个已经切片的个数的。所以举个例子当你这样用的时候 a := make([]int, 4, 2)，就会报语法错误。\r\n\r\n\r\n## map\r\n\r\n判断是否存在\r\n```\r\nfunc main() {\r\n    scoreMap := make(map[string]int)\r\n    scoreMap["张三"] = 90\r\n    scoreMap["小明"] = 100\r\n    // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\r\n    v, ok := scoreMap["张三"]\r\n    if ok {\r\n        fmt.Println(v)\r\n    } else {\r\n        fmt.Println("查无此人")\r\n    }\r\n}\r\n```\r\n\r\n## 结构体\r\n是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\r\n匿名字段\r\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\r\n\r\n## 函数\r\n\r\n多返回值可直接作为其他函数调用实参\r\n\r\n```\r\npackage main\r\n\r\nfunc test() (int, int) {\r\n    return 1, 2\r\n}\r\n\r\nfunc add(x, y int) int {\r\n    return x + y\r\n}\r\n\r\nfunc sum(n ...int) int {\r\n    var x int\r\n    for _, i := range n {\r\n        x += i\r\n    }\r\n\r\n    return x\r\n}\r\n```\r\n\r\n\r\ndefer\r\n1. 关闭文件句柄\r\n2. 锁资源释放\r\n3. 数据库连接释放',contentRendered:'<h2 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h2>\n<p>_用法</p>\n<ol>\n<li>导入包时，仅引用该包，（即只执行init函数）</li>\n<li>省略变量</li>\n</ol>\n<p>变量声明\nvar name type;\n变量声明自动初始化\n整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil\n批量声明</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    var (\n        a string\n        b int\n        c bool\n        d float32\n    )\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>数组声明</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    全局：\n    var arr0 [5]int = [5]int{1, 2, 3}\n    var arr1 = [5]int{1, 2, 3, 4, 5}\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\n    var str = [5]string{3: "hello world", 4: "tom"}\n    局部：\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {"user1", 10}, // 可省略元素类型。\n        {"user2", 20}, // 别忘了最后一行的逗号。\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>golang 分配内存</p>\n<ol>\n<li>new</li>\n<li>make\n<ol>\n<li>map只能为slice, map, channel分配内存，并返回一个初始化的值.</li>\n</ol>\n</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>make(map[string]string)\nmake([]int, 2)\nmake([]int, 2, 4) \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol>\n<li>\n<p>第一种用法，即缺少长度的参数，只传类型，这种用法只能用在类型为map或chan的场景，例如make([]int)是会报错的。这样返回的空间长度都是默认为0的。</p>\n</li>\n<li>\n<p>第二种用法，指定了长度，例如make([]int, 2)返回的是一个长度为2的slice</p>\n</li>\n<li>\n<p>第三种用法，第二参数指定的是切片的长度，第三个参数是用来指定预留的空间长度，例如a := make([]int, 2, 4), 这里值得注意的是返回的切片a的总长度是4，预留的意思并不是另外多出来4的长度，其实是包含了前面2个已经切片的个数的。所以举个例子当你这样用的时候 a := make([]int, 4, 2)，就会报语法错误。</p>\n</li>\n</ol>\n<h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2>\n<p>判断是否存在</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>func main() {\n    scoreMap := make(map[string]int)\n    scoreMap["张三"] = 90\n    scoreMap["小明"] = 100\n    // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\n    v, ok := scoreMap["张三"]\n    if ok {\n        fmt.Println(v)\n    } else {\n        fmt.Println("查无此人")\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2>\n<p>是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\n匿名字段\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2>\n<p>多返回值可直接作为其他函数调用实参</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>package main\n\nfunc test() (int, int) {\n    return 1, 2\n}\n\nfunc add(x, y int) int {\n    return x + y\n}\n\nfunc sum(n ...int) int {\n    var x int\n    for _, i := range n {\n        x += i\n    }\n\n    return x\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>defer</p>\n<ol>\n<li>关闭文件句柄</li>\n<li>锁资源释放</li>\n<li>数据库连接释放</li>\n</ol>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/golang.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"golang",filePath:"/Users/jck/caicai_blog/docs/record/golang.md",filePathRelative:"record/golang.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/golang.html.vue",componentFilePathRelative:"pages/record/golang.html.vue",componentFileChunkName:"v-7f5909be",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/golang.html.js",dataFilePathRelative:"pages/record/golang.html.js",dataFileChunkName:"v-7f5909be",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/golang.html",htmlFilePathRelative:"record/golang.html"},{data:{key:"v-15bb06e3",path:"/record/redis.html",title:"初探redis",lang:"zh-CN",frontmatter:{title:"初探redis",tag:["redis"],categories:["redis"],date:"2022/01/01 19:36"},excerpt:"",headers:[{level:2,title:"redis 特点",slug:"redis-特点",children:[]},{level:2,title:"redis简单操作",slug:"redis简单操作",children:[]},{level:2,title:"常用数据类型",slug:"常用数据类型",children:[{level:3,title:"String",slug:"string",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"Hasp",slug:"hasp",children:[]},{level:3,title:"Zset 有序列表",slug:"zset-有序列表",children:[]},{level:3,title:"Bitmaps",slug:"bitmaps",children:[]},{level:3,title:"HyperLoglog",slug:"hyperloglog",children:[]},{level:3,title:"Geospatial",slug:"geospatial",children:[]}]},{level:2,title:"Redis 订阅发布",slug:"redis-订阅发布",children:[]},{level:2,title:"事务",slug:"事务",children:[{level:3,title:"乐观锁，悲观锁",slug:"乐观锁-悲观锁",children:[]}]},{level:2,title:"Redis 配置",slug:"redis-配置",children:[]}],git:{}},key:"v-15bb06e3",path:"/record/redis.html",title:"初探redis",lang:"zh-CN",frontmatter:{title:"初探redis",tag:["redis"],categories:["redis"],date:"2022/01/01 19:36"},excerpt:"",headers:[{level:2,title:"redis 特点",slug:"redis-特点",children:[]},{level:2,title:"redis简单操作",slug:"redis简单操作",children:[]},{level:2,title:"常用数据类型",slug:"常用数据类型",children:[{level:3,title:"String",slug:"string",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"Hasp",slug:"hasp",children:[]},{level:3,title:"Zset 有序列表",slug:"zset-有序列表",children:[]},{level:3,title:"Bitmaps",slug:"bitmaps",children:[]},{level:3,title:"HyperLoglog",slug:"hyperloglog",children:[]},{level:3,title:"Geospatial",slug:"geospatial",children:[]}]},{level:2,title:"Redis 订阅发布",slug:"redis-订阅发布",children:[]},{level:2,title:"事务",slug:"事务",children:[{level:3,title:"乐观锁，悲观锁",slug:"乐观锁-悲观锁",children:[]}]},{level:2,title:"Redis 配置",slug:"redis-配置",children:[]}],content:'\r\n\r\n# redis 学习\r\n\r\n设置后台启动\r\nredis.conf 中 \r\n```\r\ndaemonize no // yes为后台启动\r\n```\r\n启动服务命令为：redis-server\r\n后台启动时可以使用redis-cli连接redis服务器\r\n\r\n\r\n## redis 特点\r\n\r\n单线程，io多路复用\r\n可持久化\r\n\r\n## redis简单操作\r\n\r\n|操作|作用|\r\n|---|---|\r\n|set key value|设置key为value|\r\n|keys *|查看当前库所有key|\r\n|exists key|判断某个key是否存在|\r\n|type key|查看这个key时什么类型|\r\n|del key|删除指定的key数据|\r\n|unlink key|根据value选择非阻塞删除|\r\n|expire key 10|为指定key设置过期时间（10）是10s|\r\n|ttl key|查看该key还有多久过期-1表示永不过气，-2表示已经过期|\r\n|select 0|选择数据库0|\r\n|dbsize|查看有多少key|\r\n|flushdb|清空当前db|\r\n|flushall|清空全部库|\r\n|get key|取值|\r\n|append key value|在key 后添加value|\r\n|strlen key|获取键的长度|\r\n|setnx key value|当值不存在时设置值|\r\n|incr key|值自增|\r\n|decr key|值自减|\r\n|incrby/decrby key step|值增/减step|\r\n|mset key v1 v2 v3...|设置多个value|\r\n|mget k1 k2 k3||\r\n|msetnx nx k1 v1 k2 v2 k3 v3|原子操作，若有一个不成功，都不成功|\r\n|getrange key index1,index2|获取范围内的值|\r\n|set range key index value|用v符号key 从index开始的|\r\n|setex key ttl value|设置value 同时设置ttl|\r\n|getset key value|获取旧值设置新值|\r\n\r\n## 常用数据类型\r\n\r\n### String\r\n\r\n二进制安全 redis中一个value做多512M\r\n可修改，内存结构类似java的arrarylist，预分配冗余空间类似capacity，size，小于1M时每次扩容翻倍，大于1M每次增加1M\r\n\r\n### List\r\n\r\n单键多值，是一个双向链表\r\n内存结构，当元素少时，内存中连续分配，数据多的时分链式分配\r\n|操作|含义|\r\n|---|---|\r\n|lpush/rpush key v1 v2 v3|左边插入，右边插入|\r\n|lpop/rpop key|从key左边/右边删除一个元素|\r\n|rpoplpush k1 k2|从k1右边删除一个插入到k2左边|\r\n|lrange key start stop|按索引下标获得元素\r\n|lindex key index|按下索引下标获得元素|\r\n|llen key|获列表长度|\r\n|linsert key before v1 newvalue |在value的后面插入newvalue|\r\n|lrem key n value|从左边查出n个value|\r\n|lset key index value|将列表key下标为index的值替换成value|\r\n\r\n### Set\r\n\r\n哈希表实现\r\n\r\n|操作|含义|\r\n|---|---|\r\n|sadd key v1 v2...|将几个元素加入key|\r\n|smenbers key|取出key中元素|\r\n|sismenber key value|判断key中是否存在value|\r\n|scard key|返回个数|\r\n|srem key v1 v2...|删除key中元素|\r\n|spop key|随机从key中删除一个元素|\r\n|srandmenber key n|随机从key中取出n个元素|\r\n|smove source destination value|把集合中一个值从一个集合移动到另一个|\r\n|sinter k1 k2|返回交集元素 |\r\n|sunion k1 k2|返回并集元素|\r\n|sdiff  k1 k2|返回差集元素|\r\n\r\n### Hasp\r\n\r\n就是一个map，存键值对\r\n\r\n|操作|含义|\r\n|---|---|\r\n|hset key field value|给key中的field赋值value|\r\n|hget key field|取出key中field的值|\r\n|hmset key f1 v1 f2 v2 ...|批量设置|\r\n|hkeys key|列出hash中所有field|\r\n|hexists key field|查看key中是否存在field|\r\n|hvals key|列出该key中所有value|\r\n|hincrby key field increment|为key中fieldfield 加上增量|\r\n|hsetnx key field value|若field不存在则设置field为value|\r\n\r\n### Zset 有序列表\r\n\r\n是一个没有重复元素的字符串集合，每个域关联一个大小，大小有序\r\nZset 内部由hash表和跳跃表组成，跳跃表给元素value排序查找\r\n\r\n|操作|含义|\r\n|---|---|\r\n|zadd key score1 value1...|将一或多个s,v插入key中|\r\n|zrange key start stop [withscores]|返回有序集key中下标在start到stop之间的元素，若带withscores则同时返回scores|\r\n|zrangebyscore key minmax [withscores][limit offset count]|返回key中score介于min和max之间的包含等于按score值递增排列|\r\n|zincrby key increment value|为key的score加上增量|\r\n|zrevrangebyscore key maxmin [withscores][limit offset count]|降序|\r\n|zrem key value|删除key中value|\r\n|zcount key min max |统计该区间内的元素|\r\n|zrank key value|返回key中该value排名，0为第一个|\r\n\r\n### Bitmaps\r\n\r\n本身是字符串但是能对位操作\r\n\r\n|操作|含义|\r\n|---|---|\r\n|setbit key offset value|设置key中某个offset的值（0/1），offset从0开始|\r\n|getbit key offset|得到key中offset的值|\r\n|bitcount key [start stop]|统计1的数|\r\n|bitop and/or/not/xor  destkey k1 k2 k3..|对k1,k2,k3做op操作结果保存在destkey中|\r\n\r\n\r\n### HyperLoglog\r\n\r\n|操作|含义|\r\n|---|---|\r\n|pfadd key element ...|向key中添加element|\r\n|pfcount key|返回key中元素个数|\r\n|pfmerge dkey s1key s2key...|将s1,s2...中合并放到dkey中|\r\n\r\n### Geospatial\r\n方便放地理位置\r\n|操作|含义|\r\n|---|---|\r\n|geoadd key longitude latitude menber ...|添加key 经度纬度名称|\r\n|geopos key menber|从key中获取menber的经纬度|\r\n|geodist key menber1 menber2 [m\\|km\\|ft]|获取两地点的直线距离|\r\n|georadius key longitude latitude radius m\\|km\\|ft|找出给定坐标半径内的地点|\r\n\r\n## Redis 订阅发布\r\n\r\nredis客户端之间可以订阅发布消息\r\n\r\n命令\r\n|subscribe channel|订阅channel1|\r\n|publish channel msg|发布消息到channel1|\r\n\r\n## 事务\r\n\r\n### 乐观锁，悲观锁\r\n\r\n乐观锁，每次拿数据不加锁，修改时对比版本（数据会附加版本信息？），使用checkandset（）\r\n悲观锁:每次拿数据加锁。\r\n\r\n\r\n|操作|含义|\r\n|---|---|\r\n|multi|定义一组操作|\r\n|exec|执行|\r\n|discard|放弃|\r\n|watch key...|watch key，采用乐观锁，如果在事务执行前key发生改变那么事务会被打断|\r\n\r\n\r\n1. 各指令按序执行，不会被其他事务打断，执行中有错误则错误的那个执行失败，其他的正常执行，输入指令时有错误的，直接退出multi\r\n2. 没有隔离级别的概念，队列中命令没有被提交时不会被执行\r\n3. 不保证原子性，事务中一条命令失败其后的继续执行，没有回滚\r\n\r\n\r\n## Redis 配置\r\n\r\n配置文件大小写不敏感\r\n```\r\n# Redis configuration file example.\r\n#\r\n# Note that in order to read the configuration file, Redis must be\r\n# started with the file path as first argument:\r\n#\r\n# ./redis-server /path/to/redis.conf\r\n\r\n# Note on units: when memory size is needed, it is possible to specify\r\n# it in the usual form of 1k 5GB 4M and so forth:\r\n#\r\n# 1k => 1000 bytes\r\n# 1kb => 1024 bytes\r\n# 1m => 1000000 bytes\r\n# 1mb => 1024*1024 bytes\r\n# 1g => 1000000000 bytes\r\n# 1gb => 1024*1024*1024 bytes\r\n#\r\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\r\n\r\n################################## INCLUDES ###################################\r\n################################## 包含     ###################################\r\n\r\n# Include one or more other config files here.  This is useful if you\r\n# have a standard template that goes to all Redis servers but also need\r\n# to customize a few per-server settings.  Include files can include\r\n# other files, so use this wisely.\r\n#\r\n# Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"\r\n# from admin or Redis Sentinel. Since Redis always uses the last processed\r\n# line as value of a configuration directive, you\'d better put includes\r\n# at the beginning of this file to avoid overwriting config change at runtime.\r\n#\r\n# If instead you are interested in using includes to override configuration\r\n# options, it is better to use include as the last line.\r\n#\r\n# 假如说你有一个可用于所有的 redis server 的标准配置模板，\r\n# 但针对某些 server 又需要一些个性化的设置，\r\n# 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。\r\n#\r\n# 但是要注意哦，include 是不能被 config rewrite 命令改写的\r\n# 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，\r\n# 以避免在运行时覆盖配置的改变，相反，你就把它放在后面\r\n# include /path/to/local.conf\r\n# include /path/to/other.conf\r\n\r\n################################ GENERAL  #####################################\r\n################################ 常用     #####################################\r\n\r\n# By default Redis does not run as a daemon. Use \'yes\' if you need it.\r\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\r\n# 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。\r\n# 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。\r\ndaemonize yes\r\n\r\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\r\n# default. You can specify a custom pid file location here.\r\n# 当 Redis 以守护进程的方式运行的时候，Redis 默认会把 pid 文件放在/var/run/redis.pid\r\n# 可配置到其他地址，当运行多个 redis 服务时，需要指定不同的 pid 文件和端口\r\n# 指定存储Redis进程号的文件路径\r\npidfile /var/run/redis.pid\r\n\r\n# Accept connections on the specified port, default is 6379.\r\n# If port 0 is specified Redis will not listen on a TCP socket.\r\n# 端口，默认端口是6379，生产环境中建议更改端口号，安全性更高\r\n# 如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。\r\nport 9966\r\n\r\n# TCP listen() backlog.\r\n#\r\n# In high requests-per-second environments you need an high backlog in order\r\n# to avoid slow clients connections issues. Note that the Linux kernel\r\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\r\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\r\n# in order to get the desired effect.\r\n# TCP 监听的最大容纳数量\r\n# 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，\r\n# 当系统并发量大并且客户端速度缓慢的时候，你需要把这个值调高以避免客户端连接缓慢的问题。\r\n# Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，默认是511，而Linux的默认参数值是128。\r\n# 所以可以将这二个参数一起参考设定，你以便达到你的预期。\r\n#  \r\ntcp-backlog 511\r\n\r\n# By default Redis listens for connections from all the network interfaces\r\n# available on the server. It is possible to listen to just one or multiple\r\n# interfaces using the "bind" configuration directive, followed by one or\r\n# more IP addresses.\r\n#\r\n# Examples:\r\n#\r\n# bind 192.168.1.100 10.0.0.1\r\n# 有时候为了安全起见，redis一般都是监听127.0.0.1 但是有时候又有同网段能连接的需求，当然可以绑定0.0.0.0 用iptables来控制访问权限，或者设置redis访问密码来保证数据安全\r\n\r\n# 不设置将处理所有请求,建议生产环境中设置，有个误区：bind是用来限制外网IP访问的，其实不是，限制外网ip访问可以通过iptables；如：-A INPUT -s 10.10.1.0/24 -p tcp -m state --state NEW -m tcp --dport 9966 -j ACCEPT ；\r\n# 实际上，bind ip 绑定的是redis所在服务器网卡的ip，当然127.0.0.1也是可以的\r\n#如果绑定一个外网ip，就会报错：Creating Server TCP listening socket xxx.xxx.xxx.xxx:9966: bind: Cannot assign requested address\r\n\r\n# bind 127.0.0.1\r\nbind 127.0.0.1 10.10.1.3\r\n\r\n# 假设绑定是以上ip，使用 netstat -anp|grep 9966 会发现，这两个ip被bind，其中10.10.1.3是服务器网卡的ip\r\n# tcp        0      0 10.10.1.3:9966         0.0.0.0:*                   LISTEN      11188/redis-server  \r\n# tcp        0      0 127.0.0.1:9966         0.0.0.0:*                   LISTEN      11188/redis-server \r\n\r\n\r\n# Specify the path for the Unix socket that will be used to listen for\r\n# incoming connections. There is no default, so Redis will not listen\r\n# on a unix socket when not specified.\r\n#\r\n# unixsocket /tmp/redis.sock\r\n# unixsocketperm 700\r\n\r\n# Close the connection after a client is idle for N seconds (0 to disable)\r\n# 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。\r\ntimeout 0\r\n\r\n# TCP keepalive.\r\n#\r\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\r\n# of communication. This is useful for two reasons:\r\n#\r\n# 1) Detect dead peers.\r\n# 2) Take the connection alive from the point of view of network\r\n#    equipment in the middle.\r\n#\r\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\r\n# Note that to close the connection the double of the time is needed.\r\n# On other kernels the period depends on the kernel configuration.\r\n#\r\n# A reasonable value for this option is 60 seconds.\r\n\r\n# tcp 心跳包。\r\n#\r\n# 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。\r\n# 这个之所有有用，主要由两个原因：\r\n#\r\n# 1) 防止死的 peers\r\n# 2) Take the connection alive from the point of view of network\r\n#    equipment in the middle.\r\n#\r\n# 推荐一个合理的值就是60秒\r\ntcp-keepalive 0\r\n\r\n# Specify the server verbosity level.\r\n# This can be one of:\r\n# debug (a lot of information, useful for development/testing)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (moderately verbose, what you want in production probably)\r\n# warning (only very important / critical messages are logged)\r\n# 日志记录等级，4个可选值debug,verbose,notice,warning\r\n# 可以是下面的这些值：\r\n# debug (适用于开发或测试阶段)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (适用于生产环境)\r\n# warning (仅仅一些重要的消息被记录)\r\nloglevel notice\r\n\r\n# Specify the log file name. Also the empty string can be used to force\r\n# Redis to log on the standard output. Note that if you use standard\r\n# output for logging but daemonize, logs will be sent to /dev/null\r\n#配置 log 文件地址,默认打印在命令行终端的窗口上，也可设为/dev/null屏蔽日志、\r\nlogfile "/data/logs/redis/redis.log"\r\n\r\n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\r\n# and optionally update the other syslog parameters to suit your needs.\r\n# 要想把日志记录到系统日志，就把它改成 yes，\r\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\r\n# syslog-enabled no\r\n\r\n# Specify the syslog identity.\r\n# 设置 syslog 的 identity。\r\n# syslog-ident redis\r\n\r\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\r\n# syslog-facility local0\r\n\r\n# Set the number of databases. The default database is DB 0, you can select\r\n# a different one on a per-connection basis using SELECT <dbid> where\r\n# dbid is a number between 0 and \'databases\'-1\r\n# 可用的数据库数，默认值为16，默认数据库为0，数据库范围在0-（database-1）之间\r\ndatabases 16\r\n\r\n################################ SNAPSHOTTING  ################################\r\n################################ 快照          ################################\r\n#\r\n# Save the DB on disk:\r\n#\r\n#   save <seconds> <changes>\r\n#\r\n#   Will save the DB if both the given number of seconds and the given\r\n#   number of write operations against the DB occurred.\r\n#\r\n#   In the example below the behaviour will be to save:\r\n#   after 900 sec (15 min) if at least 1 key changed\r\n#   after 300 sec (5 min) if at least 10 keys changed\r\n#   after 60 sec if at least 10000 keys changed\r\n#\r\n#   Note: you can disable saving completely by commenting out all "save" lines.\r\n#\r\n#   It is also possible to remove all the previously configured save\r\n#   points by adding a save directive with a single empty string argument\r\n#   like in the following example:\r\n#\r\n#   save ""\r\n# 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。\r\n\r\n#    if(在60秒之内有10000个keys发生变化时){\r\n#      进行镜像备份\r\n#    }else if(在300秒之内有10个keys发生了变化){\r\n#      进行镜像备份\r\n#    }else if(在900秒之内有1个keys发生了变化){\r\n#      进行镜像备份\r\n#    }\r\n\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n\r\n# By default Redis will stop accepting writes if RDB snapshots are enabled\r\n# (at least one save point) and the latest background save failed.\r\n# This will make the user aware (in a hard way) that data is not persisting\r\n# on disk properly, otherwise chances are that no one will notice and some\r\n#:/ disaster will happen.\r\n#\r\n# If the background saving process will start working again Redis will\r\n# automatically allow writes again.\r\n#\r\n# However if you have setup your proper monitoring of the Redis server\r\n# and persistence, you may want to disable this feature so that Redis will\r\n# continue to work as usual even if there are problems with disk,\r\n# permissions, and so forth.\r\n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\r\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\r\n# 否则就会没人注意到灾难的发生。\r\n#\r\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\r\n#\r\n# 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好\r\nstop-writes-on-bgsave-error yes\r\n\r\n# Compress string objects using LZF when dump .rdb databases?\r\n# For default that\'s set to \'yes\' as it\'s almost always a win.\r\n# If you want to save some CPU in the saving child set it to \'no\' but\r\n# the dataset will likely be bigger if you have compressible values or keys.\r\n# 在进行备份时,是否进行压缩\r\n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\r\n# 默认都设为 yes\r\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\r\n# 不过这个数据集可能就会比较大\r\nrdbcompression yes\r\n\r\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\r\n# This makes the format more resistant to corruption but there is a performance\r\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\r\n# for maximum performances.\r\n#\r\n# RDB files created with checksum disabled have a checksum of zero that will\r\n# tell the loading code to skip the check.    \r\n# 读取和写入的时候是否支持CRC64校验，默认是开启的\r\nrdbchecksum yes\r\n\r\n# The filename where to dump the DB\r\n# 备份文件的文件名\r\ndbfilename dump.rdb\r\n\r\n# The working directory.\r\n#\r\n# The DB will be written inside this directory, with the filename specified\r\n# above using the \'dbfilename\' configuration directive.\r\n#\r\n# The Append Only File will also be created inside this directory.\r\n#\r\n# Note that you must specify a directory here, not a file name.\r\n# 数据库备份的文件放置的路径\r\n# 路径跟文件名分开配置是因为 Redis 备份时，先会将当前数据库的状态写入到一个临时文件\r\n# 等备份完成时，再把该临时文件替换为上面所指定的文件\r\n# 而临时文件和上面所配置的备份文件都会放在这个指定的路径当中\r\n# 默认值为 ./\r\ndir /data/data/redis/\r\n\r\n################################# REPLICATION #################################\r\n################################# 主从复制    #################################\r\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\r\n# another Redis server. A few things to understand ASAP about Redis replication.\r\n#\r\n# 1) Redis replication is asynchronous, but you can configure a master to\r\n#    stop accepting writes if it appears to be not connected with at least\r\n#    a given number of slaves.\r\n# 2) Redis slaves are able to perform a partial resynchronization with the\r\n#    master if the replication link is lost for a relatively small amount of\r\n#    time. You may want to configure the replication backlog size (see the next\r\n#    sections of this file) with a sensible value depending on your needs.\r\n# 3) Replication is automatic and does not need user intervention. After a\r\n#    network partition slaves automatically try to reconnect to masters\r\n#    and resynchronize with them.\r\n#\r\n# 设置该数据库为其他数据库的从数据库\r\n# slaveof <masterip> <masterport> 当本机为从服务时，设置主服务的IP及端口\r\n# slaveof <masterip> <masterport>\r\n\r\n# If the master is password protected (using the "requirepass" configuration\r\n# directive below) it is possible to tell the slave to authenticate before\r\n# starting the replication synchronization process, otherwise the master will\r\n# refuse the slave request.\r\n#\r\n# 指定与主数据库连接时需要的密码验证\r\n# masterauth <master-password> 当本机为从服务时，设置访问master服务器的密码\r\n# masterauth <master-password>\r\n\r\n# When a slave loses its connection with the master, or when the replication\r\n# is still in progress, the slave can act in two different ways:\r\n#\r\n# 1) if slave-serve-stale-data is set to \'yes\' (the default) the slave will\r\n#    still reply to client requests, possibly with out of date data, or the\r\n#    data set may just be empty if this is the first synchronization.\r\n#\r\n# 2) if slave-serve-stale-data is set to \'no\' the slave will reply with\r\n#    an error "SYNC with master in progress" to all the kind of commands\r\n#    but to INFO and SLAVEOF.\r\n#\r\n# 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”,除了INFO，SLAVEOF这两个命令\r\nslave-serve-stale-data yes\r\n\r\n# You can configure a slave instance to accept writes or not. Writing against\r\n# a slave instance may be useful to store some ephemeral data (because data\r\n# written on a slave will be easily deleted after resync with the master) but\r\n# may also cause problems if clients are writing to it because of a\r\n# misconfiguration.\r\n#\r\n# Since Redis 2.6 by default slaves are read-only.\r\n#\r\n# Note: read only slaves are not designed to be exposed to untrusted clients\r\n# on the internet. It\'s just a protection layer against misuse of the instance.\r\n# Still a read only slave exports by default all the administrative commands\r\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\r\n# security of read only slaves using \'rename-command\' to shadow all the\r\n# administrative / dangerous commands.\r\n# 是否允许slave服务器节点只提供读服务\r\nslave-read-only yes\r\n\r\n# Replication SYNC strategy: disk or socket.\r\n#\r\n# -------------------------------------------------------\r\n# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY\r\n# -------------------------------------------------------\r\n#\r\n# New slaves and reconnecting slaves that are not able to continue the replication\r\n# process just receiving differences, need to do what is called a "full\r\n# synchronization". An RDB file is transmitted from the master to the slaves.\r\n# The transmission can happen in two different ways:\r\n#\r\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\r\n#                 file on disk. Later the file is transferred by the parent\r\n#                 process to the slaves incrementally.\r\n# 2) Diskless: The Redis master creates a new process that directly writes the\r\n#              RDB file to slave sockets, without touching the disk at all.\r\n#\r\n# With disk-backed replication, while the RDB file is generated, more slaves\r\n# can be queued and served with the RDB file as soon as the current child producing\r\n# the RDB file finishes its work. With diskless replication instead once\r\n# the transfer starts, new slaves arriving will be queued and a new transfer\r\n# will start when the current one terminates.\r\n#\r\n# When diskless replication is used, the master waits a configurable amount of\r\n# time (in seconds) before starting the transfer in the hope that multiple slaves\r\n# will arrive and the transfer can be parallelized.\r\n#\r\n# With slow disks and fast (large bandwidth) networks, diskless replication\r\n# works better.\r\nrepl-diskless-sync no\r\n\r\n# When diskless replication is enabled, it is possible to configure the delay\r\n# the server waits in order to spawn the child that transfers the RDB via socket\r\n# to the slaves.\r\n#\r\n# This is important since once the transfer starts, it is not possible to serve\r\n# new slaves arriving, that will be queued for the next RDB transfer, so the server\r\n# waits a delay in order to let more slaves arrive.\r\n#\r\n# The delay is specified in seconds, and by default is 5 seconds. To disable\r\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\r\nrepl-diskless-sync-delay 5\r\n\r\n# Slaves send PINGs to server in a predefined interval. It\'s possible to change\r\n# this interval with the repl_ping_slave_period option. The default value is 10\r\n# seconds.\r\n#\r\n# Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\r\n# 你可以改变这个时间间隔。默认为 10 秒。\r\n# repl-ping-slave-period 10\r\n\r\n# The following option sets the replication timeout for:\r\n#\r\n# 1) Bulk transfer I/O during SYNC, from the point of view of slave.\r\n# 2) Master timeout from the point of view of slaves (data, pings).\r\n# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).\r\n#\r\n# It is important to make sure that this value is greater than the value\r\n# specified for repl-ping-slave-period otherwise a timeout will be detected\r\n# every time there is low traffic between the master and the slave.\r\n#\r\n# 设置主从复制过期时间\r\n# 这个值一定要比 repl-ping-slave-period 大\r\n# repl-timeout 60\r\n\r\n# Disable TCP_NODELAY on the slave socket after SYNC?\r\n#\r\n# If you select "yes" Redis will use a smaller number of TCP packets and\r\n# less bandwidth to send data to slaves. But this can add a delay for\r\n# the data to appear on the slave side, up to 40 milliseconds with\r\n# Linux kernels using a default configuration.\r\n#\r\n# If you select "no" the delay for data to appear on the slave side will\r\n# be reduced but more bandwidth will be used for replication.\r\n#\r\n# By default we optimize for low latency, but in very high traffic conditions\r\n# or when the master and slaves are many hops away, turning this to "yes" may\r\n# be a good idea.\r\n# 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。\r\nrepl-disable-tcp-nodelay no\r\n\r\n# Set the replication backlog size. The backlog is a buffer that accumulates\r\n# slave data when slaves are disconnected for some time, so that when a slave\r\n# wants to reconnect again, often a full resync is not needed, but a partial\r\n# resync is enough, just passing the portion of data the slave missed while\r\n# disconnected.\r\n#\r\n# The bigger the replication backlog, the longer the time the slave can be\r\n# disconnected and later be able to perform a partial resynchronization.\r\n#\r\n# The backlog is only allocated once there is at least a slave connected.\r\n#\r\n# 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\r\n# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\r\n# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\r\n#\r\n# The biggest the replication backlog, the longer the time the slave can be\r\n# disconnected and later be able to perform a partial resynchronization.\r\n# 这个值越大，salve 可以断开连接的时间就越长。\r\n\r\n# repl-backlog-size 1mb\r\n\r\n# After a master has no longer connected slaves for some time, the backlog\r\n# will be freed. The following option configures the amount of seconds that\r\n# need to elapse, starting from the time the last slave disconnected, for\r\n# the backlog buffer to be freed.\r\n#\r\n# A value of 0 means to never release the backlog.\r\n#\r\n# 在某些时候，master 不再连接 slaves，backlog 将被释放。\r\n# 如果设置为 0 ，意味着绝不释放 backlog 。\r\n# repl-backlog-ttl 3600\r\n\r\n# The slave priority is an integer number published by Redis in the INFO output.\r\n# It is used by Redis Sentinel in order to select a slave to promote into a\r\n# master if the master is no longer working correctly.\r\n#\r\n# A slave with a low priority number is considered better for promotion, so\r\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\r\n# pick the one with priority 10, that is the lowest.\r\n#\r\n# However a special priority of 0 marks the slave as not able to perform the\r\n# role of master, so a slave with priority of 0 will never be selected by\r\n# Redis Sentinel for promotion.\r\n#\r\n# By default the priority is 100.\r\n# 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis\r\n# Sentinel会将priority值最小的slave提升为master。\r\n# 这个值越小，就越会被优先选中，需要注意的是，\r\n# 若该配置项为0，则对应的slave永远不会自动提升为master。\r\nslave-priority 100\r\n\r\n# It is possible for a master to stop accepting writes if there are less than\r\n# N slaves connected, having a lag less or equal than M seconds.\r\n#\r\n# The N slaves need to be in "online" state.\r\n#\r\n# The lag in seconds, that must be <= the specified value, is calculated from\r\n# the last ping received from the slave, that is usually sent every second.\r\n#\r\n# This option does not GUARANTEE that N replicas will accept the write, but\r\n# will limit the window of exposure for lost writes in case not enough slaves\r\n# are available, to the specified number of seconds\r\n#\r\n# For example to require at least 3 slaves with a lag <= 10 seconds use:\r\n#\r\n# min-slaves-to-write 3\r\n# min-slaves-max-lag 10\r\n#\r\n# Setting one or the other to 0 disables the feature.\r\n#\r\n# By default min-slaves-to-write is set to 0 (feature disabled) and\r\n# min-slaves-max-lag is set to 10.\r\n\r\n################################## SECURITY ###################################\r\n################################## 安全     ###################################\r\n\r\n# Require clients to issue AUTH <PASSWORD> before processing any other\r\n# commands.  This might be useful in environments in which you do not trust\r\n# others with access to the host running redis-server.\r\n#\r\n# This should stay commented out for backward compatibility and because most\r\n# people do not need auth (e.g. they run their own servers).\r\n#\r\n# Warning: since Redis is pretty fast an outside user can try up to\r\n# 150k passwords per second against a good box. This means that you should\r\n# use a very strong password otherwise it will be very easy to break.\r\n#\r\n# 设置连接redis的密码\r\n# redis速度相当快，一个外部用户在一秒钟进行150K次密码尝试，需指定强大的密码来防止暴力破解\r\nrequirepass set_enough_strong_passwd\r\n\r\n# Command renaming.\r\n#\r\n# It is possible to change the name of dangerous commands in a shared\r\n# environment. For instance the CONFIG command may be renamed into something\r\n# hard to guess so that it will still be available for internal-use tools\r\n# but not available for general clients.\r\n#\r\n# Example:\r\n#\r\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\r\n#\r\n# It is also possible to completely kill a command by renaming it into\r\n# an empty string:\r\n#\r\n# rename-command CONFIG ""\r\n#\r\n# Please note that changing the name of commands that are logged into the\r\n# AOF file or transmitted to slaves may cause problems.\r\n# 重命名一些高危命令，用来禁止高危命令\r\nrename-command FLUSHALL ZYzv6FOBdwflW2nX\r\nrename-command CONFIG aI7zwm1GDzMMrEi\r\nrename-command EVAL S9UHPKEpSvUJMM\r\nrename-command FLUSHDB D60FPVDJuip7gy6l\r\n\r\n################################### LIMITS ####################################\r\n################################### 限制   ####################################\r\n\r\n# Set the max number of connected clients at the same time. By default\r\n# this limit is set to 10000 clients, however if the Redis server is not\r\n# able to configure the process file limit to allow for the specified limit\r\n# the max number of allowed clients is set to the current file limit\r\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\r\n#\r\n# Once the limit is reached Redis will close all the new connections sending\r\n# an error \'max number of clients reached\'.\r\n#\r\n# 限制同时连接的客户数量,默认是10000\r\n# 当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到 error 信息\r\n# maxclients 10000\r\n\r\n# Don\'t use more memory than the specified amount of bytes.\r\n# When the memory limit is reached Redis will try to remove keys\r\n# according to the eviction policy selected (see maxmemory-policy).\r\n#\r\n# If Redis can\'t remove keys according to the policy, or if the policy is\r\n# set to \'noeviction\', Redis will start to reply with errors to commands\r\n# that would use more memory, like SET, LPUSH, and so on, and will continue\r\n# to reply to read-only commands like GET.\r\n#\r\n# This option is usually useful when using Redis as an LRU cache, or to set\r\n# a hard memory limit for an instance (using the \'noeviction\' policy).\r\n#\r\n# WARNING: If you have slaves attached to an instance with maxmemory on,\r\n# the size of the output buffers needed to feed the slaves are subtracted\r\n# from the used memory count, so that network problems / resyncs will\r\n# not trigger a loop where keys are evicted, and in turn the output\r\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\r\n# of more keys, and so forth until the database is completely emptied.\r\n#\r\n# In short... if you have slaves attached it is suggested that you set a lower\r\n# limit for maxmemory so that there is some free RAM on the system for slave\r\n# output buffers (but this is not needed if the policy is \'noeviction\').\r\n#\r\n# 设置redis能够使用的最大内存。\r\n# 达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key（设置过expire信息的key）\r\n# 在删除时,按照过期时间进行删除，最早将要被过期的key将最先被删除\r\n# 如果已到期或即将到期的key删光，仍进行set操作，那么将返回错误\r\n# 此时redis将不再接收写请求,只接收get请求。\r\n# maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用\r\n# maxmemory <bytes>\r\n\r\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\r\n# is reached. You can select among five behaviors:\r\n#\r\n# volatile-lru -> remove the key with an expire set using an LRU algorithm\r\n# allkeys-lru -> remove any key according to the LRU algorithm\r\n# volatile-random -> remove a random key with an expire set\r\n# allkeys-random -> remove a random key, any key\r\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\r\n# noeviction -> don\'t expire at all, just return an error on write operations\r\n#\r\n# Note: with any of the above policies, Redis will return an error on write\r\n#       operations, when there are no suitable keys for eviction.\r\n#\r\n#       At the date of writing these commands are: set setnx setex append\r\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\r\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\r\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\r\n#       getset mset msetnx exec sort\r\n#\r\n# The default is:\r\n#\r\n# maxmemory-policy noeviction\r\n\r\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\r\n# algorithms (in order to save memory), so you can tune it for speed or\r\n# accuracy. For default Redis will check five keys and pick the one that was\r\n# used less recently, you can change the sample size using the following\r\n# configuration directive.\r\n#\r\n# The default of 5 produces good enough results. 10 Approximates very closely\r\n# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.\r\n#\r\n# maxmemory-samples 5\r\n\r\n############################## APPEND ONLY MODE ###############################\r\n\r\n# By default Redis asynchronously dumps the dataset on disk. This mode is\r\n# good enough in many applications, but an issue with the Redis process or\r\n# a power outage may result into a few minutes of writes lost (depending on\r\n# the configured save points).\r\n#\r\n# The Append Only File is an alternative persistence mode that provides\r\n# much better durability. For instance using the default data fsync policy\r\n# (see later in the config file) Redis can lose just one second of writes in a\r\n# dramatic event like a server power outage, or a single write if something\r\n# wrong with the Redis process itself happens, but the operating system is\r\n# still running correctly.\r\n#\r\n# AOF and RDB persistence can be enabled at the same time without problems.\r\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\r\n# with the better durability guarantees.\r\n#\r\n# Please check http://redis.io/topics/persistence for more information.\r\n\r\n# redis 默认每次更新操作后会在后台异步的把数据库镜像备份到磁盘，但该备份非常耗时，且备份不宜太频繁\r\n# redis 同步数据文件是按上面save条件来同步的\r\n# 如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失\r\n# 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式\r\n# 开启append only 模式后,redis 将每一次写操作请求都追加到appendonly.aof 文件中\r\n# redis重新启动时,会从该文件恢复出之前的状态。\r\n# 但可能会造成 appendonly.aof 文件过大，所以redis支持BGREWRITEAOF 指令，对appendonly.aof重新整理,默认是不开启的。\r\n\r\nappendonly no\r\n\r\n# The name of the append only file (default: "appendonly.aof")\r\n# 默认为appendonly.aof。\r\nappendfilename "appendonly.aof"\r\n\r\n# The fsync() call tells the Operating System to actually write data on disk\r\n# instead of waiting for more data in the output buffer. Some OS will really flush\r\n# data on disk, some other OS will just try to do it ASAP.\r\n#\r\n# Redis supports three different modes:\r\n#\r\n# no: don\'t fsync, just let the OS flush the data when it wants. Faster.\r\n# always: fsync after every write to the append only log. Slow, Safest.\r\n# everysec: fsync only one time every second. Compromise.\r\n#\r\n# The default is "everysec", as that\'s usually the right compromise between\r\n# speed and data safety. It\'s up to you to understand if you can relax this to\r\n# "no" that will let the operating system flush the output buffer when\r\n# it wants, for better performances (but if you can live with the idea of\r\n# some data loss consider the default persistence mode that\'s snapshotting),\r\n# or on the contrary, use "always" that\'s very slow but a bit safer than\r\n# everysec.\r\n#\r\n# More details please check the following article:\r\n# http://antirez.com/post/redis-persistence-demystified.html\r\n#\r\n# If unsure, use "everysec".\r\n\r\n# 设置对 appendonly.aof 文件进行同步的频率,有三种选择always、everysec、no，默认是everysec表示每秒同步一次。\r\n# always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。\r\n# no表示等操作系统进行数据缓存同步到磁盘，都进行同步,everysec 表示对写操作进行累积,每秒同步一次\r\n# appendfsync always\r\n# appendfsync everysec\r\n# appendfsync no\r\n\r\n# When the AOF fsync policy is set to always or everysec, and a background\r\n# saving process (a background save or AOF log background rewriting) is\r\n# performing a lot of I/O against the disk, in some Linux configurations\r\n# Redis may block too long on the fsync() call. Note that there is no fix for\r\n# this currently, as even performing fsync in a different thread will block\r\n# our synchronous write(2) call.\r\n#\r\n# In order to mitigate this problem it\'s possible to use the following option\r\n# that will prevent fsync() from being called in the main process while a\r\n# BGSAVE or BGREWRITEAOF is in progress.\r\n#\r\n# This means that while another child is saving, the durability of Redis is\r\n# the same as "appendfsync none". In practical terms, this means that it is\r\n# possible to lose up to 30 seconds of log in the worst scenario (with the\r\n# default Linux settings).\r\n#\r\n# If you have latency problems turn this to "yes". Otherwise leave it as\r\n# "no" that is the safest pick from the point of view of durability.\r\n# 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。\r\nno-appendfsync-on-rewrite yes\r\n\r\n# Automatic rewrite of the append only file.\r\n# Redis is able to automatically rewrite the log file implicitly calling\r\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\r\n#\r\n# This is how it works: Redis remembers the size of the AOF file after the\r\n# latest rewrite (if no rewrite has happened since the restart, the size of\r\n# the AOF at startup is used).\r\n#\r\n# This base size is compared to the current size. If the current size is\r\n# bigger than the specified percentage, the rewrite is triggered. Also\r\n# you need to specify a minimal size for the AOF file to be rewritten, this\r\n# is useful to avoid rewriting the AOF file even if the percentage increase\r\n# is reached but it is still pretty small.\r\n#\r\n# Specify a percentage of zero in order to disable the automatic AOF\r\n# rewrite feature.\r\n# 指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时，就会触发background rewrite。若配置为0，则会禁用自动rewrite\r\nauto-aof-rewrite-percentage 100\r\n\r\n# 指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite。即这两个配置项同时满足时，才会触发rewrite。\r\nauto-aof-rewrite-min-size 64mb\r\n\r\n# An AOF file may be found to be truncated at the end during the Redis\r\n# startup process, when the AOF data gets loaded back into memory.\r\n# This may happen when the system where Redis is running\r\n# crashes, especially when an ext4 filesystem is mounted without the\r\n# data=ordered option (however this can\'t happen when Redis itself\r\n# crashes or aborts but the operating system still works correctly).\r\n#\r\n# Redis can either exit with an error when this happens, or load as much\r\n# data as possible (the default now) and start if the AOF file is found\r\n# to be truncated at the end. The following option controls this behavior.\r\n#\r\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\r\n# the Redis server starts emitting a log to inform the user of the event.\r\n# Otherwise if the option is set to no, the server aborts with an error\r\n# and refuses to start. When the option is set to no, the user requires\r\n# to fix the AOF file using the "redis-check-aof" utility before to restart\r\n# the server.\r\n#\r\n# Note that if the AOF file will be found to be corrupted in the middle\r\n# the server will still exit with an error. This option only applies when\r\n# Redis will try to read more data from the AOF file but not enough bytes\r\n# will be found.\r\naof-load-truncated yes\r\n\r\n################################ LUA SCRIPTING  ###############################\r\n\r\n# Max execution time of a Lua script in milliseconds.\r\n#\r\n# If the maximum execution time is reached Redis will log that a script is\r\n# still in execution after the maximum allowed time and will start to\r\n# reply to queries with an error.\r\n#\r\n# When a long running script exceeds the maximum execution time only the\r\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\r\n# used to stop a script that did not yet called write commands. The second\r\n# is the only way to shut down the server in the case a write command was\r\n# already issued by the script but the user doesn\'t want to wait for the natural\r\n# termination of the script.\r\n#\r\n# Set it to 0 or a negative value for unlimited execution without warnings.\r\n# 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000\r\nlua-time-limit 5000\r\n\r\n################################ REDIS CLUSTER  ###############################\r\n#\r\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however\r\n# in order to mark it as "mature" we need to wait for a non trivial percentage\r\n# of users to deploy it in production.\r\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n#\r\n# Normal Redis instances can\'t be part of a Redis Cluster; only nodes that are\r\n# started as cluster nodes can. In order to start a Redis instance as a\r\n# cluster node enable the cluster support uncommenting the following:\r\n#\r\n# cluster-enabled yes\r\n\r\n# Every cluster node has a cluster configuration file. This file is not\r\n# intended to be edited by hand. It is created and updated by Redis nodes.\r\n# Every Redis Cluster node requires a different cluster configuration file.\r\n# Make sure that instances running in the same system do not have\r\n# overlapping cluster configuration file names.\r\n#\r\n# cluster-config-file nodes-6379.conf\r\n\r\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\r\n# for it to be considered in failure state.\r\n# Most other internal time limits are multiple of the node timeout.\r\n#\r\n# cluster-node-timeout 15000\r\n\r\n# A slave of a failing master will avoid to start a failover if its data\r\n# looks too old.\r\n#\r\n# There is no simple way for a slave to actually have a exact measure of\r\n# its "data age", so the following two checks are performed:\r\n#\r\n# 1) If there are multiple slaves able to failover, they exchange messages\r\n#    in order to try to give an advantage to the slave with the best\r\n#    replication offset (more data from the master processed).\r\n#    Slaves will try to get their rank by offset, and apply to the start\r\n#    of the failover a delay proportional to their rank.\r\n#\r\n# 2) Every single slave computes the time of the last interaction with\r\n#    its master. This can be the last ping or command received (if the master\r\n#    is still in the "connected" state), or the time that elapsed since the\r\n#    disconnection with the master (if the replication link is currently down).\r\n#    If the last interaction is too old, the slave will not try to failover\r\n#    at all.\r\n#\r\n# The point "2" can be tuned by user. Specifically a slave will not perform\r\n# the failover if, since the last interaction with the master, the time\r\n# elapsed is greater than:\r\n#\r\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\r\n#\r\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\r\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\r\n# slave will not try to failover if it was not able to talk with the master\r\n# for longer than 310 seconds.\r\n#\r\n# A large slave-validity-factor may allow slaves with too old data to failover\r\n# a master, while a too small value may prevent the cluster from being able to\r\n# elect a slave at all.\r\n#\r\n# For maximum availability, it is possible to set the slave-validity-factor\r\n# to a value of 0, which means, that slaves will always try to failover the\r\n# master regardless of the last time they interacted with the master.\r\n# (However they\'ll always try to apply a delay proportional to their\r\n# offset rank).\r\n#\r\n# Zero is the only value able to guarantee that when all the partitions heal\r\n# the cluster will always be able to continue.\r\n#\r\n# cluster-slave-validity-factor 10\r\n\r\n# Cluster slaves are able to migrate to orphaned masters, that are masters\r\n# that are left without working slaves. This improves the cluster ability\r\n# to resist to failures as otherwise an orphaned master can\'t be failed over\r\n# in case of failure if it has no working slaves.\r\n#\r\n# Slaves migrate to orphaned masters only if there are still at least a\r\n# given number of other working slaves for their old master. This number\r\n# is the "migration barrier". A migration barrier of 1 means that a slave\r\n# will migrate only if there is at least 1 other working slave for its master\r\n# and so forth. It usually reflects the number of slaves you want for every\r\n# master in your cluster.\r\n#\r\n# Default is 1 (slaves migrate only if their masters remain with at least\r\n# one slave). To disable migration just set it to a very large value.\r\n# A value of 0 can be set but is useful only for debugging and dangerous\r\n# in production.\r\n#\r\n# cluster-migration-barrier 1\r\n\r\n# By default Redis Cluster nodes stop accepting queries if they detect there\r\n# is at least an hash slot uncovered (no available node is serving it).\r\n# This way if the cluster is partially down (for example a range of hash slots\r\n# are no longer covered) all the cluster becomes, eventually, unavailable.\r\n# It automatically returns available as soon as all the slots are covered again.\r\n#\r\n# However sometimes you want the subset of the cluster which is working,\r\n# to continue to accept queries for the part of the key space that is still\r\n# covered. In order to do so, just set the cluster-require-full-coverage\r\n# option to no.\r\n#\r\n# cluster-require-full-coverage yes\r\n\r\n# In order to setup your cluster make sure to read the documentation\r\n# available at http://redis.io web site.\r\n\r\n################################## SLOW LOG ###################################\r\n\r\n# The Redis Slow Log is a system to log queries that exceeded a specified\r\n# execution time. The execution time does not include the I/O operations\r\n# like talking with the client, sending the reply and so forth,\r\n# but just the time needed to actually execute the command (this is the only\r\n# stage of command execution where the thread is blocked and can not serve\r\n# other requests in the meantime).\r\n#\r\n# You can configure the slow log with two parameters: one tells Redis\r\n# what is the execution time, in microseconds, to exceed in order for the\r\n# command to get logged, and the other parameter is the length of the\r\n# slow log. When a new command is logged the oldest one is removed from the\r\n# queue of logged commands.\r\n\r\n# The following time is expressed in microseconds, so 1000000 is equivalent\r\n# to one second. Note that a negative number disables the slow log, while\r\n# a value of zero forces the logging of every command.\r\nslowlog-log-slower-than 10000\r\n\r\n# There is no limit to this length. Just be aware that it will consume memory.\r\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\r\nslowlog-max-len 128\r\n\r\n################################ LATENCY MONITOR ##############################\r\n\r\n# The Redis latency monitoring subsystem samples different operations\r\n# at runtime in order to collect data related to possible sources of\r\n# latency of a Redis instance.\r\n#\r\n# Via the LATENCY command this information is available to the user that can\r\n# print graphs and obtain reports.\r\n#\r\n# The system only logs operations that were performed in a time equal or\r\n# greater than the amount of milliseconds specified via the\r\n# latency-monitor-threshold configuration directive. When its value is set\r\n# to zero, the latency monitor is turned off.\r\n#\r\n# By default latency monitoring is disabled since it is mostly not needed\r\n# if you don\'t have latency issues, and collecting data has a performance\r\n# impact, that while very small, can be measured under big load. Latency\r\n# monitoring can easily be enabled at runtime using the command\r\n# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.\r\nlatency-monitor-threshold 0\r\n\r\n############################# EVENT NOTIFICATION ##############################\r\n\r\n# Redis can notify Pub/Sub clients about events happening in the key space.\r\n# This feature is documented at http://redis.io/topics/notifications\r\n#\r\n# For instance if keyspace events notification is enabled, and a client\r\n# performs a DEL operation on key "foo" stored in the Database 0, two\r\n# messages will be published via Pub/Sub:\r\n#\r\n# PUBLISH __keyspace@0__:foo del\r\n# PUBLISH __keyevent@0__:del foo\r\n#\r\n# It is possible to select the events that Redis will notify among a set\r\n# of classes. Every class is identified by a single character:\r\n#\r\n#  K     Keyspace events, published with __keyspace@<db>__ prefix.\r\n#  E     Keyevent events, published with __keyevent@<db>__ prefix.\r\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\r\n#  $     String commands\r\n#  l     List commands\r\n#  s     Set commands\r\n#  h     Hash commands\r\n#  z     Sorted set commands\r\n#  x     Expired events (events generated every time a key expires)\r\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\r\n#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.\r\n#\r\n#  The "notify-keyspace-events" takes as argument a string that is composed\r\n#  of zero or multiple characters. The empty string means that notifications\r\n#  are disabled.\r\n#\r\n#  Example: to enable list and generic events, from the point of view of the\r\n#           event name, use:\r\n#\r\n#  notify-keyspace-events Elg\r\n#\r\n#  Example 2: to get the stream of the expired keys subscribing to channel\r\n#             name __keyevent@0__:expired use:\r\n#\r\n#  notify-keyspace-events Ex\r\n#\r\n#  By default all notifications are disabled because most users don\'t need\r\n#  this feature and the feature has some overhead. Note that if you don\'t\r\n#  specify at least one of K or E, no events will be delivered.\r\nnotify-keyspace-events ""\r\n\r\n############################### ADVANCED CONFIG ###############################\r\n\r\n# Hashes are encoded using a memory efficient data structure when they have a\r\n# small number of entries, and the biggest entry does not exceed a given\r\n# threshold. These thresholds can be configured using the following directives.\r\n# 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，\r\n# hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值\r\nhash-max-ziplist-entries 512\r\nhash-max-ziplist-value 64\r\n\r\n# Similarly to hashes, small lists are also encoded in a special way in order\r\n# to save a lot of space. The special representation is only used when\r\n# you are under the following limits:\r\n# list数据类型多少节点以下会采用去指针的紧凑存储格式。\r\n# list数据类型节点值大小小于多少字节会采用紧凑存储格式。\r\nlist-max-ziplist-entries 512\r\nlist-max-ziplist-value 64\r\n\r\n# Sets have a special encoding in just one case: when a set is composed\r\n# of just strings that happen to be integers in radix 10 in the range\r\n# of 64 bit signed integers.\r\n# The following configuration setting sets the limit in the size of the\r\n# set in order to use this special memory saving encoding.\r\n# set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。\r\nset-max-intset-entries 512\r\n\r\n# Similarly to hashes and lists, sorted sets are also specially encoded in\r\n# order to save a lot of space. This encoding is only used when the length and\r\n# elements of a sorted set are below the following limits:\r\n\r\n# zsort数据类型多少节点以下会采用去指针的紧凑存储格式。\r\n# zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\r\nzset-max-ziplist-entries 128\r\nzset-max-ziplist-value 64\r\n\r\n# HyperLogLog sparse representation bytes limit. The limit includes the\r\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\r\n# this limit, it is converted into the dense representation.\r\n#\r\n# A value greater than 16000 is totally useless, since at that point the\r\n# dense representation is more memory efficient.\r\n#\r\n# The suggested value is ~ 3000 in order to have the benefits of\r\n# the space efficient encoding without slowing down too much PFADD,\r\n# which is O(N) with the sparse encoding. The value can be raised to\r\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\r\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\r\nhll-sparse-max-bytes 3000\r\n\r\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\r\n# order to help rehashing the main Redis hash table (the one mapping top-level\r\n# keys to values). The hash table implementation Redis uses (see dict.c)\r\n# performs a lazy rehashing: the more operation you run into a hash table\r\n# that is rehashing, the more rehashing "steps" are performed, so if the\r\n# server is idle the rehashing is never complete and some more memory is used\r\n# by the hash table.\r\n#\r\n# The default is to use this millisecond 10 times every second in order to\r\n# actively rehash the main dictionaries, freeing memory when possible.\r\n#\r\n# If unsure:\r\n# use "activerehashing no" if you have hard latency requirements and it is\r\n# not a good thing in your environment that Redis can reply from time to time\r\n# to queries with 2 milliseconds delay.\r\n#\r\n# use "activerehashing yes" if you don\'t have such hard requirements but\r\n# want to free memory asap when possible.\r\n\r\n# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用\r\n# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。\r\n# 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存\r\nactiverehashing yes\r\n\r\n# The client output buffer limits can be used to force disconnection of clients\r\n# that are not reading data from the server fast enough for some reason (a\r\n# common reason is that a Pub/Sub client can\'t consume messages as fast as the\r\n# publisher can produce them).\r\n#\r\n# The limit can be set differently for the three different classes of clients:\r\n#\r\n# normal -> normal clients including MONITOR clients\r\n# slave  -> slave clients\r\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\r\n#\r\n# The syntax of every client-output-buffer-limit directive is the following:\r\n#\r\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\r\n#\r\n# A client is immediately disconnected once the hard limit is reached, or if\r\n# the soft limit is reached and remains reached for the specified number of\r\n# seconds (continuously).\r\n# So for instance if the hard limit is 32 megabytes and the soft limit is\r\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\r\n# if the size of the output buffers reach 32 megabytes, but will also get\r\n# disconnected if the client reaches 16 megabytes and continuously overcomes\r\n# the limit for 10 seconds.\r\n#\r\n# By default normal clients are not limited because they don\'t receive data\r\n# without asking (in a push way), but just after a request, so only\r\n# asynchronous clients may create a scenario where data is requested faster\r\n# than it can read.\r\n#\r\n# Instead there is a default limit for pubsub and slave clients, since\r\n# subscribers and slaves receive data in a push fashion.\r\n#\r\n# Both the hard or the soft limit can be disabled by setting them to zero.\r\nclient-output-buffer-limit normal 0 0 0\r\nclient-output-buffer-limit slave 256mb 64mb 60\r\nclient-output-buffer-limit pubsub 32mb 8mb 60\r\n\r\n# Redis calls an internal function to perform many background tasks, like\r\n# closing connections of clients in timeout, purging expired keys that are\r\n# never requested, and so forth.\r\n#\r\n# Not all tasks are performed with the same frequency, but Redis checks for\r\n# tasks to perform according to the specified "hz" value.\r\n#\r\n# By default "hz" is set to 10. Raising the value will use more CPU when\r\n# Redis is idle, but at the same time will make Redis more responsive when\r\n# there are many keys expiring at the same time, and timeouts may be\r\n# handled with more precision.\r\n#\r\n# The range is between 1 and 500, however a value over 100 is usually not\r\n# a good idea. Most users should use the default of 10 and raise this up to\r\n# 100 only in environments where very low latency is required.\r\nhz 10\r\n\r\n# When a child rewrites the AOF file, if the following option is enabled\r\n# the file will be fsync-ed every 32 MB of data generated. This is useful\r\n# in order to commit the file to the disk more incrementally and avoid\r\n# big latency spikes.\r\n# aof rewrite过程中,是否采取增量文件同步策略,默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数\r\naof-rewrite-incremental-fsync yes\r\n\r\n\r\n# redis数据存储\r\nredis的存储分为内存存储、磁盘存储和log文件三部分，配置文件中有三个参数对其进行配置。\r\nsave seconds updates，save配置，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。可多个条件配合，默认配置了三个条件。\r\nappendonly yes/no ，appendonly配置，指出是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。\r\nappendfsync no/always/everysec ，appendfsync配置，no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。\r\n```',contentRendered:'<h1 id="redis-学习" tabindex="-1"><a class="header-anchor" href="#redis-学习" aria-hidden="true">#</a> redis 学习</h1>\n<p>设置后台启动\nredis.conf 中</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>daemonize no // yes为后台启动\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动服务命令为：redis-server\n后台启动时可以使用redis-cli连接redis服务器</p>\n<h2 id="redis-特点" tabindex="-1"><a class="header-anchor" href="#redis-特点" aria-hidden="true">#</a> redis 特点</h2>\n<p>单线程，io多路复用\n可持久化</p>\n<h2 id="redis简单操作" tabindex="-1"><a class="header-anchor" href="#redis简单操作" aria-hidden="true">#</a> redis简单操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set key value</td>\n<td>设置key为value</td>\n</tr>\n<tr>\n<td>keys *</td>\n<td>查看当前库所有key</td>\n</tr>\n<tr>\n<td>exists key</td>\n<td>判断某个key是否存在</td>\n</tr>\n<tr>\n<td>type key</td>\n<td>查看这个key时什么类型</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>删除指定的key数据</td>\n</tr>\n<tr>\n<td>unlink key</td>\n<td>根据value选择非阻塞删除</td>\n</tr>\n<tr>\n<td>expire key 10</td>\n<td>为指定key设置过期时间（10）是10s</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看该key还有多久过期-1表示永不过气，-2表示已经过期</td>\n</tr>\n<tr>\n<td>select 0</td>\n<td>选择数据库0</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>查看有多少key</td>\n</tr>\n<tr>\n<td>flushdb</td>\n<td>清空当前db</td>\n</tr>\n<tr>\n<td>flushall</td>\n<td>清空全部库</td>\n</tr>\n<tr>\n<td>get key</td>\n<td>取值</td>\n</tr>\n<tr>\n<td>append key value</td>\n<td>在key 后添加value</td>\n</tr>\n<tr>\n<td>strlen key</td>\n<td>获取键的长度</td>\n</tr>\n<tr>\n<td>setnx key value</td>\n<td>当值不存在时设置值</td>\n</tr>\n<tr>\n<td>incr key</td>\n<td>值自增</td>\n</tr>\n<tr>\n<td>decr key</td>\n<td>值自减</td>\n</tr>\n<tr>\n<td>incrby/decrby key step</td>\n<td>值增/减step</td>\n</tr>\n<tr>\n<td>mset key v1 v2 v3...</td>\n<td>设置多个value</td>\n</tr>\n<tr>\n<td>mget k1 k2 k3</td>\n<td></td>\n</tr>\n<tr>\n<td>msetnx nx k1 v1 k2 v2 k3 v3</td>\n<td>原子操作，若有一个不成功，都不成功</td>\n</tr>\n<tr>\n<td>getrange key index1,index2</td>\n<td>获取范围内的值</td>\n</tr>\n<tr>\n<td>set range key index value</td>\n<td>用v符号key 从index开始的</td>\n</tr>\n<tr>\n<td>setex key ttl value</td>\n<td>设置value 同时设置ttl</td>\n</tr>\n<tr>\n<td>getset key value</td>\n<td>获取旧值设置新值</td>\n</tr>\n</tbody>\n</table>\n<h2 id="常用数据类型" tabindex="-1"><a class="header-anchor" href="#常用数据类型" aria-hidden="true">#</a> 常用数据类型</h2>\n<h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3>\n<p>二进制安全 redis中一个value做多512M\n可修改，内存结构类似java的arrarylist，预分配冗余空间类似capacity，size，小于1M时每次扩容翻倍，大于1M每次增加1M</p>\n<h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3>\n<p>单键多值，是一个双向链表\n内存结构，当元素少时，内存中连续分配，数据多的时分链式分配</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lpush/rpush key v1 v2 v3</td>\n<td>左边插入，右边插入</td>\n</tr>\n<tr>\n<td>lpop/rpop key</td>\n<td>从key左边/右边删除一个元素</td>\n</tr>\n<tr>\n<td>rpoplpush k1 k2</td>\n<td>从k1右边删除一个插入到k2左边</td>\n</tr>\n<tr>\n<td>lrange key start stop</td>\n<td>按索引下标获得元素</td>\n</tr>\n<tr>\n<td>lindex key index</td>\n<td>按下索引下标获得元素</td>\n</tr>\n<tr>\n<td>llen key</td>\n<td>获列表长度</td>\n</tr>\n<tr>\n<td>linsert key before v1 newvalue</td>\n<td>在value的后面插入newvalue</td>\n</tr>\n<tr>\n<td>lrem key n value</td>\n<td>从左边查出n个value</td>\n</tr>\n<tr>\n<td>lset key index value</td>\n<td>将列表key下标为index的值替换成value</td>\n</tr>\n</tbody>\n</table>\n<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3>\n<p>哈希表实现</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sadd key v1 v2...</td>\n<td>将几个元素加入key</td>\n</tr>\n<tr>\n<td>smenbers key</td>\n<td>取出key中元素</td>\n</tr>\n<tr>\n<td>sismenber key value</td>\n<td>判断key中是否存在value</td>\n</tr>\n<tr>\n<td>scard key</td>\n<td>返回个数</td>\n</tr>\n<tr>\n<td>srem key v1 v2...</td>\n<td>删除key中元素</td>\n</tr>\n<tr>\n<td>spop key</td>\n<td>随机从key中删除一个元素</td>\n</tr>\n<tr>\n<td>srandmenber key n</td>\n<td>随机从key中取出n个元素</td>\n</tr>\n<tr>\n<td>smove source destination value</td>\n<td>把集合中一个值从一个集合移动到另一个</td>\n</tr>\n<tr>\n<td>sinter k1 k2</td>\n<td>返回交集元素</td>\n</tr>\n<tr>\n<td>sunion k1 k2</td>\n<td>返回并集元素</td>\n</tr>\n<tr>\n<td>sdiff  k1 k2</td>\n<td>返回差集元素</td>\n</tr>\n</tbody>\n</table>\n<h3 id="hasp" tabindex="-1"><a class="header-anchor" href="#hasp" aria-hidden="true">#</a> Hasp</h3>\n<p>就是一个map，存键值对</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hset key field value</td>\n<td>给key中的field赋值value</td>\n</tr>\n<tr>\n<td>hget key field</td>\n<td>取出key中field的值</td>\n</tr>\n<tr>\n<td>hmset key f1 v1 f2 v2 ...</td>\n<td>批量设置</td>\n</tr>\n<tr>\n<td>hkeys key</td>\n<td>列出hash中所有field</td>\n</tr>\n<tr>\n<td>hexists key field</td>\n<td>查看key中是否存在field</td>\n</tr>\n<tr>\n<td>hvals key</td>\n<td>列出该key中所有value</td>\n</tr>\n<tr>\n<td>hincrby key field increment</td>\n<td>为key中fieldfield 加上增量</td>\n</tr>\n<tr>\n<td>hsetnx key field value</td>\n<td>若field不存在则设置field为value</td>\n</tr>\n</tbody>\n</table>\n<h3 id="zset-有序列表" tabindex="-1"><a class="header-anchor" href="#zset-有序列表" aria-hidden="true">#</a> Zset 有序列表</h3>\n<p>是一个没有重复元素的字符串集合，每个域关联一个大小，大小有序\nZset 内部由hash表和跳跃表组成，跳跃表给元素value排序查找</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zadd key score1 value1...</td>\n<td>将一或多个s,v插入key中</td>\n</tr>\n<tr>\n<td>zrange key start stop [withscores]</td>\n<td>返回有序集key中下标在start到stop之间的元素，若带withscores则同时返回scores</td>\n</tr>\n<tr>\n<td>zrangebyscore key minmax [withscores][limit offset count]</td>\n<td>返回key中score介于min和max之间的包含等于按score值递增排列</td>\n</tr>\n<tr>\n<td>zincrby key increment value</td>\n<td>为key的score加上增量</td>\n</tr>\n<tr>\n<td>zrevrangebyscore key maxmin [withscores][limit offset count]</td>\n<td>降序</td>\n</tr>\n<tr>\n<td>zrem key value</td>\n<td>删除key中value</td>\n</tr>\n<tr>\n<td>zcount key min max</td>\n<td>统计该区间内的元素</td>\n</tr>\n<tr>\n<td>zrank key value</td>\n<td>返回key中该value排名，0为第一个</td>\n</tr>\n</tbody>\n</table>\n<h3 id="bitmaps" tabindex="-1"><a class="header-anchor" href="#bitmaps" aria-hidden="true">#</a> Bitmaps</h3>\n<p>本身是字符串但是能对位操作</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setbit key offset value</td>\n<td>设置key中某个offset的值（0/1），offset从0开始</td>\n</tr>\n<tr>\n<td>getbit key offset</td>\n<td>得到key中offset的值</td>\n</tr>\n<tr>\n<td>bitcount key [start stop]</td>\n<td>统计1的数</td>\n</tr>\n<tr>\n<td>bitop and/or/not/xor  destkey k1 k2 k3..</td>\n<td>对k1,k2,k3做op操作结果保存在destkey中</td>\n</tr>\n</tbody>\n</table>\n<h3 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLoglog</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pfadd key element ...</td>\n<td>向key中添加element</td>\n</tr>\n<tr>\n<td>pfcount key</td>\n<td>返回key中元素个数</td>\n</tr>\n<tr>\n<td>pfmerge dkey s1key s2key...</td>\n<td>将s1,s2...中合并放到dkey中</td>\n</tr>\n</tbody>\n</table>\n<h3 id="geospatial" tabindex="-1"><a class="header-anchor" href="#geospatial" aria-hidden="true">#</a> Geospatial</h3>\n<p>方便放地理位置</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>geoadd key longitude latitude menber ...</td>\n<td>添加key 经度纬度名称</td>\n</tr>\n<tr>\n<td>geopos key menber</td>\n<td>从key中获取menber的经纬度</td>\n</tr>\n<tr>\n<td>geodist key menber1 menber2 [m|km|ft]</td>\n<td>获取两地点的直线距离</td>\n</tr>\n<tr>\n<td>georadius key longitude latitude radius m|km|ft</td>\n<td>找出给定坐标半径内的地点</td>\n</tr>\n</tbody>\n</table>\n<h2 id="redis-订阅发布" tabindex="-1"><a class="header-anchor" href="#redis-订阅发布" aria-hidden="true">#</a> Redis 订阅发布</h2>\n<p>redis客户端之间可以订阅发布消息</p>\n<p>命令\n|subscribe channel|订阅channel1|\n|publish channel msg|发布消息到channel1|</p>\n<h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2>\n<h3 id="乐观锁-悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-悲观锁" aria-hidden="true">#</a> 乐观锁，悲观锁</h3>\n<p>乐观锁，每次拿数据不加锁，修改时对比版本（数据会附加版本信息？），使用checkandset（）\n悲观锁:每次拿数据加锁。</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>multi</td>\n<td>定义一组操作</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>执行</td>\n</tr>\n<tr>\n<td>discard</td>\n<td>放弃</td>\n</tr>\n<tr>\n<td>watch key...</td>\n<td>watch key，采用乐观锁，如果在事务执行前key发生改变那么事务会被打断</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>各指令按序执行，不会被其他事务打断，执行中有错误则错误的那个执行失败，其他的正常执行，输入指令时有错误的，直接退出multi</li>\n<li>没有隔离级别的概念，队列中命令没有被提交时不会被执行</li>\n<li>不保证原子性，事务中一条命令失败其后的继续执行，没有回滚</li>\n</ol>\n<h2 id="redis-配置" tabindex="-1"><a class="header-anchor" href="#redis-配置" aria-hidden="true">#</a> Redis 配置</h2>\n<p>配置文件大小写不敏感</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code># Redis configuration file example.\n#\n# Note that in order to read the configuration file, Redis must be\n# started with the file path as first argument:\n#\n# ./redis-server /path/to/redis.conf\n\n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k => 1000 bytes\n# 1kb => 1024 bytes\n# 1m => 1000000 bytes\n# 1mb => 1024*1024 bytes\n# 1g => 1000000000 bytes\n# 1gb => 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n\n################################## INCLUDES ###################################\n################################## 包含     ###################################\n\n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all Redis servers but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"\n# from admin or Redis Sentinel. Since Redis always uses the last processed\n# line as value of a configuration directive, you\'d better put includes\n# at the beginning of this file to avoid overwriting config change at runtime.\n#\n# If instead you are interested in using includes to override configuration\n# options, it is better to use include as the last line.\n#\n# 假如说你有一个可用于所有的 redis server 的标准配置模板，\n# 但针对某些 server 又需要一些个性化的设置，\n# 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。\n#\n# 但是要注意哦，include 是不能被 config rewrite 命令改写的\n# 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，\n# 以避免在运行时覆盖配置的改变，相反，你就把它放在后面\n# include /path/to/local.conf\n# include /path/to/other.conf\n\n################################ GENERAL  #####################################\n################################ 常用     #####################################\n\n# By default Redis does not run as a daemon. Use \'yes\' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\n# 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。\n# 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。\ndaemonize yes\n\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\n# default. You can specify a custom pid file location here.\n# 当 Redis 以守护进程的方式运行的时候，Redis 默认会把 pid 文件放在/var/run/redis.pid\n# 可配置到其他地址，当运行多个 redis 服务时，需要指定不同的 pid 文件和端口\n# 指定存储Redis进程号的文件路径\npidfile /var/run/redis.pid\n\n# Accept connections on the specified port, default is 6379.\n# If port 0 is specified Redis will not listen on a TCP socket.\n# 端口，默认端口是6379，生产环境中建议更改端口号，安全性更高\n# 如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。\nport 9966\n\n# TCP listen() backlog.\n#\n# In high requests-per-second environments you need an high backlog in order\n# to avoid slow clients connections issues. Note that the Linux kernel\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\n# in order to get the desired effect.\n# TCP 监听的最大容纳数量\n# 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，\n# 当系统并发量大并且客户端速度缓慢的时候，你需要把这个值调高以避免客户端连接缓慢的问题。\n# Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，默认是511，而Linux的默认参数值是128。\n# 所以可以将这二个参数一起参考设定，你以便达到你的预期。\n#  \ntcp-backlog 511\n\n# By default Redis listens for connections from all the network interfaces\n# available on the server. It is possible to listen to just one or multiple\n# interfaces using the "bind" configuration directive, followed by one or\n# more IP addresses.\n#\n# Examples:\n#\n# bind 192.168.1.100 10.0.0.1\n# 有时候为了安全起见，redis一般都是监听127.0.0.1 但是有时候又有同网段能连接的需求，当然可以绑定0.0.0.0 用iptables来控制访问权限，或者设置redis访问密码来保证数据安全\n\n# 不设置将处理所有请求,建议生产环境中设置，有个误区：bind是用来限制外网IP访问的，其实不是，限制外网ip访问可以通过iptables；如：-A INPUT -s 10.10.1.0/24 -p tcp -m state --state NEW -m tcp --dport 9966 -j ACCEPT ；\n# 实际上，bind ip 绑定的是redis所在服务器网卡的ip，当然127.0.0.1也是可以的\n#如果绑定一个外网ip，就会报错：Creating Server TCP listening socket xxx.xxx.xxx.xxx:9966: bind: Cannot assign requested address\n\n# bind 127.0.0.1\nbind 127.0.0.1 10.10.1.3\n\n# 假设绑定是以上ip，使用 netstat -anp|grep 9966 会发现，这两个ip被bind，其中10.10.1.3是服务器网卡的ip\n# tcp        0      0 10.10.1.3:9966         0.0.0.0:*                   LISTEN      11188/redis-server  \n# tcp        0      0 127.0.0.1:9966         0.0.0.0:*                   LISTEN      11188/redis-server \n\n\n# Specify the path for the Unix socket that will be used to listen for\n# incoming connections. There is no default, so Redis will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /tmp/redis.sock\n# unixsocketperm 700\n\n# Close the connection after a client is idle for N seconds (0 to disable)\n# 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。\ntimeout 0\n\n# TCP keepalive.\n#\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\n# of communication. This is useful for two reasons:\n#\n# 1) Detect dead peers.\n# 2) Take the connection alive from the point of view of network\n#    equipment in the middle.\n#\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\n# Note that to close the connection the double of the time is needed.\n# On other kernels the period depends on the kernel configuration.\n#\n# A reasonable value for this option is 60 seconds.\n\n# tcp 心跳包。\n#\n# 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。\n# 这个之所有有用，主要由两个原因：\n#\n# 1) 防止死的 peers\n# 2) Take the connection alive from the point of view of network\n#    equipment in the middle.\n#\n# 推荐一个合理的值就是60秒\ntcp-keepalive 0\n\n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\n# 日志记录等级，4个可选值debug,verbose,notice,warning\n# 可以是下面的这些值：\n# debug (适用于开发或测试阶段)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (适用于生产环境)\n# warning (仅仅一些重要的消息被记录)\nloglevel notice\n\n# Specify the log file name. Also the empty string can be used to force\n# Redis to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\n#配置 log 文件地址,默认打印在命令行终端的窗口上，也可设为/dev/null屏蔽日志、\nlogfile "/data/logs/redis/redis.log"\n\n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# 要想把日志记录到系统日志，就把它改成 yes，\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\n# syslog-enabled no\n\n# Specify the syslog identity.\n# 设置 syslog 的 identity。\n# syslog-ident redis\n\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n\n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT &lt;dbid> where\n# dbid is a number between 0 and \'databases\'-1\n# 可用的数据库数，默认值为16，默认数据库为0，数据库范围在0-（database-1）之间\ndatabases 16\n\n################################ SNAPSHOTTING  ################################\n################################ 快照          ################################\n#\n# Save the DB on disk:\n#\n#   save &lt;seconds> &lt;changes>\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behaviour will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving completely by commenting out all "save" lines.\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save ""\n# 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。\n\n#    if(在60秒之内有10000个keys发生变化时){\n#      进行镜像备份\n#    }else if(在300秒之内有10个keys发生了变化){\n#      进行镜像备份\n#    }else if(在900秒之内有1个keys发生了变化){\n#      进行镜像备份\n#    }\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n#:/ disaster will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n# 否则就会没人注意到灾难的发生。\n#\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n#\n# 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# For default that\'s set to \'yes\' as it\'s almost always a win.\n# If you want to save some CPU in the saving child set it to \'no\' but\n# the dataset will likely be bigger if you have compressible values or keys.\n# 在进行备份时,是否进行压缩\n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\n# 默认都设为 yes\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\n# 不过这个数据集可能就会比较大\nrdbcompression yes\n\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.    \n# 读取和写入的时候是否支持CRC64校验，默认是开启的\nrdbchecksum yes\n\n# The filename where to dump the DB\n# 备份文件的文件名\ndbfilename dump.rdb\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the \'dbfilename\' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\n# 数据库备份的文件放置的路径\n# 路径跟文件名分开配置是因为 Redis 备份时，先会将当前数据库的状态写入到一个临时文件\n# 等备份完成时，再把该临时文件替换为上面所指定的文件\n# 而临时文件和上面所配置的备份文件都会放在这个指定的路径当中\n# 默认值为 ./\ndir /data/data/redis/\n\n################################# REPLICATION #################################\n################################# 主从复制    #################################\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\n# another Redis server. A few things to understand ASAP about Redis replication.\n#\n# 1) Redis replication is asynchronous, but you can configure a master to\n#    stop accepting writes if it appears to be not connected with at least\n#    a given number of slaves.\n# 2) Redis slaves are able to perform a partial resynchronization with the\n#    master if the replication link is lost for a relatively small amount of\n#    time. You may want to configure the replication backlog size (see the next\n#    sections of this file) with a sensible value depending on your needs.\n# 3) Replication is automatic and does not need user intervention. After a\n#    network partition slaves automatically try to reconnect to masters\n#    and resynchronize with them.\n#\n# 设置该数据库为其他数据库的从数据库\n# slaveof &lt;masterip> &lt;masterport> 当本机为从服务时，设置主服务的IP及端口\n# slaveof &lt;masterip> &lt;masterport>\n\n# If the master is password protected (using the "requirepass" configuration\n# directive below) it is possible to tell the slave to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the slave request.\n#\n# 指定与主数据库连接时需要的密码验证\n# masterauth &lt;master-password> 当本机为从服务时，设置访问master服务器的密码\n# masterauth &lt;master-password>\n\n# When a slave loses its connection with the master, or when the replication\n# is still in progress, the slave can act in two different ways:\n#\n# 1) if slave-serve-stale-data is set to \'yes\' (the default) the slave will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) if slave-serve-stale-data is set to \'no\' the slave will reply with\n#    an error "SYNC with master in progress" to all the kind of commands\n#    but to INFO and SLAVEOF.\n#\n# 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”,除了INFO，SLAVEOF这两个命令\nslave-serve-stale-data yes\n\n# You can configure a slave instance to accept writes or not. Writing against\n# a slave instance may be useful to store some ephemeral data (because data\n# written on a slave will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since Redis 2.6 by default slaves are read-only.\n#\n# Note: read only slaves are not designed to be exposed to untrusted clients\n# on the internet. It\'s just a protection layer against misuse of the instance.\n# Still a read only slave exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\n# security of read only slaves using \'rename-command\' to shadow all the\n# administrative / dangerous commands.\n# 是否允许slave服务器节点只提供读服务\nslave-read-only yes\n\n# Replication SYNC strategy: disk or socket.\n#\n# -------------------------------------------------------\n# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY\n# -------------------------------------------------------\n#\n# New slaves and reconnecting slaves that are not able to continue the replication\n# process just receiving differences, need to do what is called a "full\n# synchronization". An RDB file is transmitted from the master to the slaves.\n# The transmission can happen in two different ways:\n#\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\n#                 file on disk. Later the file is transferred by the parent\n#                 process to the slaves incrementally.\n# 2) Diskless: The Redis master creates a new process that directly writes the\n#              RDB file to slave sockets, without touching the disk at all.\n#\n# With disk-backed replication, while the RDB file is generated, more slaves\n# can be queued and served with the RDB file as soon as the current child producing\n# the RDB file finishes its work. With diskless replication instead once\n# the transfer starts, new slaves arriving will be queued and a new transfer\n# will start when the current one terminates.\n#\n# When diskless replication is used, the master waits a configurable amount of\n# time (in seconds) before starting the transfer in the hope that multiple slaves\n# will arrive and the transfer can be parallelized.\n#\n# With slow disks and fast (large bandwidth) networks, diskless replication\n# works better.\nrepl-diskless-sync no\n\n# When diskless replication is enabled, it is possible to configure the delay\n# the server waits in order to spawn the child that transfers the RDB via socket\n# to the slaves.\n#\n# This is important since once the transfer starts, it is not possible to serve\n# new slaves arriving, that will be queued for the next RDB transfer, so the server\n# waits a delay in order to let more slaves arrive.\n#\n# The delay is specified in seconds, and by default is 5 seconds. To disable\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\nrepl-diskless-sync-delay 5\n\n# Slaves send PINGs to server in a predefined interval. It\'s possible to change\n# this interval with the repl_ping_slave_period option. The default value is 10\n# seconds.\n#\n# Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\n# 你可以改变这个时间间隔。默认为 10 秒。\n# repl-ping-slave-period 10\n\n# The following option sets the replication timeout for:\n#\n# 1) Bulk transfer I/O during SYNC, from the point of view of slave.\n# 2) Master timeout from the point of view of slaves (data, pings).\n# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-slave-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the slave.\n#\n# 设置主从复制过期时间\n# 这个值一定要比 repl-ping-slave-period 大\n# repl-timeout 60\n\n# Disable TCP_NODELAY on the slave socket after SYNC?\n#\n# If you select "yes" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to slaves. But this can add a delay for\n# the data to appear on the slave side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select "no" the delay for data to appear on the slave side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and slaves are many hops away, turning this to "yes" may\n# be a good idea.\n# 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。\nrepl-disable-tcp-nodelay no\n\n# Set the replication backlog size. The backlog is a buffer that accumulates\n# slave data when slaves are disconnected for some time, so that when a slave\n# wants to reconnect again, often a full resync is not needed, but a partial\n# resync is enough, just passing the portion of data the slave missed while\n# disconnected.\n#\n# The bigger the replication backlog, the longer the time the slave can be\n# disconnected and later be able to perform a partial resynchronization.\n#\n# The backlog is only allocated once there is at least a slave connected.\n#\n# 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\n# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\n# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\n#\n# The biggest the replication backlog, the longer the time the slave can be\n# disconnected and later be able to perform a partial resynchronization.\n# 这个值越大，salve 可以断开连接的时间就越长。\n\n# repl-backlog-size 1mb\n\n# After a master has no longer connected slaves for some time, the backlog\n# will be freed. The following option configures the amount of seconds that\n# need to elapse, starting from the time the last slave disconnected, for\n# the backlog buffer to be freed.\n#\n# A value of 0 means to never release the backlog.\n#\n# 在某些时候，master 不再连接 slaves，backlog 将被释放。\n# 如果设置为 0 ，意味着绝不释放 backlog 。\n# repl-backlog-ttl 3600\n\n# The slave priority is an integer number published by Redis in the INFO output.\n# It is used by Redis Sentinel in order to select a slave to promote into a\n# master if the master is no longer working correctly.\n#\n# A slave with a low priority number is considered better for promotion, so\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\n# pick the one with priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the slave as not able to perform the\n# role of master, so a slave with priority of 0 will never be selected by\n# Redis Sentinel for promotion.\n#\n# By default the priority is 100.\n# 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis\n# Sentinel会将priority值最小的slave提升为master。\n# 这个值越小，就越会被优先选中，需要注意的是，\n# 若该配置项为0，则对应的slave永远不会自动提升为master。\nslave-priority 100\n\n# It is possible for a master to stop accepting writes if there are less than\n# N slaves connected, having a lag less or equal than M seconds.\n#\n# The N slaves need to be in "online" state.\n#\n# The lag in seconds, that must be &lt;= the specified value, is calculated from\n# the last ping received from the slave, that is usually sent every second.\n#\n# This option does not GUARANTEE that N replicas will accept the write, but\n# will limit the window of exposure for lost writes in case not enough slaves\n# are available, to the specified number of seconds\n#\n# For example to require at least 3 slaves with a lag &lt;= 10 seconds use:\n#\n# min-slaves-to-write 3\n# min-slaves-max-lag 10\n#\n# Setting one or the other to 0 disables the feature.\n#\n# By default min-slaves-to-write is set to 0 (feature disabled) and\n# min-slaves-max-lag is set to 10.\n\n################################## SECURITY ###################################\n################################## 安全     ###################################\n\n# Require clients to issue AUTH &lt;PASSWORD> before processing any other\n# commands.  This might be useful in environments in which you do not trust\n# others with access to the host running redis-server.\n#\n# This should stay commented out for backward compatibility and because most\n# people do not need auth (e.g. they run their own servers).\n#\n# Warning: since Redis is pretty fast an outside user can try up to\n# 150k passwords per second against a good box. This means that you should\n# use a very strong password otherwise it will be very easy to break.\n#\n# 设置连接redis的密码\n# redis速度相当快，一个外部用户在一秒钟进行150K次密码尝试，需指定强大的密码来防止暴力破解\nrequirepass set_enough_strong_passwd\n\n# Command renaming.\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# hard to guess so that it will still be available for internal-use tools\n# but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command by renaming it into\n# an empty string:\n#\n# rename-command CONFIG ""\n#\n# Please note that changing the name of commands that are logged into the\n# AOF file or transmitted to slaves may cause problems.\n# 重命名一些高危命令，用来禁止高危命令\nrename-command FLUSHALL ZYzv6FOBdwflW2nX\nrename-command CONFIG aI7zwm1GDzMMrEi\nrename-command EVAL S9UHPKEpSvUJMM\nrename-command FLUSHDB D60FPVDJuip7gy6l\n\n################################### LIMITS ####################################\n################################### 限制   ####################################\n\n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the Redis server is not\n# able to configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached Redis will close all the new connections sending\n# an error \'max number of clients reached\'.\n#\n# 限制同时连接的客户数量,默认是10000\n# 当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到 error 信息\n# maxclients 10000\n\n# Don\'t use more memory than the specified amount of bytes.\n# When the memory limit is reached Redis will try to remove keys\n# according to the eviction policy selected (see maxmemory-policy).\n#\n# If Redis can\'t remove keys according to the policy, or if the policy is\n# set to \'noeviction\', Redis will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using Redis as an LRU cache, or to set\n# a hard memory limit for an instance (using the \'noeviction\' policy).\n#\n# WARNING: If you have slaves attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the slaves are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have slaves attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for slave\n# output buffers (but this is not needed if the policy is \'noeviction\').\n#\n# 设置redis能够使用的最大内存。\n# 达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key（设置过expire信息的key）\n# 在删除时,按照过期时间进行删除，最早将要被过期的key将最先被删除\n# 如果已到期或即将到期的key删光，仍进行set操作，那么将返回错误\n# 此时redis将不再接收写请求,只接收get请求。\n# maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用\n# maxmemory &lt;bytes>\n\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached. You can select among five behaviors:\n#\n# volatile-lru -> remove the key with an expire set using an LRU algorithm\n# allkeys-lru -> remove any key according to the LRU algorithm\n# volatile-random -> remove a random key with an expire set\n# allkeys-random -> remove a random key, any key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\n# noeviction -> don\'t expire at all, just return an error on write operations\n#\n# Note: with any of the above policies, Redis will return an error on write\n#       operations, when there are no suitable keys for eviction.\n#\n#       At the date of writing these commands are: set setnx setex append\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\n#       getset mset msetnx exec sort\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can tune it for speed or\n# accuracy. For default Redis will check five keys and pick the one that was\n# used less recently, you can change the sample size using the following\n# configuration directive.\n#\n# The default of 5 produces good enough results. 10 Approximates very closely\n# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.\n#\n# maxmemory-samples 5\n\n############################## APPEND ONLY MODE ###############################\n\n# By default Redis asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the Redis process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) Redis can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the Redis process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Please check http://redis.io/topics/persistence for more information.\n\n# redis 默认每次更新操作后会在后台异步的把数据库镜像备份到磁盘，但该备份非常耗时，且备份不宜太频繁\n# redis 同步数据文件是按上面save条件来同步的\n# 如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失\n# 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式\n# 开启append only 模式后,redis 将每一次写操作请求都追加到appendonly.aof 文件中\n# redis重新启动时,会从该文件恢复出之前的状态。\n# 但可能会造成 appendonly.aof 文件过大，所以redis支持BGREWRITEAOF 指令，对appendonly.aof重新整理,默认是不开启的。\n\nappendonly no\n\n# The name of the append only file (default: "appendonly.aof")\n# 默认为appendonly.aof。\nappendfilename "appendonly.aof"\n\n# The fsync() call tells the Operating System to actually write data on disk\n# instead of waiting for more data in the output buffer. Some OS will really flush\n# data on disk, some other OS will just try to do it ASAP.\n#\n# Redis supports three different modes:\n#\n# no: don\'t fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log. Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is "everysec", as that\'s usually the right compromise between\n# speed and data safety. It\'s up to you to understand if you can relax this to\n# "no" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that\'s snapshotting),\n# or on the contrary, use "always" that\'s very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use "everysec".\n\n# 设置对 appendonly.aof 文件进行同步的频率,有三种选择always、everysec、no，默认是everysec表示每秒同步一次。\n# always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。\n# no表示等操作系统进行数据缓存同步到磁盘，都进行同步,everysec 表示对写操作进行累积,每秒同步一次\n# appendfsync always\n# appendfsync everysec\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it\'s possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving, the durability of Redis is\n# the same as "appendfsync none". In practical terms, this means that it is\n# possible to lose up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n#\n# If you have latency problems turn this to "yes". Otherwise leave it as\n# "no" that is the safest pick from the point of view of durability.\n# 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。\nno-appendfsync-on-rewrite yes\n\n# Automatic rewrite of the append only file.\n# Redis is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\n#\n# This is how it works: Redis remembers the size of the AOF file after the\n# latest rewrite (if no rewrite has happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n# 指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时，就会触发background rewrite。若配置为0，则会禁用自动rewrite\nauto-aof-rewrite-percentage 100\n\n# 指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite。即这两个配置项同时满足时，才会触发rewrite。\nauto-aof-rewrite-min-size 64mb\n\n# An AOF file may be found to be truncated at the end during the Redis\n# startup process, when the AOF data gets loaded back into memory.\n# This may happen when the system where Redis is running\n# crashes, especially when an ext4 filesystem is mounted without the\n# data=ordered option (however this can\'t happen when Redis itself\n# crashes or aborts but the operating system still works correctly).\n#\n# Redis can either exit with an error when this happens, or load as much\n# data as possible (the default now) and start if the AOF file is found\n# to be truncated at the end. The following option controls this behavior.\n#\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\n# the Redis server starts emitting a log to inform the user of the event.\n# Otherwise if the option is set to no, the server aborts with an error\n# and refuses to start. When the option is set to no, the user requires\n# to fix the AOF file using the "redis-check-aof" utility before to restart\n# the server.\n#\n# Note that if the AOF file will be found to be corrupted in the middle\n# the server will still exit with an error. This option only applies when\n# Redis will try to read more data from the AOF file but not enough bytes\n# will be found.\naof-load-truncated yes\n\n################################ LUA SCRIPTING  ###############################\n\n# Max execution time of a Lua script in milliseconds.\n#\n# If the maximum execution time is reached Redis will log that a script is\n# still in execution after the maximum allowed time and will start to\n# reply to queries with an error.\n#\n# When a long running script exceeds the maximum execution time only the\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\n# used to stop a script that did not yet called write commands. The second\n# is the only way to shut down the server in the case a write command was\n# already issued by the script but the user doesn\'t want to wait for the natural\n# termination of the script.\n#\n# Set it to 0 or a negative value for unlimited execution without warnings.\n# 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000\nlua-time-limit 5000\n\n################################ REDIS CLUSTER  ###############################\n#\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however\n# in order to mark it as "mature" we need to wait for a non trivial percentage\n# of users to deploy it in production.\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n#\n# Normal Redis instances can\'t be part of a Redis Cluster; only nodes that are\n# started as cluster nodes can. In order to start a Redis instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n\n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by Redis nodes.\n# Every Redis Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system do not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are multiple of the node timeout.\n#\n# cluster-node-timeout 15000\n\n# A slave of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a slave to actually have a exact measure of\n# its "data age", so the following two checks are performed:\n#\n# 1) If there are multiple slaves able to failover, they exchange messages\n#    in order to try to give an advantage to the slave with the best\n#    replication offset (more data from the master processed).\n#    Slaves will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single slave computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the "connected" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the slave will not try to failover\n#    at all.\n#\n# The point "2" can be tuned by user. Specifically a slave will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\n#\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\n# slave will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large slave-validity-factor may allow slaves with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a slave at all.\n#\n# For maximum availability, it is possible to set the slave-validity-factor\n# to a value of 0, which means, that slaves will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they\'ll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-slave-validity-factor 10\n\n# Cluster slaves are able to migrate to orphaned masters, that are masters\n# that are left without working slaves. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can\'t be failed over\n# in case of failure if it has no working slaves.\n#\n# Slaves migrate to orphaned masters only if there are still at least a\n# given number of other working slaves for their old master. This number\n# is the "migration barrier". A migration barrier of 1 means that a slave\n# will migrate only if there is at least 1 other working slave for its master\n# and so forth. It usually reflects the number of slaves you want for every\n# master in your cluster.\n#\n# Default is 1 (slaves migrate only if their masters remain with at least\n# one slave). To disable migration just set it to a very large value.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n\n# By default Redis Cluster nodes stop accepting queries if they detect there\n# is at least an hash slot uncovered (no available node is serving it).\n# This way if the cluster is partially down (for example a range of hash slots\n# are no longer covered) all the cluster becomes, eventually, unavailable.\n# It automatically returns available as soon as all the slots are covered again.\n#\n# However sometimes you want the subset of the cluster which is working,\n# to continue to accept queries for the part of the key space that is still\n# covered. In order to do so, just set the cluster-require-full-coverage\n# option to no.\n#\n# cluster-require-full-coverage yes\n\n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n################################## SLOW LOG ###################################\n\n# The Redis Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n#\n# You can configure the slow log with two parameters: one tells Redis\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n\n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n\n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n\n################################ LATENCY MONITOR ##############################\n\n# The Redis latency monitoring subsystem samples different operations\n# at runtime in order to collect data related to possible sources of\n# latency of a Redis instance.\n#\n# Via the LATENCY command this information is available to the user that can\n# print graphs and obtain reports.\n#\n# The system only logs operations that were performed in a time equal or\n# greater than the amount of milliseconds specified via the\n# latency-monitor-threshold configuration directive. When its value is set\n# to zero, the latency monitor is turned off.\n#\n# By default latency monitoring is disabled since it is mostly not needed\n# if you don\'t have latency issues, and collecting data has a performance\n# impact, that while very small, can be measured under big load. Latency\n# monitoring can easily be enabled at runtime using the command\n# "CONFIG SET latency-monitor-threshold &lt;milliseconds>" if needed.\nlatency-monitor-threshold 0\n\n############################# EVENT NOTIFICATION ##############################\n\n# Redis can notify Pub/Sub clients about events happening in the key space.\n# This feature is documented at http://redis.io/topics/notifications\n#\n# For instance if keyspace events notification is enabled, and a client\n# performs a DEL operation on key "foo" stored in the Database 0, two\n# messages will be published via Pub/Sub:\n#\n# PUBLISH __keyspace@0__:foo del\n# PUBLISH __keyevent@0__:del foo\n#\n# It is possible to select the events that Redis will notify among a set\n# of classes. Every class is identified by a single character:\n#\n#  K     Keyspace events, published with __keyspace@&lt;db>__ prefix.\n#  E     Keyevent events, published with __keyevent@&lt;db>__ prefix.\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\n#  $     String commands\n#  l     List commands\n#  s     Set commands\n#  h     Hash commands\n#  z     Sorted set commands\n#  x     Expired events (events generated every time a key expires)\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\n#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.\n#\n#  The "notify-keyspace-events" takes as argument a string that is composed\n#  of zero or multiple characters. The empty string means that notifications\n#  are disabled.\n#\n#  Example: to enable list and generic events, from the point of view of the\n#           event name, use:\n#\n#  notify-keyspace-events Elg\n#\n#  Example 2: to get the stream of the expired keys subscribing to channel\n#             name __keyevent@0__:expired use:\n#\n#  notify-keyspace-events Ex\n#\n#  By default all notifications are disabled because most users don\'t need\n#  this feature and the feature has some overhead. Note that if you don\'t\n#  specify at least one of K or E, no events will be delivered.\nnotify-keyspace-events ""\n\n############################### ADVANCED CONFIG ###############################\n\n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\n# 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，\n# hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n\n# Similarly to hashes, small lists are also encoded in a special way in order\n# to save a lot of space. The special representation is only used when\n# you are under the following limits:\n# list数据类型多少节点以下会采用去指针的紧凑存储格式。\n# list数据类型节点值大小小于多少字节会采用紧凑存储格式。\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\n\n# Sets have a special encoding in just one case: when a set is composed\n# of just strings that happen to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\n# set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。\nset-max-intset-entries 512\n\n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\n\n# zsort数据类型多少节点以下会采用去指针的紧凑存储格式。\n# zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# HyperLogLog sparse representation bytes limit. The limit includes the\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\n# this limit, it is converted into the dense representation.\n#\n# A value greater than 16000 is totally useless, since at that point the\n# dense representation is more memory efficient.\n#\n# The suggested value is ~ 3000 in order to have the benefits of\n# the space efficient encoding without slowing down too much PFADD,\n# which is O(N) with the sparse encoding. The value can be raised to\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\nhll-sparse-max-bytes 3000\n\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main Redis hash table (the one mapping top-level\n# keys to values). The hash table implementation Redis uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into a hash table\n# that is rehashing, the more rehashing "steps" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n#\n# The default is to use this millisecond 10 times every second in order to\n# actively rehash the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use "activerehashing no" if you have hard latency requirements and it is\n# not a good thing in your environment that Redis can reply from time to time\n# to queries with 2 milliseconds delay.\n#\n# use "activerehashing yes" if you don\'t have such hard requirements but\n# want to free memory asap when possible.\n\n# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用\n# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。\n# 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存\nactiverehashing yes\n\n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can\'t consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -> normal clients including MONITOR clients\n# slave  -> slave clients\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit &lt;class> &lt;hard limit> &lt;soft limit> &lt;soft seconds>\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don\'t receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and slave clients, since\n# subscribers and slaves receive data in a push fashion.\n#\n# Both the hard or the soft limit can be disabled by setting them to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Redis calls an internal function to perform many background tasks, like\n# closing connections of clients in timeout, purging expired keys that are\n# never requested, and so forth.\n#\n# Not all tasks are performed with the same frequency, but Redis checks for\n# tasks to perform according to the specified "hz" value.\n#\n# By default "hz" is set to 10. Raising the value will use more CPU when\n# Redis is idle, but at the same time will make Redis more responsive when\n# there are many keys expiring at the same time, and timeouts may be\n# handled with more precision.\n#\n# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n\n# When a child rewrites the AOF file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\n# aof rewrite过程中,是否采取增量文件同步策略,默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数\naof-rewrite-incremental-fsync yes\n\n\n# redis数据存储\nredis的存储分为内存存储、磁盘存储和log文件三部分，配置文件中有三个参数对其进行配置。\nsave seconds updates，save配置，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。可多个条件配合，默认配置了三个条件。\nappendonly yes/no ，appendonly配置，指出是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。\nappendfsync no/always/everysec ，appendfsync配置，no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br><span class="line-number">350</span><br><span class="line-number">351</span><br><span class="line-number">352</span><br><span class="line-number">353</span><br><span class="line-number">354</span><br><span class="line-number">355</span><br><span class="line-number">356</span><br><span class="line-number">357</span><br><span class="line-number">358</span><br><span class="line-number">359</span><br><span class="line-number">360</span><br><span class="line-number">361</span><br><span class="line-number">362</span><br><span class="line-number">363</span><br><span class="line-number">364</span><br><span class="line-number">365</span><br><span class="line-number">366</span><br><span class="line-number">367</span><br><span class="line-number">368</span><br><span class="line-number">369</span><br><span class="line-number">370</span><br><span class="line-number">371</span><br><span class="line-number">372</span><br><span class="line-number">373</span><br><span class="line-number">374</span><br><span class="line-number">375</span><br><span class="line-number">376</span><br><span class="line-number">377</span><br><span class="line-number">378</span><br><span class="line-number">379</span><br><span class="line-number">380</span><br><span class="line-number">381</span><br><span class="line-number">382</span><br><span class="line-number">383</span><br><span class="line-number">384</span><br><span class="line-number">385</span><br><span class="line-number">386</span><br><span class="line-number">387</span><br><span class="line-number">388</span><br><span class="line-number">389</span><br><span class="line-number">390</span><br><span class="line-number">391</span><br><span class="line-number">392</span><br><span class="line-number">393</span><br><span class="line-number">394</span><br><span class="line-number">395</span><br><span class="line-number">396</span><br><span class="line-number">397</span><br><span class="line-number">398</span><br><span class="line-number">399</span><br><span class="line-number">400</span><br><span class="line-number">401</span><br><span class="line-number">402</span><br><span class="line-number">403</span><br><span class="line-number">404</span><br><span class="line-number">405</span><br><span class="line-number">406</span><br><span class="line-number">407</span><br><span class="line-number">408</span><br><span class="line-number">409</span><br><span class="line-number">410</span><br><span class="line-number">411</span><br><span class="line-number">412</span><br><span class="line-number">413</span><br><span class="line-number">414</span><br><span class="line-number">415</span><br><span class="line-number">416</span><br><span class="line-number">417</span><br><span class="line-number">418</span><br><span class="line-number">419</span><br><span class="line-number">420</span><br><span class="line-number">421</span><br><span class="line-number">422</span><br><span class="line-number">423</span><br><span class="line-number">424</span><br><span class="line-number">425</span><br><span class="line-number">426</span><br><span class="line-number">427</span><br><span class="line-number">428</span><br><span class="line-number">429</span><br><span class="line-number">430</span><br><span class="line-number">431</span><br><span class="line-number">432</span><br><span class="line-number">433</span><br><span class="line-number">434</span><br><span class="line-number">435</span><br><span class="line-number">436</span><br><span class="line-number">437</span><br><span class="line-number">438</span><br><span class="line-number">439</span><br><span class="line-number">440</span><br><span class="line-number">441</span><br><span class="line-number">442</span><br><span class="line-number">443</span><br><span class="line-number">444</span><br><span class="line-number">445</span><br><span class="line-number">446</span><br><span class="line-number">447</span><br><span class="line-number">448</span><br><span class="line-number">449</span><br><span class="line-number">450</span><br><span class="line-number">451</span><br><span class="line-number">452</span><br><span class="line-number">453</span><br><span class="line-number">454</span><br><span class="line-number">455</span><br><span class="line-number">456</span><br><span class="line-number">457</span><br><span class="line-number">458</span><br><span class="line-number">459</span><br><span class="line-number">460</span><br><span class="line-number">461</span><br><span class="line-number">462</span><br><span class="line-number">463</span><br><span class="line-number">464</span><br><span class="line-number">465</span><br><span class="line-number">466</span><br><span class="line-number">467</span><br><span class="line-number">468</span><br><span class="line-number">469</span><br><span class="line-number">470</span><br><span class="line-number">471</span><br><span class="line-number">472</span><br><span class="line-number">473</span><br><span class="line-number">474</span><br><span class="line-number">475</span><br><span class="line-number">476</span><br><span class="line-number">477</span><br><span class="line-number">478</span><br><span class="line-number">479</span><br><span class="line-number">480</span><br><span class="line-number">481</span><br><span class="line-number">482</span><br><span class="line-number">483</span><br><span class="line-number">484</span><br><span class="line-number">485</span><br><span class="line-number">486</span><br><span class="line-number">487</span><br><span class="line-number">488</span><br><span class="line-number">489</span><br><span class="line-number">490</span><br><span class="line-number">491</span><br><span class="line-number">492</span><br><span class="line-number">493</span><br><span class="line-number">494</span><br><span class="line-number">495</span><br><span class="line-number">496</span><br><span class="line-number">497</span><br><span class="line-number">498</span><br><span class="line-number">499</span><br><span class="line-number">500</span><br><span class="line-number">501</span><br><span class="line-number">502</span><br><span class="line-number">503</span><br><span class="line-number">504</span><br><span class="line-number">505</span><br><span class="line-number">506</span><br><span class="line-number">507</span><br><span class="line-number">508</span><br><span class="line-number">509</span><br><span class="line-number">510</span><br><span class="line-number">511</span><br><span class="line-number">512</span><br><span class="line-number">513</span><br><span class="line-number">514</span><br><span class="line-number">515</span><br><span class="line-number">516</span><br><span class="line-number">517</span><br><span class="line-number">518</span><br><span class="line-number">519</span><br><span class="line-number">520</span><br><span class="line-number">521</span><br><span class="line-number">522</span><br><span class="line-number">523</span><br><span class="line-number">524</span><br><span class="line-number">525</span><br><span class="line-number">526</span><br><span class="line-number">527</span><br><span class="line-number">528</span><br><span class="line-number">529</span><br><span class="line-number">530</span><br><span class="line-number">531</span><br><span class="line-number">532</span><br><span class="line-number">533</span><br><span class="line-number">534</span><br><span class="line-number">535</span><br><span class="line-number">536</span><br><span class="line-number">537</span><br><span class="line-number">538</span><br><span class="line-number">539</span><br><span class="line-number">540</span><br><span class="line-number">541</span><br><span class="line-number">542</span><br><span class="line-number">543</span><br><span class="line-number">544</span><br><span class="line-number">545</span><br><span class="line-number">546</span><br><span class="line-number">547</span><br><span class="line-number">548</span><br><span class="line-number">549</span><br><span class="line-number">550</span><br><span class="line-number">551</span><br><span class="line-number">552</span><br><span class="line-number">553</span><br><span class="line-number">554</span><br><span class="line-number">555</span><br><span class="line-number">556</span><br><span class="line-number">557</span><br><span class="line-number">558</span><br><span class="line-number">559</span><br><span class="line-number">560</span><br><span class="line-number">561</span><br><span class="line-number">562</span><br><span class="line-number">563</span><br><span class="line-number">564</span><br><span class="line-number">565</span><br><span class="line-number">566</span><br><span class="line-number">567</span><br><span class="line-number">568</span><br><span class="line-number">569</span><br><span class="line-number">570</span><br><span class="line-number">571</span><br><span class="line-number">572</span><br><span class="line-number">573</span><br><span class="line-number">574</span><br><span class="line-number">575</span><br><span class="line-number">576</span><br><span class="line-number">577</span><br><span class="line-number">578</span><br><span class="line-number">579</span><br><span class="line-number">580</span><br><span class="line-number">581</span><br><span class="line-number">582</span><br><span class="line-number">583</span><br><span class="line-number">584</span><br><span class="line-number">585</span><br><span class="line-number">586</span><br><span class="line-number">587</span><br><span class="line-number">588</span><br><span class="line-number">589</span><br><span class="line-number">590</span><br><span class="line-number">591</span><br><span class="line-number">592</span><br><span class="line-number">593</span><br><span class="line-number">594</span><br><span class="line-number">595</span><br><span class="line-number">596</span><br><span class="line-number">597</span><br><span class="line-number">598</span><br><span class="line-number">599</span><br><span class="line-number">600</span><br><span class="line-number">601</span><br><span class="line-number">602</span><br><span class="line-number">603</span><br><span class="line-number">604</span><br><span class="line-number">605</span><br><span class="line-number">606</span><br><span class="line-number">607</span><br><span class="line-number">608</span><br><span class="line-number">609</span><br><span class="line-number">610</span><br><span class="line-number">611</span><br><span class="line-number">612</span><br><span class="line-number">613</span><br><span class="line-number">614</span><br><span class="line-number">615</span><br><span class="line-number">616</span><br><span class="line-number">617</span><br><span class="line-number">618</span><br><span class="line-number">619</span><br><span class="line-number">620</span><br><span class="line-number">621</span><br><span class="line-number">622</span><br><span class="line-number">623</span><br><span class="line-number">624</span><br><span class="line-number">625</span><br><span class="line-number">626</span><br><span class="line-number">627</span><br><span class="line-number">628</span><br><span class="line-number">629</span><br><span class="line-number">630</span><br><span class="line-number">631</span><br><span class="line-number">632</span><br><span class="line-number">633</span><br><span class="line-number">634</span><br><span class="line-number">635</span><br><span class="line-number">636</span><br><span class="line-number">637</span><br><span class="line-number">638</span><br><span class="line-number">639</span><br><span class="line-number">640</span><br><span class="line-number">641</span><br><span class="line-number">642</span><br><span class="line-number">643</span><br><span class="line-number">644</span><br><span class="line-number">645</span><br><span class="line-number">646</span><br><span class="line-number">647</span><br><span class="line-number">648</span><br><span class="line-number">649</span><br><span class="line-number">650</span><br><span class="line-number">651</span><br><span class="line-number">652</span><br><span class="line-number">653</span><br><span class="line-number">654</span><br><span class="line-number">655</span><br><span class="line-number">656</span><br><span class="line-number">657</span><br><span class="line-number">658</span><br><span class="line-number">659</span><br><span class="line-number">660</span><br><span class="line-number">661</span><br><span class="line-number">662</span><br><span class="line-number">663</span><br><span class="line-number">664</span><br><span class="line-number">665</span><br><span class="line-number">666</span><br><span class="line-number">667</span><br><span class="line-number">668</span><br><span class="line-number">669</span><br><span class="line-number">670</span><br><span class="line-number">671</span><br><span class="line-number">672</span><br><span class="line-number">673</span><br><span class="line-number">674</span><br><span class="line-number">675</span><br><span class="line-number">676</span><br><span class="line-number">677</span><br><span class="line-number">678</span><br><span class="line-number">679</span><br><span class="line-number">680</span><br><span class="line-number">681</span><br><span class="line-number">682</span><br><span class="line-number">683</span><br><span class="line-number">684</span><br><span class="line-number">685</span><br><span class="line-number">686</span><br><span class="line-number">687</span><br><span class="line-number">688</span><br><span class="line-number">689</span><br><span class="line-number">690</span><br><span class="line-number">691</span><br><span class="line-number">692</span><br><span class="line-number">693</span><br><span class="line-number">694</span><br><span class="line-number">695</span><br><span class="line-number">696</span><br><span class="line-number">697</span><br><span class="line-number">698</span><br><span class="line-number">699</span><br><span class="line-number">700</span><br><span class="line-number">701</span><br><span class="line-number">702</span><br><span class="line-number">703</span><br><span class="line-number">704</span><br><span class="line-number">705</span><br><span class="line-number">706</span><br><span class="line-number">707</span><br><span class="line-number">708</span><br><span class="line-number">709</span><br><span class="line-number">710</span><br><span class="line-number">711</span><br><span class="line-number">712</span><br><span class="line-number">713</span><br><span class="line-number">714</span><br><span class="line-number">715</span><br><span class="line-number">716</span><br><span class="line-number">717</span><br><span class="line-number">718</span><br><span class="line-number">719</span><br><span class="line-number">720</span><br><span class="line-number">721</span><br><span class="line-number">722</span><br><span class="line-number">723</span><br><span class="line-number">724</span><br><span class="line-number">725</span><br><span class="line-number">726</span><br><span class="line-number">727</span><br><span class="line-number">728</span><br><span class="line-number">729</span><br><span class="line-number">730</span><br><span class="line-number">731</span><br><span class="line-number">732</span><br><span class="line-number">733</span><br><span class="line-number">734</span><br><span class="line-number">735</span><br><span class="line-number">736</span><br><span class="line-number">737</span><br><span class="line-number">738</span><br><span class="line-number">739</span><br><span class="line-number">740</span><br><span class="line-number">741</span><br><span class="line-number">742</span><br><span class="line-number">743</span><br><span class="line-number">744</span><br><span class="line-number">745</span><br><span class="line-number">746</span><br><span class="line-number">747</span><br><span class="line-number">748</span><br><span class="line-number">749</span><br><span class="line-number">750</span><br><span class="line-number">751</span><br><span class="line-number">752</span><br><span class="line-number">753</span><br><span class="line-number">754</span><br><span class="line-number">755</span><br><span class="line-number">756</span><br><span class="line-number">757</span><br><span class="line-number">758</span><br><span class="line-number">759</span><br><span class="line-number">760</span><br><span class="line-number">761</span><br><span class="line-number">762</span><br><span class="line-number">763</span><br><span class="line-number">764</span><br><span class="line-number">765</span><br><span class="line-number">766</span><br><span class="line-number">767</span><br><span class="line-number">768</span><br><span class="line-number">769</span><br><span class="line-number">770</span><br><span class="line-number">771</span><br><span class="line-number">772</span><br><span class="line-number">773</span><br><span class="line-number">774</span><br><span class="line-number">775</span><br><span class="line-number">776</span><br><span class="line-number">777</span><br><span class="line-number">778</span><br><span class="line-number">779</span><br><span class="line-number">780</span><br><span class="line-number">781</span><br><span class="line-number">782</span><br><span class="line-number">783</span><br><span class="line-number">784</span><br><span class="line-number">785</span><br><span class="line-number">786</span><br><span class="line-number">787</span><br><span class="line-number">788</span><br><span class="line-number">789</span><br><span class="line-number">790</span><br><span class="line-number">791</span><br><span class="line-number">792</span><br><span class="line-number">793</span><br><span class="line-number">794</span><br><span class="line-number">795</span><br><span class="line-number">796</span><br><span class="line-number">797</span><br><span class="line-number">798</span><br><span class="line-number">799</span><br><span class="line-number">800</span><br><span class="line-number">801</span><br><span class="line-number">802</span><br><span class="line-number">803</span><br><span class="line-number">804</span><br><span class="line-number">805</span><br><span class="line-number">806</span><br><span class="line-number">807</span><br><span class="line-number">808</span><br><span class="line-number">809</span><br><span class="line-number">810</span><br><span class="line-number">811</span><br><span class="line-number">812</span><br><span class="line-number">813</span><br><span class="line-number">814</span><br><span class="line-number">815</span><br><span class="line-number">816</span><br><span class="line-number">817</span><br><span class="line-number">818</span><br><span class="line-number">819</span><br><span class="line-number">820</span><br><span class="line-number">821</span><br><span class="line-number">822</span><br><span class="line-number">823</span><br><span class="line-number">824</span><br><span class="line-number">825</span><br><span class="line-number">826</span><br><span class="line-number">827</span><br><span class="line-number">828</span><br><span class="line-number">829</span><br><span class="line-number">830</span><br><span class="line-number">831</span><br><span class="line-number">832</span><br><span class="line-number">833</span><br><span class="line-number">834</span><br><span class="line-number">835</span><br><span class="line-number">836</span><br><span class="line-number">837</span><br><span class="line-number">838</span><br><span class="line-number">839</span><br><span class="line-number">840</span><br><span class="line-number">841</span><br><span class="line-number">842</span><br><span class="line-number">843</span><br><span class="line-number">844</span><br><span class="line-number">845</span><br><span class="line-number">846</span><br><span class="line-number">847</span><br><span class="line-number">848</span><br><span class="line-number">849</span><br><span class="line-number">850</span><br><span class="line-number">851</span><br><span class="line-number">852</span><br><span class="line-number">853</span><br><span class="line-number">854</span><br><span class="line-number">855</span><br><span class="line-number">856</span><br><span class="line-number">857</span><br><span class="line-number">858</span><br><span class="line-number">859</span><br><span class="line-number">860</span><br><span class="line-number">861</span><br><span class="line-number">862</span><br><span class="line-number">863</span><br><span class="line-number">864</span><br><span class="line-number">865</span><br><span class="line-number">866</span><br><span class="line-number">867</span><br><span class="line-number">868</span><br><span class="line-number">869</span><br><span class="line-number">870</span><br><span class="line-number">871</span><br><span class="line-number">872</span><br><span class="line-number">873</span><br><span class="line-number">874</span><br><span class="line-number">875</span><br><span class="line-number">876</span><br><span class="line-number">877</span><br><span class="line-number">878</span><br><span class="line-number">879</span><br><span class="line-number">880</span><br><span class="line-number">881</span><br><span class="line-number">882</span><br><span class="line-number">883</span><br><span class="line-number">884</span><br><span class="line-number">885</span><br><span class="line-number">886</span><br><span class="line-number">887</span><br><span class="line-number">888</span><br><span class="line-number">889</span><br><span class="line-number">890</span><br><span class="line-number">891</span><br><span class="line-number">892</span><br><span class="line-number">893</span><br><span class="line-number">894</span><br><span class="line-number">895</span><br><span class="line-number">896</span><br><span class="line-number">897</span><br><span class="line-number">898</span><br><span class="line-number">899</span><br><span class="line-number">900</span><br><span class="line-number">901</span><br><span class="line-number">902</span><br><span class="line-number">903</span><br><span class="line-number">904</span><br><span class="line-number">905</span><br><span class="line-number">906</span><br><span class="line-number">907</span><br><span class="line-number">908</span><br><span class="line-number">909</span><br><span class="line-number">910</span><br><span class="line-number">911</span><br><span class="line-number">912</span><br><span class="line-number">913</span><br><span class="line-number">914</span><br><span class="line-number">915</span><br><span class="line-number">916</span><br><span class="line-number">917</span><br><span class="line-number">918</span><br><span class="line-number">919</span><br><span class="line-number">920</span><br><span class="line-number">921</span><br><span class="line-number">922</span><br><span class="line-number">923</span><br><span class="line-number">924</span><br><span class="line-number">925</span><br><span class="line-number">926</span><br><span class="line-number">927</span><br><span class="line-number">928</span><br><span class="line-number">929</span><br><span class="line-number">930</span><br><span class="line-number">931</span><br><span class="line-number">932</span><br><span class="line-number">933</span><br><span class="line-number">934</span><br><span class="line-number">935</span><br><span class="line-number">936</span><br><span class="line-number">937</span><br><span class="line-number">938</span><br><span class="line-number">939</span><br><span class="line-number">940</span><br><span class="line-number">941</span><br><span class="line-number">942</span><br><span class="line-number">943</span><br><span class="line-number">944</span><br><span class="line-number">945</span><br><span class="line-number">946</span><br><span class="line-number">947</span><br><span class="line-number">948</span><br><span class="line-number">949</span><br><span class="line-number">950</span><br><span class="line-number">951</span><br><span class="line-number">952</span><br><span class="line-number">953</span><br><span class="line-number">954</span><br><span class="line-number">955</span><br><span class="line-number">956</span><br><span class="line-number">957</span><br><span class="line-number">958</span><br><span class="line-number">959</span><br><span class="line-number">960</span><br><span class="line-number">961</span><br><span class="line-number">962</span><br><span class="line-number">963</span><br><span class="line-number">964</span><br><span class="line-number">965</span><br><span class="line-number">966</span><br><span class="line-number">967</span><br><span class="line-number">968</span><br><span class="line-number">969</span><br><span class="line-number">970</span><br><span class="line-number">971</span><br><span class="line-number">972</span><br><span class="line-number">973</span><br><span class="line-number">974</span><br><span class="line-number">975</span><br><span class="line-number">976</span><br><span class="line-number">977</span><br><span class="line-number">978</span><br><span class="line-number">979</span><br><span class="line-number">980</span><br><span class="line-number">981</span><br><span class="line-number">982</span><br><span class="line-number">983</span><br><span class="line-number">984</span><br><span class="line-number">985</span><br><span class="line-number">986</span><br><span class="line-number">987</span><br><span class="line-number">988</span><br><span class="line-number">989</span><br><span class="line-number">990</span><br><span class="line-number">991</span><br><span class="line-number">992</span><br><span class="line-number">993</span><br><span class="line-number">994</span><br><span class="line-number">995</span><br><span class="line-number">996</span><br><span class="line-number">997</span><br><span class="line-number">998</span><br><span class="line-number">999</span><br><span class="line-number">1000</span><br><span class="line-number">1001</span><br><span class="line-number">1002</span><br><span class="line-number">1003</span><br><span class="line-number">1004</span><br><span class="line-number">1005</span><br><span class="line-number">1006</span><br><span class="line-number">1007</span><br><span class="line-number">1008</span><br><span class="line-number">1009</span><br><span class="line-number">1010</span><br><span class="line-number">1011</span><br><span class="line-number">1012</span><br><span class="line-number">1013</span><br><span class="line-number">1014</span><br><span class="line-number">1015</span><br><span class="line-number">1016</span><br><span class="line-number">1017</span><br><span class="line-number">1018</span><br><span class="line-number">1019</span><br><span class="line-number">1020</span><br><span class="line-number">1021</span><br><span class="line-number">1022</span><br><span class="line-number">1023</span><br><span class="line-number">1024</span><br><span class="line-number">1025</span><br><span class="line-number">1026</span><br><span class="line-number">1027</span><br><span class="line-number">1028</span><br><span class="line-number">1029</span><br><span class="line-number">1030</span><br><span class="line-number">1031</span><br><span class="line-number">1032</span><br><span class="line-number">1033</span><br><span class="line-number">1034</span><br><span class="line-number">1035</span><br><span class="line-number">1036</span><br><span class="line-number">1037</span><br><span class="line-number">1038</span><br><span class="line-number">1039</span><br><span class="line-number">1040</span><br><span class="line-number">1041</span><br><span class="line-number">1042</span><br><span class="line-number">1043</span><br><span class="line-number">1044</span><br><span class="line-number">1045</span><br><span class="line-number">1046</span><br><span class="line-number">1047</span><br><span class="line-number">1048</span><br><span class="line-number">1049</span><br><span class="line-number">1050</span><br><span class="line-number">1051</span><br><span class="line-number">1052</span><br><span class="line-number">1053</span><br><span class="line-number">1054</span><br><span class="line-number">1055</span><br><span class="line-number">1056</span><br><span class="line-number">1057</span><br><span class="line-number">1058</span><br><span class="line-number">1059</span><br><span class="line-number">1060</span><br><span class="line-number">1061</span><br><span class="line-number">1062</span><br><span class="line-number">1063</span><br><span class="line-number">1064</span><br><span class="line-number">1065</span><br><span class="line-number">1066</span><br><span class="line-number">1067</span><br><span class="line-number">1068</span><br><span class="line-number">1069</span><br><span class="line-number">1070</span><br><span class="line-number">1071</span><br><span class="line-number">1072</span><br><span class="line-number">1073</span><br><span class="line-number">1074</span><br><span class="line-number">1075</span><br><span class="line-number">1076</span><br><span class="line-number">1077</span><br><span class="line-number">1078</span><br><span class="line-number">1079</span><br><span class="line-number">1080</span><br><span class="line-number">1081</span><br><span class="line-number">1082</span><br><span class="line-number">1083</span><br><span class="line-number">1084</span><br><span class="line-number">1085</span><br><span class="line-number">1086</span><br><span class="line-number">1087</span><br><span class="line-number">1088</span><br><span class="line-number">1089</span><br><span class="line-number">1090</span><br><span class="line-number">1091</span><br><span class="line-number">1092</span><br><span class="line-number">1093</span><br><span class="line-number">1094</span><br><span class="line-number">1095</span><br><span class="line-number">1096</span><br><span class="line-number">1097</span><br><span class="line-number">1098</span><br><span class="line-number">1099</span><br><span class="line-number">1100</span><br><span class="line-number">1101</span><br><span class="line-number">1102</span><br><span class="line-number">1103</span><br><span class="line-number">1104</span><br><span class="line-number">1105</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/redis.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"redis",filePath:"/Users/jck/caicai_blog/docs/record/redis.md",filePathRelative:"record/redis.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis.html.vue",componentFilePathRelative:"pages/record/redis.html.vue",componentFileChunkName:"v-15bb06e3",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis.html.js",dataFilePathRelative:"pages/record/redis.html.js",dataFileChunkName:"v-15bb06e3",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/redis.html",htmlFilePathRelative:"record/redis.html"},{data:{key:"v-0b557a49",path:"/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",title:"Redis缓存实践",lang:"zh-CN",frontmatter:{title:"Redis缓存实践",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/02/27 20:15",tag:["redis","go"]},excerpt:"",headers:[{level:2,title:"几种读写方式",slug:"几种读写方式",children:[]}],git:{}},key:"v-0b557a49",path:"/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",title:"Redis缓存实践",lang:"zh-CN",frontmatter:{title:"Redis缓存实践",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/02/27 20:15",tag:["redis","go"]},excerpt:"",headers:[{level:2,title:"几种读写方式",slug:"几种读写方式",children:[]}],content:"\n# 绪论\n\n之前的几篇都才写了个标题，这次我想具体写一些，主要是想先把找到的原理进行一个理解最后在自己实践一下。并且redis学了一个月了，一直没拿来做点什么，都快忘光了。正好看到redis可以用作缓存，因此尝试一下。我上次看书发现redis还可以做什么队列，那个等复试完了再弄弄看。\n\n# 原理\n\nRedis做缓存，就是在读mysql数据库前先访问redis，如果命中就不用在访问数据库，未命中就访问数据库。\n盗的示意图\n![](https://images.alsritter.icu/images/2021/04/27/20210428093359.png)\n\n## 几种读写方式\n\n偷一下懒，直接摆别人的图和文字了\n\n\n# 实践\n\n# 总结\n\n感觉还行\n\n# 参考文章\n\n1. redis缓存读写模式<https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91>\n2. go-zero持久层缓存设计<https://go-zero.dev/redis-cache.html>\n3. Redis 缓存读写策略设计及常见问题<https://alsritter.icu/posts/56acbef6/>",contentRendered:'<h1 id="绪论" tabindex="-1"><a class="header-anchor" href="#绪论" aria-hidden="true">#</a> 绪论</h1>\n<p>之前的几篇都才写了个标题，这次我想具体写一些，主要是想先把找到的原理进行一个理解最后在自己实践一下。并且redis学了一个月了，一直没拿来做点什么，都快忘光了。正好看到redis可以用作缓存，因此尝试一下。我上次看书发现redis还可以做什么队列，那个等复试完了再弄弄看。</p>\n<h1 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h1>\n<p>Redis做缓存，就是在读mysql数据库前先访问redis，如果命中就不用在访问数据库，未命中就访问数据库。\n盗的示意图\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://images.alsritter.icu/images/2021/04/27/20210428093359.png" data="aurora"></p>\n<h2 id="几种读写方式" tabindex="-1"><a class="header-anchor" href="#几种读写方式" aria-hidden="true">#</a> 几种读写方式</h2>\n<p>偷一下懒，直接摆别人的图和文字了</p>\n<h1 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h1>\n<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1>\n<p>感觉还行</p>\n<h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h1>\n<ol>\n<li>redis缓存读写模式<a href="https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91" target="_blank" rel="noopener noreferrer">https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91<ExternalLinkIcon/></a></li>\n<li>go-zero持久层缓存设计<a href="https://go-zero.dev/redis-cache.html" target="_blank" rel="noopener noreferrer">https://go-zero.dev/redis-cache.html<ExternalLinkIcon/></a></li>\n<li>Redis 缓存读写策略设计及常见问题<a href="https://alsritter.icu/posts/56acbef6/" target="_blank" rel="noopener noreferrer">https://alsritter.icu/posts/56acbef6/<ExternalLinkIcon/></a></li>\n</ol>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/redis缓存实践.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"redis缓存实践",filePath:"/Users/jck/caicai_blog/docs/record/redis缓存实践.md",filePathRelative:"record/redis缓存实践.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis缓存实践.html.vue",componentFilePathRelative:"pages/record/redis缓存实践.html.vue",componentFileChunkName:"v-0b557a49",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis缓存实践.html.js",dataFilePathRelative:"pages/record/redis缓存实践.html.js",dataFileChunkName:"v-0b557a49",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/redis缓存实践.html",htmlFilePathRelative:"record/redis缓存实践.html"},{data:{key:"v-fb6448d2",path:"/record/regex.html",title:"正则表达式学习",lang:"zh-CN",frontmatter:{title:"正则表达式学习",tag:["regex"],categories:["regex"],date:"2021/12/31 23:23"},excerpt:"",headers:[{level:2,title:"常见的匹配",slug:"常见的匹配",children:[]}],git:{}},key:"v-fb6448d2",path:"/record/regex.html",title:"正则表达式学习",lang:"zh-CN",frontmatter:{title:"正则表达式学习",tag:["regex"],categories:["regex"],date:"2021/12/31 23:23"},excerpt:"",headers:[{level:2,title:"常见的匹配",slug:"常见的匹配",children:[]}],content:'\r\n\r\n\r\n## 常见的匹配\r\n\r\n\r\n```\r\n    reEmail = `\\w+@\\w+\\.\\w+`\r\n    reLinke= `href="(https?://[\\s\\S]+?)"`\r\n    rePhone  = `1[3456789]\\d\\s?\\d{4}\\s?\\d{4}`\r\n    reIdcard = `[123456789]\\d{5}((19\\d{2})|(20[01]\\d))((0[1-9])|(1[012]))((0[1-9])|([12]\\d)|(3[01]))\\d{3}[\\dXx]`\r\n    reImg    = `https?://[^"]+?(\\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`\r\n```',contentRendered:'<h2 id="常见的匹配" tabindex="-1"><a class="header-anchor" href="#常见的匹配" aria-hidden="true">#</a> 常见的匹配</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    reEmail = `\\w+@\\w+\\.\\w+`\n    reLinke= `href="(https?://[\\s\\S]+?)"`\n    rePhone  = `1[3456789]\\d\\s?\\d{4}\\s?\\d{4}`\n    reIdcard = `[123456789]\\d{5}((19\\d{2})|(20[01]\\d))((0[1-9])|(1[012]))((0[1-9])|([12]\\d)|(3[01]))\\d{3}[\\dXx]`\n    reImg    = `https?://[^"]+?(\\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/regex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"regex",filePath:"/Users/jck/caicai_blog/docs/record/regex.md",filePathRelative:"record/regex.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/regex.html.vue",componentFilePathRelative:"pages/record/regex.html.vue",componentFileChunkName:"v-fb6448d2",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/regex.html.js",dataFilePathRelative:"pages/record/regex.html.js",dataFileChunkName:"v-fb6448d2",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/regex.html",htmlFilePathRelative:"record/regex.html"},{data:{key:"v-7cab0f64",path:"/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",title:"初探bilibili微服务框架kratos",lang:"zh-CN",frontmatter:{title:"初探bilibili微服务框架kratos",tag:["go","microservice","kratos"],categories:["go","microservice"],date:"2022/02/08 00:15"},excerpt:"",headers:[],git:{}},key:"v-7cab0f64",path:"/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",title:"初探bilibili微服务框架kratos",lang:"zh-CN",frontmatter:{title:"初探bilibili微服务框架kratos",tag:["go","microservice","kratos"],categories:["go","microservice"],date:"2022/02/08 00:15"},excerpt:"",headers:[],content:"\n\n",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/初探bilibili微服务框架kratos.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"初探bilibili微服务框架kratos",filePath:"/Users/jck/caicai_blog/docs/record/初探bilibili微服务框架kratos.md",filePathRelative:"record/初探bilibili微服务框架kratos.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探bilibili微服务框架kratos.html.vue",componentFilePathRelative:"pages/record/初探bilibili微服务框架kratos.html.vue",componentFileChunkName:"v-7cab0f64",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探bilibili微服务框架kratos.html.js",dataFilePathRelative:"pages/record/初探bilibili微服务框架kratos.html.js",dataFileChunkName:"v-7cab0f64",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/初探bilibili微服务框架kratos.html",htmlFilePathRelative:"record/初探bilibili微服务框架kratos.html"},{data:{key:"v-be3aac98",path:"/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",title:"初探golang微服务",lang:"zh-CN",frontmatter:{title:"初探golang微服务",tag:["go","microservice"],categories:["go","microservice"],date:"2022/02/05 00:15"},excerpt:"",headers:[],git:{}},key:"v-be3aac98",path:"/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",title:"初探golang微服务",lang:"zh-CN",frontmatter:{title:"初探golang微服务",tag:["go","microservice"],categories:["go","microservice"],date:"2022/02/05 00:15"},excerpt:"",headers:[],content:"\n# 微服务\n\n最近在看go语言微服务及高并发这本书，感觉算是大概了解了一下golang微服务的发展什么的\n",contentRendered:'<h1 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务" aria-hidden="true">#</a> 微服务</h1>\n<p>最近在看go语言微服务及高并发这本书，感觉算是大概了解了一下golang微服务的发展什么的</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/初探golang微服务.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"初探golang微服务",filePath:"/Users/jck/caicai_blog/docs/record/初探golang微服务.md",filePathRelative:"record/初探golang微服务.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探golang微服务.html.vue",componentFilePathRelative:"pages/record/初探golang微服务.html.vue",componentFileChunkName:"v-be3aac98",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探golang微服务.html.js",dataFilePathRelative:"pages/record/初探golang微服务.html.js",dataFileChunkName:"v-be3aac98",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/初探golang微服务.html",htmlFilePathRelative:"record/初探golang微服务.html"},{data:{key:"v-4d557aaa",path:"/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",title:"我的第一个微服务项目",lang:"zh-CN",frontmatter:{title:"我的第一个微服务项目",tag:["go","microservice","kratos"],categories:["go","microservice","project"],date:"2022/02/13 23:49"},excerpt:"",headers:[{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"暂定要使用的技术",slug:"暂定要使用的技术",children:[]},{level:2,title:"目前进度",slug:"目前进度",children:[]}],git:{}},key:"v-4d557aaa",path:"/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",title:"我的第一个微服务项目",lang:"zh-CN",frontmatter:{title:"我的第一个微服务项目",tag:["go","microservice","kratos"],categories:["go","microservice","project"],date:"2022/02/13 23:49"},excerpt:"",headers:[{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"暂定要使用的技术",slug:"暂定要使用的技术",children:[]},{level:2,title:"目前进度",slug:"目前进度",children:[]}],content:"\n# 我的第一个微服务项目\n\n\n我是分割线，嘤嘤嘤\n->============================================<-\n## Summary\n在看了好几天kratos文档以及代码示例example后，并且看了看官方的示例beer-shop 项目的代码后，基本了解了kratos项目该怎么写，于是我也终于开始施工我的第一个称得上项目的微服务项目，我暂定其总 功能为学校管理系统，并暂定其由用户（学生，教师，管理员）管理微服务，选课成绩管理微服务，机构设置微服务组成，后续其他微服务等我想到了再网上加.\n**项目地址为：<https://github.com/kasoushu/education-micro>**\n\n\n## 暂定要使用的技术\n|技术|说明|链接|\n|---|---|---\n|kratos|微服务框架|<https://go-kratos.dev/docs/>|\n|protobuf|生成grpc|<https://developers.google.com/protocol-buffers/docs/downloads>\n|jwt|用户验证| <https://github.com/dgrijalva/jwt-go>|\n|grpc|远程调用|<>|\n|jaeger|链路追踪|<>|\n|consul|服务注册，服务发现|<>|\n|ent|orm框架 |<>|\n|gorm|orm框架 |<>|\n\n## 目前进度\n|step|status|\n|---|---|\n|用户管理微服务|已实现|\n|选课成绩管理微服务|正在施工|\n|机构管理微服务|未施工|",contentRendered:'<h1 id="我的第一个微服务项目" tabindex="-1"><a class="header-anchor" href="#我的第一个微服务项目" aria-hidden="true">#</a> 我的第一个微服务项目</h1>\n<p>我是分割线，嘤嘤嘤\n-&gt;============================================&lt;-</p>\n<h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2>\n<p>在看了好几天kratos文档以及代码示例example后，并且看了看官方的示例beer-shop 项目的代码后，基本了解了kratos项目该怎么写，于是我也终于开始施工我的第一个称得上项目的微服务项目，我暂定其总 功能为学校管理系统，并暂定其由用户（学生，教师，管理员）管理微服务，选课成绩管理微服务，机构设置微服务组成，后续其他微服务等我想到了再网上加.\n<strong>项目地址为：<a href="https://github.com/kasoushu/education-micro" target="_blank" rel="noopener noreferrer">https://github.com/kasoushu/education-micro<ExternalLinkIcon/></a></strong></p>\n<h2 id="暂定要使用的技术" tabindex="-1"><a class="header-anchor" href="#暂定要使用的技术" aria-hidden="true">#</a> 暂定要使用的技术</h2>\n<table>\n<thead>\n<tr>\n<th>技术</th>\n<th>说明</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>kratos</td>\n<td>微服务框架</td>\n<td><a href="https://go-kratos.dev/docs/" target="_blank" rel="noopener noreferrer">https://go-kratos.dev/docs/<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>protobuf</td>\n<td>生成grpc</td>\n<td><a href="https://developers.google.com/protocol-buffers/docs/downloads" target="_blank" rel="noopener noreferrer">https://developers.google.com/protocol-buffers/docs/downloads<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>jwt</td>\n<td>用户验证</td>\n<td><a href="https://github.com/dgrijalva/jwt-go" target="_blank" rel="noopener noreferrer">https://github.com/dgrijalva/jwt-go<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>grpc</td>\n<td>远程调用</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>jaeger</td>\n<td>链路追踪</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>consul</td>\n<td>服务注册，服务发现</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>ent</td>\n<td>orm框架</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>gorm</td>\n<td>orm框架</td>\n<td>&lt;&gt;</td>\n</tr>\n</tbody>\n</table>\n<h2 id="目前进度" tabindex="-1"><a class="header-anchor" href="#目前进度" aria-hidden="true">#</a> 目前进度</h2>\n<table>\n<thead>\n<tr>\n<th>step</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户管理微服务</td>\n<td>已实现</td>\n</tr>\n<tr>\n<td>选课成绩管理微服务</td>\n<td>正在施工</td>\n</tr>\n<tr>\n<td>机构管理微服务</td>\n<td>未施工</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/我的第一个微服务项目.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"我的第一个微服务项目",filePath:"/Users/jck/caicai_blog/docs/record/我的第一个微服务项目.md",filePathRelative:"record/我的第一个微服务项目.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/我的第一个微服务项目.html.vue",componentFilePathRelative:"pages/record/我的第一个微服务项目.html.vue",componentFileChunkName:"v-4d557aaa",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/我的第一个微服务项目.html.js",dataFilePathRelative:"pages/record/我的第一个微服务项目.html.js",dataFileChunkName:"v-4d557aaa",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/我的第一个微服务项目.html",htmlFilePathRelative:"record/我的第一个微服务项目.html"},{data:{key:"v-47e6875f",path:"/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",title:"考研记录",lang:"zh-CN",frontmatter:{title:"考研记录",date:"2022/04/23 1:11",tags:["考研","CS"],categories:["杂谈"]},excerpt:"",headers:[],git:{}},key:"v-47e6875f",path:"/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",title:"考研记录",lang:"zh-CN",frontmatter:{title:"考研记录",date:"2022/04/23 1:11",tags:["考研","CS"],categories:["杂谈"]},excerpt:"",headers:[],content:"\n# Warning\n\n本文为流水账，不具有任何指导意义，任何因效仿本文而产生的负面影响与作者一概无关！\n\n我始终认为，成功的经验难以复制，考研路上不仅需要实力，运气在考研路上也占很大一部分，所以说**选择大于努力**。不过如果没有足够的实力，再好的选择和运气也是白搭。\n\n# 前言\n\n小老弟今年上岸某双非，考试科目11408，英语75政治76，数一112，408 130。写本文记录考研生活\n\n# 数学\n\n数学可谓我之一生之敌，自初中以来，但凡大考从未如我所愿过一回。当然这应该是我太菜了。 我数学从3月开始正式开学，花费了很多时间。基本每天必看，时间2-5，6个小时。平均4个多小时。数学我基本上一直都在看书加做题，网课就看了概率论部分。我做了1800基础部分，做了之后感觉一般般就不做了，然后做了660，这本不错，可以一做，不过他的现代和概率论感觉有点简单，高数部分很不错。然后就是880，880很推荐，值得一做。然后买了1000题这个我感觉来不及做了就没做，不过我感觉应该比1800强一点吧，1800可以说是最垃圾的了...我问了一些人他们也一致同意hhhhh。\n\n然后就是做做真题，真题我就做了02-21的，太久远的也懒得做了。。真题我刷了两遍半吧，第二遍是想看看第一遍做完后错题啥的会做没，第2.5遍是12月份快考试模拟卷做不动了，就做做真题养生了。\n\n模拟卷之前我还做了李林的108，这个质量挺好的，我错了好多题\n模拟卷的话我做过李林6+4 22年的和21年的，这个110-130左右吧，感觉往年的不用咋做。。没啥提升。合工大五套超越卷做了17-22年的，这个是有点难的,,基本就100-110分左右,还有张宇的，我做了他去年的8+4还有今年的所谓过关版和啥啥版（忘了叫啥了）8+4，感觉今年张宇的偏简单了，没啥好做的后悔呜呜呜，，，，去年的8+4还OK。我感觉当年考根本不用去买以前的模拟卷做(或许是指张宇，md 36套感觉白做了)。。。合工大可以做做以前的吧。这个挺多人推荐的。数学多涉猎一些题应该还是有好处的。后面还做了李艳芳3套卷，这个真nm难。。。。。唉\n\n就这么瞎复习，就差不多到考试了，考试的时候我看错时间以为都过了一个小时了，我还才做到选择题第6个。。。就贼慌我日。。。然后就拼命做，做完填空题才发现看错时间，才过了1个小时多。。。。无语，后面就一直很慌，最后题最大似然我感觉也做的不太多，证明题做过的原题突然也不会了。。曲面积分感觉也算错了。。唉。不过最后还好有110来分....\n\n# 计算机基础综合408\n\n这个我感觉我也是瞎学的。。我本科机电专业，学408也不算零基础吧，自己学过点。。。。然后我408也是嗯看书，嫌视频太墨迹了书也差不多能看懂，我是从计组->操作系统-> 计网-> 数据结构看的，一开始看计组第二章差点把我劝退....那个补码乘除法就直接给了算法，为什么，哪来的都不知道唉，把我给看懵了。后面看看书和看看视频也算是弄懂了。。。之后基本就没啥值得说的，就一路平推。 然后推完发现我计组啥的都忘光了，就又推了一遍+做大题，之后又看了看书+看选择题，完了之后就真题了，发现真题也不难，因为王道书上基本都做过。。。真题完了一遍看了看研芝士的选择题花了半月，那个质量感觉一般般，有点垃圾（他的模拟卷也贼垃圾，用了都说垃圾）再然后9月多了，开学了408书不想看了就又做了遍真题\n\n做完发现大纲加了好多，然后看了看改的啥的。发现不咋会就等王道更新了。。。后面12月初差不多才都更新好吧，那会把这些都看了看。10，11就是做做模拟卷，看看书，11月，12月基本复习时间减少了好多，分给英语和政治了。最后几周就看看新考点，做做真题养养老了。\n\n这门考完是我感觉最好的了吧。就感觉题目挺常规的。尤其这是在上午考完数学。。整个人都不好了之后。那天感觉也很平常。也没有特别开心，我意识到这或许又是一个重大转折点吧。\n\n\n# 英语\n\n我英语一直不太好，小学以来就不喜欢英语，也不太会，一直学的也是哑巴英语，所幸考研没有听力。英语我到暑假前都只有背背单词啥的。那会每天还有课又要学专业课又要学数学，也没啥空。7月开始我每天还做做一张真题卷子的阅读题。每天一张，7-8月做了两遍差不多，当然仅限阅读部分。。。。。一开始错的贼多，一般7，8，9个有几张难的甚至10，12个。后面做的多了可能题都背下来了就基本6，7个了，有时5个以内。我后面10月。11月的时候在做基本就2-4个了，那会是真的都背下来了。。。。。感觉这个正确率也没啥参考性。阅读做了做后，我也开始做做完型，新题型之类的，后面完型差不多错8个，新题型看运气，好的时候全对，不好的时候错3个。翻译。我练的少，考试的时候感觉做的都错了。\n\n作文的话我10月底开始背作文，刚开始每天1篇小作文，后来感觉太慢了就一天两篇小作文加默写...后面就是一天一片大作文，+默写，再一天两篇大作文+默写。。都背完了之后就每天默默。。那本粉色的书上的看图写画我都全背了然后默一默啥的。作文这东西我感觉就是多背多默多写，我都背了默了之后还会抽空自己写一写，按一种类型写一篇吧，感觉每天学英语时间太少了。。也没写很多。写完了可以用那个小冰批改作文啥的，可以看看有没有语法错误啥的。。他还可以给你打分，免费的。\n\n# 政治\n\n政治我复习的挺烂的，考试选择题我感觉蛮简单的，大题就直接抄材料，再自己改一改。我感觉这个写满基本也有个一半的分数。\n\n政治我一直就不是很重视，我大概10月底开始复习的政治，花了两三个礼拜把徐涛网课和核心考案看了一遍，然后做了1000题，做完1000题都11月底了。然后就是赶紧做肖8，选择题大概27，8到33-35分。做完肖8背了背肖8大题，基本没背下来，就是熟读....然后肖4到了，就做了做肖四选择题，这会大概稳定33分多，这会就是最后两个礼拜了，这段时间就每天晚上背肖4大题和看那个时政那本书，又一说一这玩意真难背。考前晚上我还拼命背肖四，结果背的全tm在材料，我也是服了。\n\n# Nil\n\n说实话考政治那天我感觉真的印象深刻。多年以后，面对考研分数的，某C总会想起那个呼号着凛冽寒风，忘带文具袋体温表的那个遥远的清晨。考研那两天气温很冷，我穿的也不多。东西还忘带了，我骑着电瓶车回宾馆拿我的体温登记表和文具袋，手冻的僵掉了都，呜呜呜真的好tm冷。那两天特别感恩考试学校对面那个卖早餐的，味道ok，价钱一般。主要是热的，直接温暖我的心好吧。我还记得我第一次去买，想买个面包啥的，后来看看有热包子，就买了热包子，那老板说了句热乎乎的吃了不比那冷面包舒服？心想确实，然后那两天早饭和中饭都吃得他家了。\n\n回想起来这一年（8-9个月）我的作息也没变好，和网上说的不太一样。。我从来没7点多，或者6点多就起来过...通常是8点多起来的，9点左右开学吧，暑假更是8，9点起来10，9点半点开学（那会每天2点多才睡，只能说那会嘉心糖会整活）看看视频睡觉，9月开学后意识到考研紧迫性，睡觉时间早了，基本1点前就睡了，早上有课起来上课，没课8点-8点半起吧，到自习室看看书，早上基本就看看英语了，做做英语了。下午数学，晚上专业课，或者下午专业课晚上数学。11月以后是早上做一套卷子，中午或者下午做数学卷子或者408，晚上政治英语。我这么瞎搞下来最后居然分数也还行。。我其实一开始以为大概也就330-350左右。可能是中考和高考的运气转移到现在了吧。\n\n我的文笔着实不堪，若有人能看到这，希望原谅我污染了您的眼镜QAQ。再次声明，不要学我，寄了我不管的。我的评价是不如看b站名师，知乎名师，人家或许至少还有客服可以投诉...\n\n若要问我啥啥啥跟谁，我只能说我球也不懂，非要说的话，数学可以跟何凯文，408跟科软皇帝fury，英语跟汤加风，政治跟张宇",contentRendered:'<h1 id="warning" tabindex="-1"><a class="header-anchor" href="#warning" aria-hidden="true">#</a> Warning</h1>\n<p>本文为流水账，不具有任何指导意义，任何因效仿本文而产生的负面影响与作者一概无关！</p>\n<p>我始终认为，成功的经验难以复制，考研路上不仅需要实力，运气在考研路上也占很大一部分，所以说<strong>选择大于努力</strong>。不过如果没有足够的实力，再好的选择和运气也是白搭。</p>\n<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1>\n<p>小老弟今年上岸某双非，考试科目11408，英语75政治76，数一112，408 130。写本文记录考研生活</p>\n<h1 id="数学" tabindex="-1"><a class="header-anchor" href="#数学" aria-hidden="true">#</a> 数学</h1>\n<p>数学可谓我之一生之敌，自初中以来，但凡大考从未如我所愿过一回。当然这应该是我太菜了。 我数学从3月开始正式开学，花费了很多时间。基本每天必看，时间2-5，6个小时。平均4个多小时。数学我基本上一直都在看书加做题，网课就看了概率论部分。我做了1800基础部分，做了之后感觉一般般就不做了，然后做了660，这本不错，可以一做，不过他的现代和概率论感觉有点简单，高数部分很不错。然后就是880，880很推荐，值得一做。然后买了1000题这个我感觉来不及做了就没做，不过我感觉应该比1800强一点吧，1800可以说是最垃圾的了...我问了一些人他们也一致同意hhhhh。</p>\n<p>然后就是做做真题，真题我就做了02-21的，太久远的也懒得做了。。真题我刷了两遍半吧，第二遍是想看看第一遍做完后错题啥的会做没，第2.5遍是12月份快考试模拟卷做不动了，就做做真题养生了。</p>\n<p>模拟卷之前我还做了李林的108，这个质量挺好的，我错了好多题\n模拟卷的话我做过李林6+4 22年的和21年的，这个110-130左右吧，感觉往年的不用咋做。。没啥提升。合工大五套超越卷做了17-22年的，这个是有点难的,,基本就100-110分左右,还有张宇的，我做了他去年的8+4还有今年的所谓过关版和啥啥版（忘了叫啥了）8+4，感觉今年张宇的偏简单了，没啥好做的后悔呜呜呜，，，，去年的8+4还OK。我感觉当年考根本不用去买以前的模拟卷做(或许是指张宇，md 36套感觉白做了)。。。合工大可以做做以前的吧。这个挺多人推荐的。数学多涉猎一些题应该还是有好处的。后面还做了李艳芳3套卷，这个真nm难。。。。。唉</p>\n<p>就这么瞎复习，就差不多到考试了，考试的时候我看错时间以为都过了一个小时了，我还才做到选择题第6个。。。就贼慌我日。。。然后就拼命做，做完填空题才发现看错时间，才过了1个小时多。。。。无语，后面就一直很慌，最后题最大似然我感觉也做的不太多，证明题做过的原题突然也不会了。。曲面积分感觉也算错了。。唉。不过最后还好有110来分....</p>\n<h1 id="计算机基础综合408" tabindex="-1"><a class="header-anchor" href="#计算机基础综合408" aria-hidden="true">#</a> 计算机基础综合408</h1>\n<p>这个我感觉我也是瞎学的。。我本科机电专业，学408也不算零基础吧，自己学过点。。。。然后我408也是嗯看书，嫌视频太墨迹了书也差不多能看懂，我是从计组-&gt;操作系统-&gt; 计网-&gt; 数据结构看的，一开始看计组第二章差点把我劝退....那个补码乘除法就直接给了算法，为什么，哪来的都不知道唉，把我给看懵了。后面看看书和看看视频也算是弄懂了。。。之后基本就没啥值得说的，就一路平推。 然后推完发现我计组啥的都忘光了，就又推了一遍+做大题，之后又看了看书+看选择题，完了之后就真题了，发现真题也不难，因为王道书上基本都做过。。。真题完了一遍看了看研芝士的选择题花了半月，那个质量感觉一般般，有点垃圾（他的模拟卷也贼垃圾，用了都说垃圾）再然后9月多了，开学了408书不想看了就又做了遍真题</p>\n<p>做完发现大纲加了好多，然后看了看改的啥的。发现不咋会就等王道更新了。。。后面12月初差不多才都更新好吧，那会把这些都看了看。10，11就是做做模拟卷，看看书，11月，12月基本复习时间减少了好多，分给英语和政治了。最后几周就看看新考点，做做真题养养老了。</p>\n<p>这门考完是我感觉最好的了吧。就感觉题目挺常规的。尤其这是在上午考完数学。。整个人都不好了之后。那天感觉也很平常。也没有特别开心，我意识到这或许又是一个重大转折点吧。</p>\n<h1 id="英语" tabindex="-1"><a class="header-anchor" href="#英语" aria-hidden="true">#</a> 英语</h1>\n<p>我英语一直不太好，小学以来就不喜欢英语，也不太会，一直学的也是哑巴英语，所幸考研没有听力。英语我到暑假前都只有背背单词啥的。那会每天还有课又要学专业课又要学数学，也没啥空。7月开始我每天还做做一张真题卷子的阅读题。每天一张，7-8月做了两遍差不多，当然仅限阅读部分。。。。。一开始错的贼多，一般7，8，9个有几张难的甚至10，12个。后面做的多了可能题都背下来了就基本6，7个了，有时5个以内。我后面10月。11月的时候在做基本就2-4个了，那会是真的都背下来了。。。。。感觉这个正确率也没啥参考性。阅读做了做后，我也开始做做完型，新题型之类的，后面完型差不多错8个，新题型看运气，好的时候全对，不好的时候错3个。翻译。我练的少，考试的时候感觉做的都错了。</p>\n<p>作文的话我10月底开始背作文，刚开始每天1篇小作文，后来感觉太慢了就一天两篇小作文加默写...后面就是一天一片大作文，+默写，再一天两篇大作文+默写。。都背完了之后就每天默默。。那本粉色的书上的看图写画我都全背了然后默一默啥的。作文这东西我感觉就是多背多默多写，我都背了默了之后还会抽空自己写一写，按一种类型写一篇吧，感觉每天学英语时间太少了。。也没写很多。写完了可以用那个小冰批改作文啥的，可以看看有没有语法错误啥的。。他还可以给你打分，免费的。</p>\n<h1 id="政治" tabindex="-1"><a class="header-anchor" href="#政治" aria-hidden="true">#</a> 政治</h1>\n<p>政治我复习的挺烂的，考试选择题我感觉蛮简单的，大题就直接抄材料，再自己改一改。我感觉这个写满基本也有个一半的分数。</p>\n<p>政治我一直就不是很重视，我大概10月底开始复习的政治，花了两三个礼拜把徐涛网课和核心考案看了一遍，然后做了1000题，做完1000题都11月底了。然后就是赶紧做肖8，选择题大概27，8到33-35分。做完肖8背了背肖8大题，基本没背下来，就是熟读....然后肖4到了，就做了做肖四选择题，这会大概稳定33分多，这会就是最后两个礼拜了，这段时间就每天晚上背肖4大题和看那个时政那本书，又一说一这玩意真难背。考前晚上我还拼命背肖四，结果背的全tm在材料，我也是服了。</p>\n<h1 id="nil" tabindex="-1"><a class="header-anchor" href="#nil" aria-hidden="true">#</a> Nil</h1>\n<p>说实话考政治那天我感觉真的印象深刻。多年以后，面对考研分数的，某C总会想起那个呼号着凛冽寒风，忘带文具袋体温表的那个遥远的清晨。考研那两天气温很冷，我穿的也不多。东西还忘带了，我骑着电瓶车回宾馆拿我的体温登记表和文具袋，手冻的僵掉了都，呜呜呜真的好tm冷。那两天特别感恩考试学校对面那个卖早餐的，味道ok，价钱一般。主要是热的，直接温暖我的心好吧。我还记得我第一次去买，想买个面包啥的，后来看看有热包子，就买了热包子，那老板说了句热乎乎的吃了不比那冷面包舒服？心想确实，然后那两天早饭和中饭都吃得他家了。</p>\n<p>回想起来这一年（8-9个月）我的作息也没变好，和网上说的不太一样。。我从来没7点多，或者6点多就起来过...通常是8点多起来的，9点左右开学吧，暑假更是8，9点起来10，9点半点开学（那会每天2点多才睡，只能说那会嘉心糖会整活）看看视频睡觉，9月开学后意识到考研紧迫性，睡觉时间早了，基本1点前就睡了，早上有课起来上课，没课8点-8点半起吧，到自习室看看书，早上基本就看看英语了，做做英语了。下午数学，晚上专业课，或者下午专业课晚上数学。11月以后是早上做一套卷子，中午或者下午做数学卷子或者408，晚上政治英语。我这么瞎搞下来最后居然分数也还行。。我其实一开始以为大概也就330-350左右。可能是中考和高考的运气转移到现在了吧。</p>\n<p>我的文笔着实不堪，若有人能看到这，希望原谅我污染了您的眼镜QAQ。再次声明，不要学我，寄了我不管的。我的评价是不如看b站名师，知乎名师，人家或许至少还有客服可以投诉...</p>\n<p>若要问我啥啥啥跟谁，我只能说我球也不懂，非要说的话，数学可以跟何凯文，408跟科软皇帝fury，英语跟汤加风，政治跟张宇</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/考研记录.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"考研记录",filePath:"/Users/jck/caicai_blog/docs/record/考研记录.md",filePathRelative:"record/考研记录.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/考研记录.html.vue",componentFilePathRelative:"pages/record/考研记录.html.vue",componentFileChunkName:"v-47e6875f",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/考研记录.html.js",dataFilePathRelative:"pages/record/考研记录.html.js",dataFileChunkName:"v-47e6875f",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/考研记录.html",htmlFilePathRelative:"record/考研记录.html"},{data:{key:"v-5aacfb4f",path:"/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",title:"记一次leetcode周赛.md",lang:"zh-CN",frontmatter:{title:"记一次leetcode周赛.md",date:"2021/01/17 18:15",tags:["leetcode"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"记这周的周赛题",slug:"记这周的周赛题",children:[]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"1.可以形成最大正发行的矩形数目",slug:"_1-可以形成最大正发行的矩形数目",children:[]},{level:3,title:"2.同积元组",slug:"_2-同积元组",children:[]},{level:3,title:"3重新排列后的最大子矩阵",slug:"_3重新排列后的最大子矩阵",children:[]},{level:3,title:"4.猫和老鼠||",slug:"_4-猫和老鼠",children:[]}]}],git:{}},key:"v-5aacfb4f",path:"/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",title:"记一次leetcode周赛.md",lang:"zh-CN",frontmatter:{title:"记一次leetcode周赛.md",date:"2021/01/17 18:15",tags:["leetcode"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"记这周的周赛题",slug:"记这周的周赛题",children:[]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"1.可以形成最大正发行的矩形数目",slug:"_1-可以形成最大正发行的矩形数目",children:[]},{level:3,title:"2.同积元组",slug:"_2-同积元组",children:[]},{level:3,title:"3重新排列后的最大子矩阵",slug:"_3重新排列后的最大子矩阵",children:[]},{level:3,title:"4.猫和老鼠||",slug:"_4-猫和老鼠",children:[]}]}],content:"\n## 记这周的周赛题\n\n## 前言\n\n这周周赛题目前1，2，3题还是很简单的，第四个比较难。在这里贴上我对于1，2，3题目的做法。第四个题目为复制零神的题解，以此参考学习。\n\n### 1.可以形成最大正发行的矩形数目\n\n题目：给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。如果存在 k 同时满足 k <= li 和 k <= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。返回可以切出边长为 maxLen 的正方形的矩形 数目 。\n\n​\t这是一道很简单的签到题\n\n​\t显然每一个2维数组的较小的那个就是他能行成的最大的正方形的边\n\n```cpp\nclass Solution {\npublic:\n    int countGoodRectangles(vector<vector<int>>& rec) {\n        int len=rec.size();\n        map<int,int> a;\n        int mm=0;\n        for(int i=0;i<len;i++){\n            int k=min(rec[i][0],rec[i][1]);\n            a[k]++;\n            if(k>mm) mm=k;\n        }\n        return a[mm];\n    }\n};\n```\n\n### 2.同积元组\n\n题目描述：给你一个由 不同 正整数组成的数组 nums ，请你返回满足 a * b = c * d 的元组 (a, b, c, d) 的数量。其中 a、b、c 和 d 都是 nums 中的元素，且 a != b != c != d 。\n\n​\t观察他给的案例，可以发现每一个满足条件的a,b,c,d可以有八种组合。因此只要找出有多少对满足条件的a,b,c,d记为ans，那么ans*8就是最后的答案；\n\n那么如何计算ans的值，我们可以开一个map，记下每两个的乘积，如果一个乘积出现了两次或两次以上，则说明有多的数可以组成a*b=c*d，而我们只要选出2组就可以满足a* b=c*  d  根据组合数公式  \n$$\nC_n^2 = \\frac{(n-1)n}{2}\n$$\n然后ans+=C_n^2 即可\n\n```cpp\nclass Solution {\npublic:\n    \n    int tupleSameProduct(vector<int>& nums) {\n        int ans=0;\n        int len=nums.size();\n        map<int,int> a;\n        for(int i=0;i<len;i++){\n            for(int j=i+1;j<len;j++){\n                if(i==j) continue;\n                a[nums[i]*nums[j]]++;\n            }\n        }\n        for(auto &[sum,k]:a){\n         \tans+=(k*(k-1))/2;\n        }\n        return (ans)*8;\n    }\n};\n```\n\n### 3重新排列后的最大子矩阵\n\n题目描述：给你一个二进制矩阵 matrix ，它的大小为 m x n ，你可以将 matrix 中的 列 按任意顺序重新排列。\n\n请你返回最优方案下将 matrix 重新排列后，全是 1 的子矩阵面积。\n\n示例：\n\n![image-20210117183913440](https://i.loli.net/2021/01/17/6yoAWg8qjS1h2Ir.png)\n\n我们可以先用一个数组 a[i][j]表示到第i行，第j列上，连续的为1的矩形块，然后再对它进行排序，然后计算出最大值\n\n代码如下：\n\n```cpp\nclass Solution {\npublic:\n    int largestSubmatrix(vector<vector<int>>& matrix) {\n        int m=matrix.size();\n        int n=matrix[0].size();\n        for(int i=1;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(matrix[i][j]==1){\n                    matrix[i][j]+=matrix[i-1][j];\n                }\n            }\n        }\n        int ans=0;\n        for(int i=0;i<m;i++){\n            sort(matrix[i].begin(),matrix[i].end(),[](int x,int y){return x>y;});\n            for(int j=0;j<n;j++){\n                ans=max(ans,(j+1)*matrix[i][j]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n### 4.猫和老鼠||\n\n很难，我做不来，下面是copy的零神的题解\n\n前言\n首先我们需要明确「必胜态」和「必败态」的概念：\n\n一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。这里相邻的状态的定义为：在当前状态中进行决策的玩家可以到达的所有状态。也就是说，玩家可以选择移动到一个「必败态」，使得对手必败，因此当前状态是必胜的。\n\n一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。这里的道理是类似的，如果所有相邻状态都是「必胜态」，那么对手必胜，当前玩家必败。\n\n在本题中，我们可以用(c_x,c_y,m_x,m_y,op) 表示一个状态，其中 (c_x, c_y)表示猫的位置,(m x,m y) 表示老鼠的位置，op 表示当前玩家是猫（op=1）还是老鼠（op=0）。\n\n如果我们把每个状态抽象成图中的一个节点，状态A 可以到达状态B 就在它们对应的节点之间连接一条有向边，那么我们就可以使用动态规划或者记忆化搜索计算出所有状态是「必胜态」还是「必败态」。然而我们注意到，由于猫和老鼠都是根据规则任意进行移动的，甚至它们可以不进行移动，因此这个图实际上是存在环的。举一个很简单的例子，如果猫和老鼠在它们的轮次中都不进行移动，那么状态 A 可以到达状态 A (猫不移动），而状态A 也可以到达状态 A （老鼠不移动），这样 A 是否为「必胜态」依赖于其本身，我们就没法计算这些状态了。\n\n然而题目中给出了一个提示：「如果老鼠不能在 10001000 次操作以内到达食物，那么猫获胜」，这使得我们可以在状态中加入一个维度，即 (c_x, c_y, m_x, m_y,op,step) ，其中 step 表示老鼠进行的操作次数。这样一来，整个图中就不存在环了，也就是图存在一个拓扑排序，我们就可以计算出所有状态了。实际上，老鼠的操作次数最多也就是 $ 8\\times8=64 $ 次，因为老鼠不进行移动或者移动到之前到过的地方，都是没有意义的。\n\n上面的做法已经可以通过本题，例如 【记忆化搜索】思路简单，比较暴力\n题解中就使用了这种方法。这里我们给出一种时间复杂度更优的做法，可以忽略 \\textit{step}step 维度，直接在存在环的原图上进行一种特殊的「拓扑排序」并得到答案。\n\n方法一：拓扑排序\n思路与算法\n\n虽然图中的每个节点都至少在一个环中，我们无法计算出任意一个节点的状态，但我们是预先知道某些状态是「必胜态」还是「必败态」的，也就是游戏结束判定的前三条：\n\n如果猫跟老鼠处在相同的位置，那么猫获胜；\n\n如果猫先到达食物，那么猫获胜；\n\n如果老鼠先到达食物，那么老鼠获胜。\n\n这些判定情况对应的所有状态都可以预先计算出，那么接下来就很好办了，我们可以反过来考虑「必胜态」和「必败态」的计算条件：\n\n一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。因此，如果一个状态是「必败态」，那么其相邻的所有状态都是「必胜态」。因此我们可以从预先计算出的所有「必败态」开始进行广度优先搜索，它们相邻的所有状态都是「必胜态」；\n\n一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。因此，如果一个状态是「必胜态」，那么我们可以将其相邻的所有状态的入度都减少 11。如果某个状态的入度减少到了 00 并且它还没有被计算过，那么说明其相邻的所有状态都是「必胜态」，那么它就是「必败态」。\n\n因此我们只需要预处理出所有状态的入度，并且计算出所有与游戏结束相关的状态，随后进行广度优先搜索即可。由于图中存在环，因此并不是每个状态都能够确定其是「必胜态」还是「必败态」，那些状态实际上就是猫和老鼠陷入了循环，那么根据规则判定猫获胜。\n\n流程\n\n算法的流程如下：\n\n预处理出所有状态的入度；\n\n预处理出所有已经确定的游戏结束状态是「必胜态」还是「必败态」，并把它们放入队列中；\n\n依次从队列中取出状态，如果该状态是「必败态」，那么将所有其相邻且未计算的状态变为「必胜态」，并全部放入队列中；如果该状态是「必胜态」，那么将所有其相邻且未计算的状态的入度减少 11，如果某个相邻的状态入度减少为 00，那么就将其状态变为「必败态」，并放入队列中。\n\n在广度优先搜索结束后，如果初始状态如果为「必败态」或者未计算过，那么猫获胜，否则老鼠获胜。\n\n代码\n``` cpp\nclass Solution {\nprivate:\n    // f[cat_x][cat_y][mouse_x][mouse_y][is_cat_round] = 如果当前玩家必胜那么为 1，否则为 -1\n    int f[8][8][8][8][2];\n    // 统计每个状态的入度，用于拓扑排序\n    int degree[8][8][8][8][2];\n\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\npublic:\n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        auto findPosition = [&](char c) -> pair<int, int> {\n            for (int i = 0; i < m; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (grid[i][j] == c) {\n                        return {i, j};\n                    }\n                }\n            }\n            return {-1, -1};\n        };\n    \n        auto getNeighbors = [&](int x, int y, int bound) -> vector<pair<int, int>> {\n            vector<pair<int, int>> ret = {{x, y}};\n            for (int d = 0; d < 4; ++d) {\n                int xx = x, yy = y;\n                for (int _ = 1; _ <= bound; ++_) {\n                    xx += dirs[d][0];\n                    yy += dirs[d][1];\n                    if (xx < 0 || xx >= m || yy < 0 || yy >= n || grid[xx][yy] == '#') {\n                        break;\n                    }\n                    ret.emplace_back(xx, yy);\n                }\n            }\n            return ret;\n        };\n    \n        auto [cx, cy] = findPosition('C');\n        auto [mx, my] = findPosition('M');\n        auto [fx, fy] = findPosition('F');\n    \n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#') {\n                    for (int k = 0; k < m; ++k) {\n                        for (int l = 0; l < n; ++l) {\n                            if (grid[k][l] != '#') {\n                                degree[i][j][k][l][0] = getNeighbors(i, j, catJump).size();\n                                degree[i][j][k][l][1] = getNeighbors(k, l, mouseJump).size();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n        memset(f, 0, sizeof(f));\n        queue<tuple<int, int, int, int, int>> q;\n    \n        // 猫和老鼠重合\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#' && grid[i][j] != 'F') {\n                    f[i][j][i][j][0] = 1;\n                    f[i][j][i][j][1] = -1;\n                    q.emplace(i, j, i, j, 0);\n                    q.emplace(i, j, i, j, 1);\n                }\n            }\n        }\n    \n        // 猫 or 老鼠到达食物\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#' && grid[i][j] != 'F') {\n                    f[fx][fy][i][j][1] = -1;\n                    f[i][j][fx][fy][0] = -1;\n                    q.emplace(fx, fy, i, j, 1);\n                    q.emplace(i, j, fx, fy, 0);\n                }\n            }\n        }\n    \n        while (!q.empty()) {\n            auto [catx, caty, mousex, mousey, op] = q.front();\n            q.pop();\n            if (op == 0) {\n                vector<pair<int, int>> neighbors = getNeighbors(mousex, mousey, mouseJump);\n                for (auto [x, y]: neighbors) {\n                    --degree[catx][caty][x][y][op ^ 1];\n                    if (!f[catx][caty][x][y][op ^ 1]) {\n                        if (f[catx][caty][mousex][mousey][op] == -1) {\n                            f[catx][caty][x][y][op ^ 1] = 1;\n                            q.emplace(catx, caty, x, y, op ^ 1);\n                        }\n                        else if (degree[catx][caty][x][y][op ^ 1] == 0) {\n                            f[catx][caty][x][y][op ^ 1] = -1;\n                            q.emplace(catx, caty, x, y, op ^ 1);\n                        }\n                    }\n                }\n            }\n            else {\n                vector<pair<int, int>> neighbors = getNeighbors(catx, caty, catJump);\n                for (auto [x, y]: neighbors) {\n                    --degree[x][y][mousex][mousey][op ^ 1];\n                    if (!f[x][y][mousex][mousey][op ^ 1]) { \n                        if (f[catx][caty][mousex][mousey][op] == -1) {\n                            f[x][y][mousex][mousey][op ^ 1] = 1;\n                            q.emplace(x, y, mousex, mousey, op ^ 1);\n                        }\n                        else if (degree[x][y][mousex][mousey][op ^ 1] == 0) {\n                            f[x][y][mousex][mousey][op ^ 1] = -1;\n                            q.emplace(x, y, mousex, mousey, op ^ 1);\n                        }\n                    }\n                }\n            }\n        }\n    \n        return f[cx][cy][mx][my][1] == 1;\n    }\n};\n```\n\n\n\n复杂度分析\n\n时间复杂度：O(m^2n^2(m+n))其中 m 和 n 分别是方格的行数和列数。\n\n空间复杂度：O(m^2n^2)O(m2n2)\n",contentRendered:'<h2 id="记这周的周赛题" tabindex="-1"><a class="header-anchor" href="#记这周的周赛题" aria-hidden="true">#</a> 记这周的周赛题</h2>\n<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2>\n<p>这周周赛题目前1，2，3题还是很简单的，第四个比较难。在这里贴上我对于1，2，3题目的做法。第四个题目为复制零神的题解，以此参考学习。</p>\n<h3 id="_1-可以形成最大正发行的矩形数目" tabindex="-1"><a class="header-anchor" href="#_1-可以形成最大正发行的矩形数目" aria-hidden="true">#</a> 1.可以形成最大正发行的矩形数目</h3>\n<p>题目：给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。如果存在 k 同时满足 k &lt;= li 和 k &lt;= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。返回可以切出边长为 maxLen 的正方形的矩形 数目 。</p>\n<p>​\t这是一道很简单的签到题</p>\n<p>​\t显然每一个2维数组的较小的那个就是他能行成的最大的正方形的边</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> <span class="token function">countGoodRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> len<span class="token operator">=</span>rec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>rec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>mm<span class="token punctuation">)</span> mm<span class="token operator">=</span>k<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-同积元组" tabindex="-1"><a class="header-anchor" href="#_2-同积元组" aria-hidden="true">#</a> 2.同积元组</h3>\n<p>题目描述：给你一个由 不同 正整数组成的数组 nums ，请你返回满足 a * b = c * d 的元组 (a, b, c, d) 的数量。其中 a、b、c 和 d 都是 nums 中的元素，且 a != b != c != d 。</p>\n<p>​\t观察他给的案例，可以发现每一个满足条件的a,b,c,d可以有八种组合。因此只要找出有多少对满足条件的a,b,c,d记为ans，那么ans*8就是最后的答案；</p>\n<p>那么如何计算ans的值，我们可以开一个map，记下每两个的乘积，如果一个乘积出现了两次或两次以上，则说明有多的数可以组成a<em>b=c</em>d，而我们只要选出2组就可以满足a* b=c*  d  根据组合数公式<br>\n$$\nC_n^2 = \\frac{(n-1)n}{2}\n$$\n然后ans+=C_n^2 即可</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    \n    <span class="token keyword">int</span> <span class="token function">tupleSameProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                a<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         \tans<span class="token operator">+=</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3重新排列后的最大子矩阵" tabindex="-1"><a class="header-anchor" href="#_3重新排列后的最大子矩阵" aria-hidden="true">#</a> 3重新排列后的最大子矩阵</h3>\n<p>题目描述：给你一个二进制矩阵 matrix ，它的大小为 m x n ，你可以将 matrix 中的 列 按任意顺序重新排列。</p>\n<p>请你返回最优方案下将 matrix 重新排列后，全是 1 的子矩阵面积。</p>\n<p>示例：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210117183913440" originSrc="https://i.loli.net/2021/01/17/6yoAWg8qjS1h2Ir.png" data="aurora"></p>\n<p>我们可以先用一个数组 a[i][j]表示到第i行，第j列上，连续的为1的矩形块，然后再对它进行排序，然后计算出最大值</p>\n<p>代码如下：</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> <span class="token function">largestSubmatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">sort</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_4-猫和老鼠" tabindex="-1"><a class="header-anchor" href="#_4-猫和老鼠" aria-hidden="true">#</a> 4.猫和老鼠||</h3>\n<p>很难，我做不来，下面是copy的零神的题解</p>\n<p>前言\n首先我们需要明确「必胜态」和「必败态」的概念：</p>\n<p>一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。这里相邻的状态的定义为：在当前状态中进行决策的玩家可以到达的所有状态。也就是说，玩家可以选择移动到一个「必败态」，使得对手必败，因此当前状态是必胜的。</p>\n<p>一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。这里的道理是类似的，如果所有相邻状态都是「必胜态」，那么对手必胜，当前玩家必败。</p>\n<p>在本题中，我们可以用(c_x,c_y,m_x,m_y,op) 表示一个状态，其中 (c_x, c_y)表示猫的位置,(m x,m y) 表示老鼠的位置，op 表示当前玩家是猫（op=1）还是老鼠（op=0）。</p>\n<p>如果我们把每个状态抽象成图中的一个节点，状态A 可以到达状态B 就在它们对应的节点之间连接一条有向边，那么我们就可以使用动态规划或者记忆化搜索计算出所有状态是「必胜态」还是「必败态」。然而我们注意到，由于猫和老鼠都是根据规则任意进行移动的，甚至它们可以不进行移动，因此这个图实际上是存在环的。举一个很简单的例子，如果猫和老鼠在它们的轮次中都不进行移动，那么状态 A 可以到达状态 A (猫不移动），而状态A 也可以到达状态 A （老鼠不移动），这样 A 是否为「必胜态」依赖于其本身，我们就没法计算这些状态了。</p>\n<p>然而题目中给出了一个提示：「如果老鼠不能在 10001000 次操作以内到达食物，那么猫获胜」，这使得我们可以在状态中加入一个维度，即 (c_x, c_y, m_x, m_y,op,step) ，其中 step 表示老鼠进行的操作次数。这样一来，整个图中就不存在环了，也就是图存在一个拓扑排序，我们就可以计算出所有状态了。实际上，老鼠的操作次数最多也就是 $ 8\\times8=64 $ 次，因为老鼠不进行移动或者移动到之前到过的地方，都是没有意义的。</p>\n<p>上面的做法已经可以通过本题，例如 【记忆化搜索】思路简单，比较暴力\n题解中就使用了这种方法。这里我们给出一种时间复杂度更优的做法，可以忽略 \\textit{step}step 维度，直接在存在环的原图上进行一种特殊的「拓扑排序」并得到答案。</p>\n<p>方法一：拓扑排序\n思路与算法</p>\n<p>虽然图中的每个节点都至少在一个环中，我们无法计算出任意一个节点的状态，但我们是预先知道某些状态是「必胜态」还是「必败态」的，也就是游戏结束判定的前三条：</p>\n<p>如果猫跟老鼠处在相同的位置，那么猫获胜；</p>\n<p>如果猫先到达食物，那么猫获胜；</p>\n<p>如果老鼠先到达食物，那么老鼠获胜。</p>\n<p>这些判定情况对应的所有状态都可以预先计算出，那么接下来就很好办了，我们可以反过来考虑「必胜态」和「必败态」的计算条件：</p>\n<p>一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。因此，如果一个状态是「必败态」，那么其相邻的所有状态都是「必胜态」。因此我们可以从预先计算出的所有「必败态」开始进行广度优先搜索，它们相邻的所有状态都是「必胜态」；</p>\n<p>一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。因此，如果一个状态是「必胜态」，那么我们可以将其相邻的所有状态的入度都减少 11。如果某个状态的入度减少到了 00 并且它还没有被计算过，那么说明其相邻的所有状态都是「必胜态」，那么它就是「必败态」。</p>\n<p>因此我们只需要预处理出所有状态的入度，并且计算出所有与游戏结束相关的状态，随后进行广度优先搜索即可。由于图中存在环，因此并不是每个状态都能够确定其是「必胜态」还是「必败态」，那些状态实际上就是猫和老鼠陷入了循环，那么根据规则判定猫获胜。</p>\n<p>流程</p>\n<p>算法的流程如下：</p>\n<p>预处理出所有状态的入度；</p>\n<p>预处理出所有已经确定的游戏结束状态是「必胜态」还是「必败态」，并把它们放入队列中；</p>\n<p>依次从队列中取出状态，如果该状态是「必败态」，那么将所有其相邻且未计算的状态变为「必胜态」，并全部放入队列中；如果该状态是「必胜态」，那么将所有其相邻且未计算的状态的入度减少 11，如果某个相邻的状态入度减少为 00，那么就将其状态变为「必败态」，并放入队列中。</p>\n<p>在广度优先搜索结束后，如果初始状态如果为「必败态」或者未计算过，那么猫获胜，否则老鼠获胜。</p>\n<p>代码</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token comment">// f[cat_x][cat_y][mouse_x][mouse_y][is_cat_round] = 如果当前玩家必胜那么为 1，否则为 -1</span>\n    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 统计每个状态的入度，用于拓扑排序</span>\n    <span class="token keyword">int</span> degree<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> dirs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">bool</span> <span class="token function">canMouseWin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> catJump<span class="token punctuation">,</span> <span class="token keyword">int</span> mouseJump<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">auto</span> findPosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">-></span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">auto</span> getNeighbors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token operator">-></span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token punctuation">{</span>\n            vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> xx <span class="token operator">=</span> x<span class="token punctuation">,</span> yy <span class="token operator">=</span> y<span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> _ <span class="token operator">&lt;=</span> bound<span class="token punctuation">;</span> <span class="token operator">++</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    xx <span class="token operator">+=</span> dirs<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    yy <span class="token operator">+=</span> dirs<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> xx <span class="token operator">>=</span> m <span class="token operator">||</span> yy <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> yy <span class="token operator">>=</span> n <span class="token operator">||</span> grid<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'C\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>mx<span class="token punctuation">,</span> my<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'M\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>fx<span class="token punctuation">,</span> fy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'F\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        queue<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>\n    \n        <span class="token comment">// 猫和老鼠重合</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'F\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token comment">// 猫 or 老鼠到达食物</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'F\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    f<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span> fy<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> fx<span class="token punctuation">,</span> fy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">auto</span> <span class="token punctuation">[</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> neighbors <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token operator">--</span>degree<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> neighbors <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token operator">--</span>degree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token keyword">return</span> f<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cy<span class="token punctuation">]</span><span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br></div></div><p>复杂度分析</p>\n<p>时间复杂度：O(m^2n^2(m+n))其中 m 和 n 分别是方格的行数和列数。</p>\n<p>空间复杂度：O(m^2n^2)O(m2n2)</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/记一次leetcode周赛-md.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"记一次leetcode周赛-md",filePath:"/Users/jck/caicai_blog/docs/record/记一次leetcode周赛-md.md",filePathRelative:"record/记一次leetcode周赛-md.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/记一次leetcode周赛-md.html.vue",componentFilePathRelative:"pages/record/记一次leetcode周赛-md.html.vue",componentFileChunkName:"v-5aacfb4f",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/记一次leetcode周赛-md.html.js",dataFilePathRelative:"pages/record/记一次leetcode周赛-md.html.js",dataFileChunkName:"v-5aacfb4f",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/记一次leetcode周赛-md.html",htmlFilePathRelative:"record/记一次leetcode周赛-md.html"},{data:{key:"v-5a0eaa76",path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",title:"连通分量",lang:"zh-CN",frontmatter:{title:"连通分量",date:"2021/01/11 23:56",tags:["图论"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],git:{}},key:"v-5a0eaa76",path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",title:"连通分量",lang:"zh-CN",frontmatter:{title:"连通分量",date:"2021/01/11 23:56",tags:["图论"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],content:'\n\n# 连通分量\n## 定义\n\n强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。\n\n强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图。\n\n## tarjan 算法\n\n### dfs生成树\n\n在介绍该算法之前，先来了解 DFS 生成树 ，我们以下面的有向图为例：\n\n![image-20210116003201385](https://kasoushu-picture-1300449754.cos.ap-shanghai.myqcloud.com/pic/image-20210116003201385.png)\n\n有向图的 DFS 生成树主要有 4 种边（不一定全部出现）：\n\n1. 树边（tree edge）：绿色边，每次搜索找到一个还没有访问过的结点的时候就形成了一条树边。\n2. 反祖边（back edge）：黄色边，也被叫做回边，即指向祖先结点的边。\n3. 横叉边（cross edge）：红色边，它主要是在搜索的时候遇到了一个已经访问过的结点，但是这个结点 **并不是** 当前结点的祖先时形成的。\n4. 前向边（forward edge）：蓝色边，它是在搜索的时候遇到子树中的结点的时候形成的。\n\n---\n\n我们考虑 DFS 生成树与强连通分量之间的关系。\n\n如果结点  是某个强连通分量在搜索树中遇到的第一个结点，那么这个强连通分量的其余结点肯定是在搜索树中以  为根的子树中。  被称为这个强连通分量的根。\n\n反证法：假设有个结点  在该强连通分量中但是不在以  为根的子树中，那么  到  的路径中肯定有一条离开子树的边。但是这样的边只可能是横叉边或者反祖边，然而这两条边都要求指向的结点已经被访问过了，这就和  是第一个访问的结点矛盾了。得证。\n\n### tarjan算法求强连通分量\n\n在 Tarjan 算法中为每个结点  维护了以下几个变量：\n\n1. ：深度优先搜索遍历时结点  被搜索的次序。\n2. ：设以  为根的子树为  。  定义为以下结点的  的最小值：  中的结点；从  通过一条不在搜索树上的边能到达的结点。\n\n一个结点的子树内结点的 dfn 都大于该结点的 dfn。\n\n从根开始的一条路径上的 dfn 严格递增，low 严格非降。\n\n按照深度优先搜索算法搜索的次序对图中所有的结点进行搜索。在搜索过程中，对于结点  和与其相邻的结点  （v 不是 u 的父节点）考虑 3 种情况：\n\n1. 未被访问：继续对  进行深度搜索。在回溯过程中，用  更新  。因为存在从  到  的直接路径，所以  能够回溯到的已经在栈中的结点，  也一定能够回溯到。\n2. 被访问过，已经在栈中：即已经被访问过，根据  值的定义（能够回溯到的最早的已经在栈中的结点），则用  更新  。\n3. 被访问过，已不在在栈中：说明  已搜索完毕，其所在连通分量已被处理，所以不用对其做操作。\n\n代码如下：\n\n```cpp\nint dfn[N], low[N], dfncnt, s[N], in_stack[N], tp;\nint scc[N], sc;  // 结点 i 所在 scc 的编号\nint sz[N];       // 强连通 i 的大小\nvoid tarjan(int u) {\n  low[u] = dfn[u] = ++dfncnt, s[++tp] = u, in_stack[u] = 1;\n  for (int i = h[u]; i; i = e[i].nex) {\n    const int &v = e[i].t;\n    if (!dfn[v]) {\n      tarjan(v);\n      low[u] = min(low[u], low[v]); \n    } else if (in_stack[v]) {\n      low[u] = min(low[u], dfn[v]); \n    }\n  }\n  if (dfn[u] == low[u]) {\n    ++sc;  //强连通分量数加1\n    while (s[tp] != u) {\n      scc[s[tp]] = sc;  //将某个点v属于第sc个连通分量\n      sz[sc]++;  // sc这个连通分量的点的个数加1\n      in_stack[s[tp]] = 0; //让v这个点不在栈中\n      --tp; //栈顶减一\n    }\n    scc[s[tp]] = sc;  //同上\n    sz[sc]++;\n    in_stack[s[tp]] = 0;\n    --tp;\n  }\n}\n```\n\n> [https://www.cnblogs.com/shadowland/p/5872257.html](https://www.cnblogs.com/shadowland/p/5872257.html) 一个比较好的tarjan算法详解\n\n## Kosaraju 算法\n\nKosaraju 算法依靠两次简单的 DFS 实现。\n\n第一次 DFS，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯之前给顶点编号，也就是后序遍历。\n\n第二次 DFS，对于反向后的图，以标号最大的顶点作为起点开始 DFS。这样遍历到的顶点集合就是一个强连通分量。对于所有未访问过的结点，选取标号最大的，重复上述过程。\n\n两次 DFS 结束后，强连通分量就找出来了，Kosaraju 算法的时间复杂度为 (V+E)。邻接矩阵为（V^2);\n\n代码如下\n\n```cpp\n// g 是原图，g2 是反图\n// color数组统计每个点属于哪个连通分量，s为栈,栈顶将最大的标记\nvoid dfs1(int u) {\n  vis[u] = true;\n  for (int v : g[u])\n    if (!vis[v]) dfs1(v);\n  s.push_back(u);\n}\n\nvoid dfs2(int u) {\n  color[u] = sccCnt;\n  for (int v : g2[u])\n    if (!color[v]) dfs2(v);\n}\n//kosaraju 算法是先进行第一次dfs，然后第二次dfs从栈中取出最大的没有被遍历的元素进行遍历。\n//第二次dfs是对g的逆图g^T进行遍历\nvoid kosaraju() {\n  sccCnt = 0;\n  for (int i = 1; i <= n; ++i)\n    if (!vis[i]) dfs1(i);\n  for (int i = n; i >= 1; --i)\n    if (!color[s[i]]) {\n      ++sccCnt;\n      dfs2(s[i]);\n    }\n}\n```\n\n## Garbow 算法\n\nGarbow 算法是 Tarjan 算法的另一种实现，Tarjan 算法是用 dfn 和 low 来计算强连通分量的根，Garbow 维护一个节点栈，并用第二个栈来确定何时从第一个栈中弹出属于同一个强连通分量的节点。从节点  开始的 DFS 过程中，当一条路径显示这组节点都属于同一个强连通分量时，只要栈顶节点的访问时间大于根节点  的访问时间，就从第二个栈中弹出这个节点，那么最后只留下根节点  。在这个过程中每一个被弹出的节点都属于同一个强连通分量。\n\n当回溯到某一个节点  时，如果这个节点在第二个栈的顶部，就说明这个节点是强连通分量的起始节点，在这个节点之后搜索到的那些节点都属于同一个强连通分量，于是从第一个栈中弹出那些节点，构成强连通分量。\n\n```cpp\nint garbow(int u) {\n  stack1[++p1] = u;\n  stack2[++p2] = u;\n  low[u] = ++dfs_clock;\n  for (int i = head[u]; i; i = e[i].next) {\n    int v = e[i].to;\n    if (!low[v])\n      garbow(v);\n    else if (!sccno[v])\n      while (low[stack2[p2]] > low[v]) p2--;\n  }\n  if (stack2[p2] == u) {\n    p2--;\n    scc_cnt++;\n    do {\n      sccno[stack1[p1]] = scc_cnt;\n      // all_scc[scc_cnt] ++;\n    } while (stack1[p1--] != u);\n  }\n  return 0;\n}\n\nvoid find_scc(int n) {\n  dfs_clock = scc_cnt = 0;\n  p1 = p2 = 0;\n  memset(sccno, 0, sizeof(sccno));\n  memset(low, 0, sizeof(low));\n  for (int i = 1; i <= n; i++)\n    if (!low[i]) garbow(i);\n}\n```\n\n# 缩点\n\n将一个强连通分量看作一个点，可以由此建立新图，或进行其他操作\n\n# 割点\n\n定义：对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。\n\n判断条件：再进行tarjan算法求极大联通分量时，若$low_v \\geq num_u$  时，即使得儿子无法不通过祖先回到祖先，此时u为割点。\n\n例题：\n\n> 题目描述:\n        给出一个 nn 个点，mm 条边的无向图，求图的割点。\n输入格式:\n        第一行输入两个正整数 n,mn,m。下面 mm 行每行输入两个正整数 x,yx,y 表示 xx 到 yy 有一条边。\n输出格式:\n        第一行输出割点个数。第二行按照节点编号从小到大输出节点，用空格隔开。\n\n```go\n#include <iostream> \n#include <algorithm> \n#include <vector>\n#include <queue>\n#include <map>\n#include <string>\n#include <bits/stdc++.h>\nusing namespace std;\nconst int mm = 100005;\nint n,m;\nvector< vector<int> > e(100005);\nint dfn[mm],low[mm],ind=0,res=0;\nbool vis[mm]={0},dot[mm]={0};\n\nvoid tarjan(int u,int f){\n    vis[u]=1;\n    //cout<<u<<\' \'<<f<<endl;\n    low[u]=dfn[u]= ++ind;\n    int child = 0;\n    for(auto k:e[u]){\n        if(!vis[k]){\n            child++;\n            tarjan(k,u);\n            low[u] = min(low[u],low[k]);\n            if(f!=u&&low[k]>=dfn[u]&&!dot[u]){ //满足割点的条件low_v>=num_u \n                dot[u]=1;\n                res++;\n            }\n        }else if(k!=f){\n            low[u] = min(low[u],dfn[k]);\n        }\n    }\n    if(f==u&&child>=2&&!dot[u]){    //如果一个节点u拥有两个子树，那么他也是割点\n        //cout<<">=2 "<<u<<\' \'<<f<<endl;\n        dot[u]=1;\n        res++;\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf("%d%d",&x,&y);\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n    for(int i=1;i<=n;i++){\n        if(!vis[i]){\n            ind=0;\n            tarjan(i,i);\n        }\n    }\n    cout<<res<<endl;\n    for(int i=1;  i<=n;i++){\n        if(dot[i]==1)\n        printf("%d ",i);\n    }\n    return 0;\n}\n```\n\n习题\n\n> [https://www.luogu.com.cn/problem/P3387](https://www.luogu.com.cn/problem/P3387)  缩点模板题\n\n> [https://www.luogu.com.cn/problem/P3388](https://www.luogu.com.cn/problem/P3388) 割点模板题\n\n> [https://loj.ac/p/10091](https://loj.ac/p/10091)  受欢迎的牛\n>\n> 参考：oiwiki 强连通分量\n',contentRendered:'<h1 id="连通分量" tabindex="-1"><a class="header-anchor" href="#连通分量" aria-hidden="true">#</a> 连通分量</h1>\n<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2>\n<p>强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。</p>\n<p>强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图。</p>\n<h2 id="tarjan-算法" tabindex="-1"><a class="header-anchor" href="#tarjan-算法" aria-hidden="true">#</a> tarjan 算法</h2>\n<h3 id="dfs生成树" tabindex="-1"><a class="header-anchor" href="#dfs生成树" aria-hidden="true">#</a> dfs生成树</h3>\n<p>在介绍该算法之前，先来了解 DFS 生成树 ，我们以下面的有向图为例：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210116003201385" originSrc="https://kasoushu-picture-1300449754.cos.ap-shanghai.myqcloud.com/pic/image-20210116003201385.png" data="aurora"></p>\n<p>有向图的 DFS 生成树主要有 4 种边（不一定全部出现）：</p>\n<ol>\n<li>树边（tree edge）：绿色边，每次搜索找到一个还没有访问过的结点的时候就形成了一条树边。</li>\n<li>反祖边（back edge）：黄色边，也被叫做回边，即指向祖先结点的边。</li>\n<li>横叉边（cross edge）：红色边，它主要是在搜索的时候遇到了一个已经访问过的结点，但是这个结点 <strong>并不是</strong> 当前结点的祖先时形成的。</li>\n<li>前向边（forward edge）：蓝色边，它是在搜索的时候遇到子树中的结点的时候形成的。</li>\n</ol>\n<hr>\n<p>我们考虑 DFS 生成树与强连通分量之间的关系。</p>\n<p>如果结点  是某个强连通分量在搜索树中遇到的第一个结点，那么这个强连通分量的其余结点肯定是在搜索树中以  为根的子树中。  被称为这个强连通分量的根。</p>\n<p>反证法：假设有个结点  在该强连通分量中但是不在以  为根的子树中，那么  到  的路径中肯定有一条离开子树的边。但是这样的边只可能是横叉边或者反祖边，然而这两条边都要求指向的结点已经被访问过了，这就和  是第一个访问的结点矛盾了。得证。</p>\n<h3 id="tarjan算法求强连通分量" tabindex="-1"><a class="header-anchor" href="#tarjan算法求强连通分量" aria-hidden="true">#</a> tarjan算法求强连通分量</h3>\n<p>在 Tarjan 算法中为每个结点  维护了以下几个变量：</p>\n<ol>\n<li>：深度优先搜索遍历时结点  被搜索的次序。</li>\n<li>：设以  为根的子树为  。  定义为以下结点的  的最小值：  中的结点；从  通过一条不在搜索树上的边能到达的结点。</li>\n</ol>\n<p>一个结点的子树内结点的 dfn 都大于该结点的 dfn。</p>\n<p>从根开始的一条路径上的 dfn 严格递增，low 严格非降。</p>\n<p>按照深度优先搜索算法搜索的次序对图中所有的结点进行搜索。在搜索过程中，对于结点  和与其相邻的结点  （v 不是 u 的父节点）考虑 3 种情况：</p>\n<ol>\n<li>未被访问：继续对  进行深度搜索。在回溯过程中，用  更新  。因为存在从  到  的直接路径，所以  能够回溯到的已经在栈中的结点，  也一定能够回溯到。</li>\n<li>被访问过，已经在栈中：即已经被访问过，根据  值的定义（能够回溯到的最早的已经在栈中的结点），则用  更新  。</li>\n<li>被访问过，已不在在栈中：说明  已搜索完毕，其所在连通分量已被处理，所以不用对其做操作。</li>\n</ol>\n<p>代码如下：</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">int</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tp<span class="token punctuation">;</span>\n<span class="token keyword">int</span> scc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sc<span class="token punctuation">;</span>  <span class="token comment">// 结点 i 所在 scc 的编号</span>\n<span class="token keyword">int</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 强连通 i 的大小</span>\n<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in_stack<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">++</span>sc<span class="token punctuation">;</span>  <span class="token comment">//强连通分量数加1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//将某个点v属于第sc个连通分量</span>\n      sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// sc这个连通分量的点的个数加1</span>\n      in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//让v这个点不在栈中</span>\n      <span class="token operator">--</span>tp<span class="token punctuation">;</span> <span class="token comment">//栈顶减一</span>\n    <span class="token punctuation">}</span>\n    scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//同上</span>\n    sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n    in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token operator">--</span>tp<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote>\n<p><a href="https://www.cnblogs.com/shadowland/p/5872257.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/shadowland/p/5872257.html<ExternalLinkIcon/></a> 一个比较好的tarjan算法详解</p>\n</blockquote>\n<h2 id="kosaraju-算法" tabindex="-1"><a class="header-anchor" href="#kosaraju-算法" aria-hidden="true">#</a> Kosaraju 算法</h2>\n<p>Kosaraju 算法依靠两次简单的 DFS 实现。</p>\n<p>第一次 DFS，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯之前给顶点编号，也就是后序遍历。</p>\n<p>第二次 DFS，对于反向后的图，以标号最大的顶点作为起点开始 DFS。这样遍历到的顶点集合就是一个强连通分量。对于所有未访问过的结点，选取标号最大的，重复上述过程。</p>\n<p>两次 DFS 结束后，强连通分量就找出来了，Kosaraju 算法的时间复杂度为 (V+E)。邻接矩阵为（V^2);</p>\n<p>代码如下</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token comment">// g 是原图，g2 是反图</span>\n<span class="token comment">// color数组统计每个点属于哪个连通分量，s为栈,栈顶将最大的标记</span>\n<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> sccCnt<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//kosaraju 算法是先进行第一次dfs，然后第二次dfs从栈中取出最大的没有被遍历的元素进行遍历。</span>\n<span class="token comment">//第二次dfs是对g的逆图g^T进行遍历</span>\n<span class="token keyword">void</span> <span class="token function">kosaraju</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sccCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">++</span>sccCnt<span class="token punctuation">;</span>\n      <span class="token function">dfs2</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="garbow-算法" tabindex="-1"><a class="header-anchor" href="#garbow-算法" aria-hidden="true">#</a> Garbow 算法</h2>\n<p>Garbow 算法是 Tarjan 算法的另一种实现，Tarjan 算法是用 dfn 和 low 来计算强连通分量的根，Garbow 维护一个节点栈，并用第二个栈来确定何时从第一个栈中弹出属于同一个强连通分量的节点。从节点  开始的 DFS 过程中，当一条路径显示这组节点都属于同一个强连通分量时，只要栈顶节点的访问时间大于根节点  的访问时间，就从第二个栈中弹出这个节点，那么最后只留下根节点  。在这个过程中每一个被弹出的节点都属于同一个强连通分量。</p>\n<p>当回溯到某一个节点  时，如果这个节点在第二个栈的顶部，就说明这个节点是强连通分量的起始节点，在这个节点之后搜索到的那些节点都属于同一个强连通分量，于是从第一个栈中弹出那些节点，构成强连通分量。</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">garbow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  stack1<span class="token punctuation">[</span><span class="token operator">++</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  stack2<span class="token punctuation">[</span><span class="token operator">++</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfs_clock<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token function">garbow</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sccno<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> p2<span class="token operator">--</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    p2<span class="token operator">--</span><span class="token punctuation">;</span>\n    scc_cnt<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n      sccno<span class="token punctuation">[</span>stack1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scc_cnt<span class="token punctuation">;</span>\n      <span class="token comment">// all_scc[scc_cnt] ++;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">find_scc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  dfs_clock <span class="token operator">=</span> scc_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>sccno<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sccno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">garbow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h1 id="缩点" tabindex="-1"><a class="header-anchor" href="#缩点" aria-hidden="true">#</a> 缩点</h1>\n<p>将一个强连通分量看作一个点，可以由此建立新图，或进行其他操作</p>\n<h1 id="割点" tabindex="-1"><a class="header-anchor" href="#割点" aria-hidden="true">#</a> 割点</h1>\n<p>定义：对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。</p>\n<p>判断条件：再进行tarjan算法求极大联通分量时，若$low_v \\geq num_u$  时，即使得儿子无法不通过祖先回到祖先，此时u为割点。</p>\n<p>例题：</p>\n<blockquote>\n<p>题目描述:\n给出一个 nn 个点，mm 条边的无向图，求图的割点。\n输入格式:\n第一行输入两个正整数 n,mn,m。下面 mm 行每行输入两个正整数 x,yx,y 表示 xx 到 yy 有一条边。\n输出格式:\n第一行输出割点个数。第二行按照节点编号从小到大输出节点，用空格隔开。</p>\n</blockquote>\n<div class="language-go ext-go line-numbers-mode"><pre v-pre class="language-go"><code>#include <span class="token operator">&lt;</span>iostream<span class="token operator">></span> \n#include <span class="token operator">&lt;</span>algorithm<span class="token operator">></span> \n#include <span class="token operator">&lt;</span>vector<span class="token operator">></span>\n#include <span class="token operator">&lt;</span>queue<span class="token operator">></span>\n#include <span class="token operator">&lt;</span><span class="token keyword">map</span><span class="token operator">></span>\n#include <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>\n#include <span class="token operator">&lt;</span>bits<span class="token operator">/</span>stdc<span class="token operator">++</span><span class="token punctuation">.</span>h<span class="token operator">></span>\nusing namespace std<span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token builtin">int</span> mm <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>\nvector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token number">100005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> dfn<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token builtin">bool</span> vis<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dot<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nvoid <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token builtin">int</span> u<span class="token punctuation">,</span><span class="token builtin">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">//cout&lt;&lt;u&lt;&lt;\' \'&lt;&lt;f&lt;&lt;endl;</span>\n    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>ind<span class="token punctuation">;</span>\n    <span class="token builtin">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span>auto k<span class="token punctuation">:</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            child<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">!=</span>u<span class="token operator">&amp;&amp;</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">>=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//满足割点的条件low_v>=num_u </span>\n                dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n                res<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span>u<span class="token operator">&amp;&amp;</span>child<span class="token operator">>=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果一个节点u拥有两个子树，那么他也是割点</span>\n        <span class="token comment">//cout&lt;&lt;">=2 "&lt;&lt;u&lt;&lt;\' \'&lt;&lt;f&lt;&lt;endl;</span>\n        dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n        res<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> char <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token builtin">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>dot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>习题</p>\n<blockquote>\n<p><a href="https://www.luogu.com.cn/problem/P3387" target="_blank" rel="noopener noreferrer">https://www.luogu.com.cn/problem/P3387<ExternalLinkIcon/></a>  缩点模板题</p>\n</blockquote>\n<blockquote>\n<p><a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener noreferrer">https://www.luogu.com.cn/problem/P3388<ExternalLinkIcon/></a> 割点模板题</p>\n</blockquote>\n<blockquote>\n<p><a href="https://loj.ac/p/10091" target="_blank" rel="noopener noreferrer">https://loj.ac/p/10091<ExternalLinkIcon/></a>  受欢迎的牛</p>\n<p>参考：oiwiki 强连通分量</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/连通分量.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"连通分量",filePath:"/Users/jck/caicai_blog/docs/record/连通分量.md",filePathRelative:"record/连通分量.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/连通分量.html.vue",componentFilePathRelative:"pages/record/连通分量.html.vue",componentFileChunkName:"v-5a0eaa76",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/连通分量.html.js",dataFilePathRelative:"pages/record/连通分量.html.js",dataFileChunkName:"v-5a0eaa76",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/连通分量.html",htmlFilePathRelative:"record/连通分量.html"},{data:{key:"v-13fec48d",path:"/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",title:"青春鼠鼠不会数学期望就寄了吧",lang:"zh-CN",frontmatter:{title:"青春鼠鼠不会数学期望就寄了吧",tags:["杂谈","七月","数学","思绪"],categories:["数学"],date:"2021/11/19 12:00",coverUrl:"https://saber.love/f/2021-04-19_162146.jpg"},excerpt:"",headers:[{level:2,title:"1. 0-1分布",slug:"_1-0-1分布",children:[]},{level:2,title:"二项分布",slug:"二项分布",children:[]},{level:2,title:"3. 泊松分布",slug:"_3-泊松分布",children:[]},{level:2,title:"4.几何分布",slug:"_4-几何分布",children:[]},{level:2,title:"结语",slug:"结语",children:[]}],git:{}},key:"v-13fec48d",path:"/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",title:"青春鼠鼠不会数学期望就寄了吧",lang:"zh-CN",frontmatter:{title:"青春鼠鼠不会数学期望就寄了吧",tags:["杂谈","七月","数学","思绪"],categories:["数学"],date:"2021/11/19 12:00",coverUrl:"https://saber.love/f/2021-04-19_162146.jpg"},excerpt:"",headers:[{level:2,title:"1. 0-1分布",slug:"_1-0-1分布",children:[]},{level:2,title:"二项分布",slug:"二项分布",children:[]},{level:2,title:"3. 泊松分布",slug:"_3-泊松分布",children:[]},{level:2,title:"4.几何分布",slug:"_4-几何分布",children:[]},{level:2,title:"结语",slug:"结语",children:[]}],content:"\n# 对于常见离散型随机变量数学期望和方差的证明\n\n前言：今天在看张宇概率论9讲和王式安概率论讲义的随机变量的期望和方差时，发现其直接给出了常见离散型随即变量的方差和数学期望，没有证明，故在此写下其证明。\nps1:打这个公式真尼玛累，体力活啊我超，然然啊，请赐予我力量，治愈我灵魂，然然你带我走吧。我好累啊，学不动了，学不懂了！！！！！\nps2:写着写着感觉证明的有点错误，因为我用到了级数逐项积分与求导，但是这里只有n,不是无穷，所以感觉有点奇怪，但证出来结果是对的，摆烂了，不管了，凑合着看\nps3:哼，啊，呜呜，恩啊，啊啊啊啊啊啊啊\nps4:呜呜呜u呜呜u我\nps5:是不是求个极限n->无穷就满足条件了啊。。。。。。\nps6:难得写个东西还破绽百出，我寄了啊，然然，然然呜呜呜\n\n\n## 1. 0-1分布\n\n0-1分布概率为p\n$$\n\\begin{aligned}\n  E(X) &= p \\times 1+(1-p)\\times 0 = p \\\\ D(x)&= (1-p)^2\\times 1+ (0-p)^2 \\times (1-p)\\\\ &=p(1-p)\n\\end{aligned}\n$$\n\n## 二项分布\n\n$$若 X \\sim B(n,p) 则其数学期望及方差为:$$\n$$\n\\begin{aligned}\n       E(X) &= \\sum_{k=0}^{n} k\\times C_n^k p^k (1-p)^{n-k} \\\\\n       &=\\sum_{k=0}^n \\frac{k n! p^k(1-p)^{n-k}}{k!(n-k)!} \\\\\n       &= \\sum_{k=1}^n \\frac{n! p^k(1-p)^{n-k}}{(k-1)! (n-k)!} = np \\sum_{k=1}^n \\frac{(n-1)!p^{k-1}(1-p)^{n-k}}{(k-1)!(n-k)!} \\\\\n       &=np \\sum_{k=1}^n C_{n-1}^{k-1} p^{k-1}(1-p)^{(n-1)-(k-1)} \\\\\n       &=np (p+(1-p))^{n-1} = np\n\\end{aligned}\n$$\n其方差为：\n\n由于直接计算$$D(X)= \\sum_{k=0}^{n} (k-E(x))^2 P_i $$ 不方便\n\n因此\n$$由 D(X) = E(X^2)-E(X)^2  $$\n得\n$$\n\\begin{aligned}\nD(x) &= E(X(X-1)+X) -E(X)^2 \\\\ &=E(X(X-1))+E(X)-E(X)^2\n\\end{aligned}\n$$\n接下来求 $E(X(X-1))$\n$$\n    \\begin{aligned}\n        E(X(X-1)) &= \\sum_{k=0}^n k(k-1)\\frac{n! p^k (1-p)^{n-k}}{k! (n-k)!} \\\\ &=  \\sum_{k=2}^n n(n-1)p^2 \\frac{(n-2)! p^{k-2} (1-p)^{n-2-(k-2)}}{(k-2)! (n-2-(k-2))!} \\\\ &=n(n-1)p^2\n    \\end{aligned}\n$$\n故\n$$\n\\begin{aligned}\n    D(X) &=E(X(X-1))+E(X)-E(X)\\\\&= n(n-1)p^2 + np -(np)^2 \\\\&= np(1-p)\n\\end{aligned}\n$$\n\n## 3. 泊松分布\n参数为$ \\lambda $泊松分布概率为\n$$ P(X=k) = \\frac{\\lambda^k}{k!} e^{-\\lambda} $$\n\n\n$$\n\\begin{aligned}\n故E(X) &= \\sum_{k=0}^n \\frac{k \\lambda^k e^{-\\lambda}}{k!} = e^{-\\lambda} \\sum_{k=1}^n \\frac{\\lambda ^k}{(k-1)!} \\\\ &= \\lambda e^{-\\lambda}  \\sum_{k=1}^n \\frac{\\lambda ^{k-1}}{(k-1)!} \\\\由 e^{x} &= \\sum_{k=0}^ \\infty \\frac{x^k}{k!} \\\\\n得E(X) &= \\lambda e^{\\lambda-\\lambda} = \\lambda\n\\end{aligned}\n$$\n\nD(X)直接计算很麻烦，所以像上一个那样拆开来\n$$ D(X)  = E(X(X-1)+X) - (E(X))^2 $$\n$$\n\\begin{aligned}\n   \\\\\n    E(X(X-1)) &= \\sum_{k=0}^n \\frac{ k(k-1) \\lambda ^k}{k!} e^{-\\lambda} = e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^k}{(k-2)!} \\\\ &=\\lambda^2 e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^{k-2}}{(k-2)!} = \\lambda^2\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n     D(X)  &= E(X(X-1)+X) - (E(X))^2  \\\\ &=\\lambda ^2 +\\lambda - \\lambda ^2 = \\lambda\n\\end{aligned}\n$$\n\n## 4.几何分布\n几何分布的概率$P(X=k) = p(1-p)^{k-1} (k\\in(1,2,3,4....))$\n因为\n$$\n    \\begin{aligned}\n         \\sum_{k=1}^{\\infty} kx^{k-1}&= ( \\sum_{k=1}^{\\infty} \\int kx^{k-1} )^{'} = (\\sum_{k=1}^{\\infty} x^{k})^{'}\\\\&=(\\frac{x}{1-x})^{'} = \\frac{1}{(1-x)^2}\n    \\end{aligned}\n$$\n$$\n    \\begin{aligned}\n       E(X) &= \\sum_{k=1}^n kp(1-p)^{k-1} = p \\sum_{k=1}^n k(1-p)^{k-1} \\\\ &=p \\frac{1}{(1-(1-p))^2} = \\frac{1}{p}\n    \\end{aligned}\n$$\n下面求方差D(X),\n直接求D(X)不好求，所以和上面一样分开来求\n$$\n        D(X) = E(X(X+1)-X)-(E(X))^2\n$$\n这里和上面有一点不一样\n$$\n    \\begin{aligned}\n         \\sum_{k=1}^{\\infty} k(k+1)x^{k-1}&= ( \\sum_{k=1}^{\\infty} \\int k(k+1)x^{k-1} )^{'} = (\\sum_{k=1}^{\\infty} (k+1)x^{k})^{'}\\\\ &=\n          (\\sum_{k=1}^{\\infty} \\int (k+1)x^{k})^{''}\\\\ &=(\\frac{x^2}{1-x})^{''} = \\frac{2}{(1-x)^3}\n    \\end{aligned}\n$$\n$$\n    \\begin{aligned}\n       E(X(X+1)) &= \\sum_{k=1}^n k(k+1)p(1-p)^{k-1} = p \\sum_{k=1}^n k(k+1)(1-p)^{k-1} \\\\ &=p \\frac{2}{(1-(1-p))^3} = \\frac{2}{p^2}\n    \\end{aligned}\n$$\n$$\n\\begin{aligned}\n     D(X)  &= E(X(X+1)-X) - (E(X))^2  \\\\ &= \\frac{2}{p^2} -\\frac{1}{p} -\\frac{1}{p^2} = \\frac{1-p}{p^2}\n\\end{aligned}\n$$\n## 结语 \n\nmarkdown打这个公式也太累了，打不动了，连续型随机变量下次再弄了，摆烂了，睡觉了，下次直接证明写纸上好了。",contentRendered:'<h1 id="对于常见离散型随机变量数学期望和方差的证明" tabindex="-1"><a class="header-anchor" href="#对于常见离散型随机变量数学期望和方差的证明" aria-hidden="true">#</a> 对于常见离散型随机变量数学期望和方差的证明</h1>\n<p>前言：今天在看张宇概率论9讲和王式安概率论讲义的随机变量的期望和方差时，发现其直接给出了常见离散型随即变量的方差和数学期望，没有证明，故在此写下其证明。\nps1:打这个公式真尼玛累，体力活啊我超，然然啊，请赐予我力量，治愈我灵魂，然然你带我走吧。我好累啊，学不动了，学不懂了！！！！！\nps2:写着写着感觉证明的有点错误，因为我用到了级数逐项积分与求导，但是这里只有n,不是无穷，所以感觉有点奇怪，但证出来结果是对的，摆烂了，不管了，凑合着看\nps3:哼，啊，呜呜，恩啊，啊啊啊啊啊啊啊\nps4:呜呜呜u呜呜u我\nps5:是不是求个极限n-&gt;无穷就满足条件了啊。。。。。。\nps6:难得写个东西还破绽百出，我寄了啊，然然，然然呜呜呜</p>\n<h2 id="_1-0-1分布" tabindex="-1"><a class="header-anchor" href="#_1-0-1分布" aria-hidden="true">#</a> 1. 0-1分布</h2>\n<p>0-1分布概率为p\n$$\n\\begin{aligned}\nE(X) &amp;= p \\times 1+(1-p)\\times 0 = p \\ D(x)&amp;= (1-p)^2\\times 1+ (0-p)^2 \\times (1-p)\\ &amp;=p(1-p)\n\\end{aligned}\n$$</p>\n<h2 id="二项分布" tabindex="-1"><a class="header-anchor" href="#二项分布" aria-hidden="true">#</a> 二项分布</h2>\n<p>$$若 X \\sim B(n,p) 则其数学期望及方差为:$$\n$$\n\\begin{aligned}\nE(X) &amp;= \\sum_{k=0}^{n} k\\times C_n^k p^k (1-p)^{n-k} \\\n&amp;=\\sum_{k=0}^n \\frac{k n! p^k(1-p)^{n-k}}{k!(n-k)!} \\\n&amp;= \\sum_{k=1}^n \\frac{n! p^k(1-p)^{n-k}}{(k-1)! (n-k)!} = np \\sum_{k=1}^n \\frac{(n-1)!p^{k-1}(1-p)^{n-k}}{(k-1)!(n-k)!} \\\n&amp;=np \\sum_{k=1}^n C_{n-1}^{k-1} p^{k-1}(1-p)^{(n-1)-(k-1)} \\\n&amp;=np (p+(1-p))^{n-1} = np\n\\end{aligned}\n$$\n其方差为：</p>\n<p>由于直接计算$$D(X)= \\sum_{k=0}^{n} (k-E(x))^2 P_i $$ 不方便</p>\n<p>因此\n$$由 D(X) = E(X^2)-E(X)^2  $$\n得\n$$\n\\begin{aligned}\nD(x) &amp;= E(X(X-1)+X) -E(X)^2 \\ &amp;=E(X(X-1))+E(X)-E(X)^2\n\\end{aligned}\n$$\n接下来求 $E(X(X-1))$\n$$\n\\begin{aligned}\nE(X(X-1)) &amp;= \\sum_{k=0}^n k(k-1)\\frac{n! p^k (1-p)^{n-k}}{k! (n-k)!} \\ &amp;=  \\sum_{k=2}^n n(n-1)p^2 \\frac{(n-2)! p^{k-2} (1-p)^{n-2-(k-2)}}{(k-2)! (n-2-(k-2))!} \\ &amp;=n(n-1)p^2\n\\end{aligned}\n$$\n故\n$$\n\\begin{aligned}\nD(X) &amp;=E(X(X-1))+E(X)-E(X)\\&amp;= n(n-1)p^2 + np -(np)^2 \\&amp;= np(1-p)\n\\end{aligned}\n$$</p>\n<h2 id="_3-泊松分布" tabindex="-1"><a class="header-anchor" href="#_3-泊松分布" aria-hidden="true">#</a> 3. 泊松分布</h2>\n<p>参数为$ \\lambda $泊松分布概率为\n$$ P(X=k) = \\frac{\\lambda^k}{k!} e^{-\\lambda} $$</p>\n<p>$$\n\\begin{aligned}\n故E(X) &amp;= \\sum_{k=0}^n \\frac{k \\lambda^k e^{-\\lambda}}{k!} = e^{-\\lambda} \\sum_{k=1}^n \\frac{\\lambda ^k}{(k-1)!} \\ &amp;= \\lambda e^{-\\lambda}  \\sum_{k=1}^n \\frac{\\lambda ^{k-1}}{(k-1)!} \\由 e^{x} &amp;= \\sum_{k=0}^ \\infty \\frac{x^k}{k!} \\\n得E(X) &amp;= \\lambda e^{\\lambda-\\lambda} = \\lambda\n\\end{aligned}\n$$</p>\n<p>D(X)直接计算很麻烦，所以像上一个那样拆开来\n$$ D(X)  = E(X(X-1)+X) - (E(X))^2 $$\n$$\n\\begin{aligned}\n\\\nE(X(X-1)) &amp;= \\sum_{k=0}^n \\frac{ k(k-1) \\lambda ^k}{k!} e^{-\\lambda} = e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^k}{(k-2)!} \\ &amp;=\\lambda^2 e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^{k-2}}{(k-2)!} = \\lambda^2\n\\end{aligned}\n$$</p>\n<p>$$\n\\begin{aligned}\nD(X)  &amp;= E(X(X-1)+X) - (E(X))^2  \\ &amp;=\\lambda ^2 +\\lambda - \\lambda ^2 = \\lambda\n\\end{aligned}\n$$</p>\n<h2 id="_4-几何分布" tabindex="-1"><a class="header-anchor" href="#_4-几何分布" aria-hidden="true">#</a> 4.几何分布</h2>\n<p>几何分布的概率$P(X=k) = p(1-p)^{k-1} (k\\in(1,2,3,4....))$\n因为\n$$\n\\begin{aligned}\n\\sum_{k=1}^{\\infty} kx^{k-1}&amp;= ( \\sum_{k=1}^{\\infty} \\int kx^{k-1} )^{\'} = (\\sum_{k=1}^{\\infty} x^{k})^{\'}\\&amp;=(\\frac{x}{1-x})^{\'} = \\frac{1}{(1-x)^2}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nE(X) &amp;= \\sum_{k=1}^n kp(1-p)^{k-1} = p \\sum_{k=1}^n k(1-p)^{k-1} \\ &amp;=p \\frac{1}{(1-(1-p))^2} = \\frac{1}{p}\n\\end{aligned}\n$$\n下面求方差D(X),\n直接求D(X)不好求，所以和上面一样分开来求\n$$\nD(X) = E(X(X+1)-X)-(E(X))^2\n$$\n这里和上面有一点不一样\n$$\n\\begin{aligned}\n\\sum_{k=1}^{\\infty} k(k+1)x^{k-1}&amp;= ( \\sum_{k=1}^{\\infty} \\int k(k+1)x^{k-1} )^{\'} = (\\sum_{k=1}^{\\infty} (k+1)x^{k})^{\'}\\ &amp;=\n(\\sum_{k=1}^{\\infty} \\int (k+1)x^{k})^{\'\'}\\ &amp;=(\\frac{x^2}{1-x})^{\'\'} = \\frac{2}{(1-x)^3}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nE(X(X+1)) &amp;= \\sum_{k=1}^n k(k+1)p(1-p)^{k-1} = p \\sum_{k=1}^n k(k+1)(1-p)^{k-1} \\ &amp;=p \\frac{2}{(1-(1-p))^3} = \\frac{2}{p^2}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nD(X)  &amp;= E(X(X+1)-X) - (E(X))^2  \\ &amp;= \\frac{2}{p^2} -\\frac{1}{p} -\\frac{1}{p^2} = \\frac{1-p}{p^2}\n\\end{aligned}\n$$</p>\n<h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2>\n<p>markdown打这个公式也太累了，打不动了，连续型随机变量下次再弄了，摆烂了，睡觉了，下次直接证明写纸上好了。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/青春鼠鼠不会数学期望就寄了吧.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"青春鼠鼠不会数学期望就寄了吧",filePath:"/Users/jck/caicai_blog/docs/record/青春鼠鼠不会数学期望就寄了吧.md",filePathRelative:"record/青春鼠鼠不会数学期望就寄了吧.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/青春鼠鼠不会数学期望就寄了吧.html.vue",componentFilePathRelative:"pages/record/青春鼠鼠不会数学期望就寄了吧.html.vue",componentFileChunkName:"v-13fec48d",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/青春鼠鼠不会数学期望就寄了吧.html.js",dataFilePathRelative:"pages/record/青春鼠鼠不会数学期望就寄了吧.html.js",dataFileChunkName:"v-13fec48d",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/青春鼠鼠不会数学期望就寄了吧.html",htmlFilePathRelative:"record/青春鼠鼠不会数学期望就寄了吧.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[]},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[]},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[]},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[]},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[]},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[]},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[]},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[]},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[]},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[]},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[]},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[]},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"}]},7039:(n,s,a)=>{a.d(s,{Z:()=>e});const e=[{data:{key:"v-0416b0fa",path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",title:"c语言内存排布",lang:"zh-CN",frontmatter:{title:"c语言内存排布",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2021/05/10 00:21",tag:["cs","计组"]},excerpt:"",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],git:{}},key:"v-0416b0fa",path:"/record/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E6%8E%92%E5%B8%83.html",title:"c语言内存排布",lang:"zh-CN",frontmatter:{title:"c语言内存排布",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2021/05/10 00:21",tag:["cs","计组"]},excerpt:"",headers:[{level:2,title:"大端对齐与小端对齐",slug:"大端对齐与小端对齐",children:[]}],content:"\n\n# c语言介绍\n本来想写c语言的内存如何对齐的，但是想想这个也挺简单的大家自己网上搜一下就行了，我也懒的写了\n以后要是有空再写，先鸽了\n\n# 12.3更新\n\n简单来说就是一个元素以其自身大小为单位进行寻址，由此可以推出其内存布局\n\n# 数据在内存中放置方向\n\n## 大端对齐与小端对齐\n\n简而言之就是大的在前或者小的在前\n",contentRendered:'<h1 id="c语言介绍" tabindex="-1"><a class="header-anchor" href="#c语言介绍" aria-hidden="true">#</a> c语言介绍</h1>\n<p>本来想写c语言的内存如何对齐的，但是想想这个也挺简单的大家自己网上搜一下就行了，我也懒的写了\n以后要是有空再写，先鸽了</p>\n<h1 id="_12-3更新" tabindex="-1"><a class="header-anchor" href="#_12-3更新" aria-hidden="true">#</a> 12.3更新</h1>\n<p>简单来说就是一个元素以其自身大小为单位进行寻址，由此可以推出其内存布局</p>\n<h1 id="数据在内存中放置方向" tabindex="-1"><a class="header-anchor" href="#数据在内存中放置方向" aria-hidden="true">#</a> 数据在内存中放置方向</h1>\n<h2 id="大端对齐与小端对齐" tabindex="-1"><a class="header-anchor" href="#大端对齐与小端对齐" aria-hidden="true">#</a> 大端对齐与小端对齐</h2>\n<p>简而言之就是大的在前或者小的在前</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/c语言的内存排布.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"c语言的内存排布",filePath:"/Users/jck/caicai_blog/docs/record/c语言的内存排布.md",filePathRelative:"record/c语言的内存排布.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/c语言的内存排布.html.vue",componentFilePathRelative:"pages/record/c语言的内存排布.html.vue",componentFileChunkName:"v-0416b0fa",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/c语言的内存排布.html.js",dataFilePathRelative:"pages/record/c语言的内存排布.html.js",dataFileChunkName:"v-0416b0fa",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/c语言的内存排布.html",htmlFilePathRelative:"record/c语言的内存排布.html"},{data:{key:"v-6087f698",path:"/record/docker.html",title:"docker学习",lang:"zh-CN",frontmatter:{title:"docker学习",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/01/02 00:21",tag:["docker"]},excerpt:"",headers:[{level:2,title:"常用命令",slug:"常用命令",children:[]}],git:{}},key:"v-6087f698",path:"/record/docker.html",title:"docker学习",lang:"zh-CN",frontmatter:{title:"docker学习",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/01/02 00:21",tag:["docker"]},excerpt:"",headers:[{level:2,title:"常用命令",slug:"常用命令",children:[]}],content:"\r\n# docker学习\r\n\r\n## 常用命令\r\n\r\n|命令|用处|其他|\r\n|---|---|---|\r\n|docker container run -it name:.. process |运行一个容器的一个程序|-it是交互模式|\r\n|docker image ls|列举镜像||\r\n|ps -elf|列举运行的进程||\r\n|c-PQ|保持运行退出容器||\r\n|docker container exec -it name process|进入一个运行的容器||\r\n|docker container ls|列举容器|-al列举所有容器 |\r\n\r\n",contentRendered:'<h1 id="docker学习" tabindex="-1"><a class="header-anchor" href="#docker学习" aria-hidden="true">#</a> docker学习</h1>\n<h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用处</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker container run -it name:.. process</td>\n<td>运行一个容器的一个程序</td>\n<td>-it是交互模式</td>\n</tr>\n<tr>\n<td>docker image ls</td>\n<td>列举镜像</td>\n<td></td>\n</tr>\n<tr>\n<td>ps -elf</td>\n<td>列举运行的进程</td>\n<td></td>\n</tr>\n<tr>\n<td>c-PQ</td>\n<td>保持运行退出容器</td>\n<td></td>\n</tr>\n<tr>\n<td>docker container exec -it name process</td>\n<td>进入一个运行的容器</td>\n<td></td>\n</tr>\n<tr>\n<td>docker container ls</td>\n<td>列举容器</td>\n<td>-al列举所有容器</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/docker.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"docker",filePath:"/Users/jck/caicai_blog/docs/record/docker.md",filePathRelative:"record/docker.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/docker.html.vue",componentFilePathRelative:"pages/record/docker.html.vue",componentFileChunkName:"v-6087f698",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/docker.html.js",dataFilePathRelative:"pages/record/docker.html.js",dataFileChunkName:"v-6087f698",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/docker.html",htmlFilePathRelative:"record/docker.html"},{data:{key:"v-f65824fc",path:"/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",title:"gin商城项目",lang:"zh-CN",frontmatter:{title:"gin商城项目",tag:["go","mysql","gin","vue"],categories:["go","gin","project","vue"],date:"2022/01/23 01:38"},excerpt:"",headers:[],git:{}},key:"v-f65824fc",path:"/record/gin%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE.html",title:"gin商城项目",lang:"zh-CN",frontmatter:{title:"gin商城项目",tag:["go","mysql","gin","vue"],categories:["go","gin","project","vue"],date:"2022/01/23 01:38"},excerpt:"",headers:[],content:"\n# Summary\n\n为了更好的学习go和想增加自己的项目经验，在这个月我再一次仔细的学习了一下go及其http框架gin，并用它设计了一个商城后台服务，并用vue写了一个前端。迫于时间有限，我目前只实现了用户，订单，商品管理。以及实现了商城管理员后台管理的前端页面，前端页面使用vue + ant design for vue ui库 设计，实现了管理员修改管理员信息以及管理添加，更新，删除，查询商品和进行订单管理，订单统计功能。鉴权部分为使用的jwt验证，用户或者管理员访问后端api时需携带对应的token。项目地址为：https://github.com/kasoushu/vue-mall .\n\n使用的技术\n|后端|说明|文档|\n|---|---|---|\n|gin|web框架|https://github.com/gin-gonic/gin|\n|mysql|mysql驱动|https://github.com/go-sql-driver/mysql|\n|jwt|用户验证|https://github.com/dgrijalva/jwt-go|\n|viper|配置管理|https://github.com/spf13/viper|\n\n|前端|说明|文档|\n|---|---|---|\n|vue3|前端框架|https://v3.vuejs.org/|\n|ant design|ui库|https://next.antdv.com/docs/vue/introduce/|\n|axios|前端请求库|https://www.axios-http.cn/docs/api_intro|\n|vuex|状态管理|https://vuex.vuejs.org/|\n|vue route|网页路由|https://router.vuejs.org/zh|",contentRendered:'<h1 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h1>\n<p>为了更好的学习go和想增加自己的项目经验，在这个月我再一次仔细的学习了一下go及其http框架gin，并用它设计了一个商城后台服务，并用vue写了一个前端。迫于时间有限，我目前只实现了用户，订单，商品管理。以及实现了商城管理员后台管理的前端页面，前端页面使用vue + ant design for vue ui库 设计，实现了管理员修改管理员信息以及管理添加，更新，删除，查询商品和进行订单管理，订单统计功能。鉴权部分为使用的jwt验证，用户或者管理员访问后端api时需携带对应的token。项目地址为：https://github.com/kasoushu/vue-mall .</p>\n<p>使用的技术</p>\n<table>\n<thead>\n<tr>\n<th>后端</th>\n<th>说明</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gin</td>\n<td>web框架</td>\n<td>https://github.com/gin-gonic/gin</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql驱动</td>\n<td>https://github.com/go-sql-driver/mysql</td>\n</tr>\n<tr>\n<td>jwt</td>\n<td>用户验证</td>\n<td>https://github.com/dgrijalva/jwt-go</td>\n</tr>\n<tr>\n<td>viper</td>\n<td>配置管理</td>\n<td>https://github.com/spf13/viper</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>前端</th>\n<th>说明</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vue3</td>\n<td>前端框架</td>\n<td>https://v3.vuejs.org/</td>\n</tr>\n<tr>\n<td>ant design</td>\n<td>ui库</td>\n<td>https://next.antdv.com/docs/vue/introduce/</td>\n</tr>\n<tr>\n<td>axios</td>\n<td>前端请求库</td>\n<td>https://www.axios-http.cn/docs/api_intro</td>\n</tr>\n<tr>\n<td>vuex</td>\n<td>状态管理</td>\n<td>https://vuex.vuejs.org/</td>\n</tr>\n<tr>\n<td>vue route</td>\n<td>网页路由</td>\n<td>https://router.vuejs.org/zh</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/gin商城项目.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"gin商城项目",filePath:"/Users/jck/caicai_blog/docs/record/gin商城项目.md",filePathRelative:"record/gin商城项目.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/gin商城项目.html.vue",componentFilePathRelative:"pages/record/gin商城项目.html.vue",componentFileChunkName:"v-f65824fc",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/gin商城项目.html.js",dataFilePathRelative:"pages/record/gin商城项目.html.js",dataFileChunkName:"v-f65824fc",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/gin商城项目.html",htmlFilePathRelative:"record/gin商城项目.html"},{data:{key:"v-ef23f9a0",path:"/record/go_redis.html",title:"go连接redis",lang:"zh-CN",frontmatter:{title:"go连接redis",tag:["go","redis"],categories:["go","redis"],date:"2022/01/02 11:01"},excerpt:"",headers:[],git:{}},key:"v-ef23f9a0",path:"/record/go_redis.html",title:"go连接redis",lang:"zh-CN",frontmatter:{title:"go连接redis",tag:["go","redis"],categories:["go","redis"],date:"2022/01/02 11:01"},excerpt:"",headers:[],content:'\n\n# go操作redis\n\n使用\t`"github.com/go-redis/redis"`包\n使用 `go get -u github.com/go-redis/redis`\ngo get 参数\n```\n-d 只下载不安装\n-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用\n-fix 在获取源码之后先运行 fix，然后再去做其他的事情\n-t 同时也下载需要为运行测试所需要的包\n-u 强制使用网络去更新包和它的依赖包\n-v 显示执行的命令\n```\n这里我使用docker启动redis服务，同时开启一个客户端\n\n```\n docker run --name redis_server -p 6379:6379 -d redis:latest //启动服务端\n\n docker run -it --network host --rm redis:latest redis-cli //启动 --rm 是退出时清除容器\n\n```\n\ngo中连接\n```go\n    var rdb *redis.Client\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr: "localhost:6379",\n\t\tPassword: "",\n\t\tDB: 0,\n\t})\n\t_,err :=rdb.Ping().Result() //测试连接\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n```',contentRendered:'<h1 id="go操作redis" tabindex="-1"><a class="header-anchor" href="#go操作redis" aria-hidden="true">#</a> go操作redis</h1>\n<p>使用\t<code>&quot;github.com/go-redis/redis&quot;</code>包\n使用 <code>go get -u github.com/go-redis/redis</code>\ngo get 参数</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>-d 只下载不安装\n-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用\n-fix 在获取源码之后先运行 fix，然后再去做其他的事情\n-t 同时也下载需要为运行测试所需要的包\n-u 强制使用网络去更新包和它的依赖包\n-v 显示执行的命令\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里我使用docker启动redis服务，同时开启一个客户端</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> docker run --name redis_server -p 6379:6379 -d redis:latest //启动服务端\n\n docker run -it --network host --rm redis:latest redis-cli //启动 --rm 是退出时清除容器\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>go中连接</p>\n<div class="language-go ext-go line-numbers-mode"><pre v-pre class="language-go"><code>    <span class="token keyword">var</span> rdb <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client\n\trdb <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>\n\t\tAddr<span class="token punctuation">:</span> <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>\n\t\tPassword<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n\t\tDB<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token boolean">_</span><span class="token punctuation">,</span>err <span class="token operator">:=</span>rdb<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//测试连接</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/go_redis.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"go_redis",filePath:"/Users/jck/caicai_blog/docs/record/go_redis.md",filePathRelative:"record/go_redis.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/go_redis.html.vue",componentFilePathRelative:"pages/record/go_redis.html.vue",componentFileChunkName:"v-ef23f9a0",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/go_redis.html.js",dataFilePathRelative:"pages/record/go_redis.html.js",dataFileChunkName:"v-ef23f9a0",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/go_redis.html",htmlFilePathRelative:"record/go_redis.html"},{data:{key:"v-7f5909be",path:"/record/golang.html",title:"Golang碎碎念",lang:"zh-CN",frontmatter:{title:"Golang碎碎念",date:"2022/01/01 23:39"},excerpt:"",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],git:{}},key:"v-7f5909be",path:"/record/golang.html",title:"Golang碎碎念",lang:"zh-CN",frontmatter:{title:"Golang碎碎念",date:"2022/01/01 23:39"},excerpt:"",headers:[{level:2,title:"杂项",slug:"杂项",children:[]},{level:2,title:"map",slug:"map",children:[]},{level:2,title:"结构体",slug:"结构体",children:[]},{level:2,title:"函数",slug:"函数",children:[]}],content:'\r\n\r\n\r\n## 杂项\r\n\r\n_用法\r\n1. 导入包时，仅引用该包，（即只执行init函数）\r\n2. 省略变量\r\n\r\n变量声明\r\nvar name type;\r\n变量声明自动初始化\r\n整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil\r\n批量声明\r\n```\r\n    var (\r\n        a string\r\n        b int\r\n        c bool\r\n        d float32\r\n    )\r\n```\r\n\r\n\r\n数组声明\r\n```\r\n    全局：\r\n    var arr0 [5]int = [5]int{1, 2, 3}\r\n    var arr1 = [5]int{1, 2, 3, 4, 5}\r\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\r\n    var str = [5]string{3: "hello world", 4: "tom"}\r\n    局部：\r\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\r\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\r\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\r\n    d := [...]struct {\r\n        name string\r\n        age  uint8\r\n    }{\r\n        {"user1", 10}, // 可省略元素类型。\r\n        {"user2", 20}, // 别忘了最后一行的逗号。\r\n    }\r\n```\r\n\r\ngolang 分配内存\r\n1. new\r\n2. make\r\n   1. map只能为slice, map, channel分配内存，并返回一个初始化的值.           \r\n```\r\nmake(map[string]string)\r\nmake([]int, 2)\r\nmake([]int, 2, 4) \r\n```\r\n\r\n1. 第一种用法，即缺少长度的参数，只传类型，这种用法只能用在类型为map或chan的场景，例如make([]int)是会报错的。这样返回的空间长度都是默认为0的。\r\n\r\n2. 第二种用法，指定了长度，例如make([]int, 2)返回的是一个长度为2的slice\r\n\r\n3. 第三种用法，第二参数指定的是切片的长度，第三个参数是用来指定预留的空间长度，例如a := make([]int, 2, 4), 这里值得注意的是返回的切片a的总长度是4，预留的意思并不是另外多出来4的长度，其实是包含了前面2个已经切片的个数的。所以举个例子当你这样用的时候 a := make([]int, 4, 2)，就会报语法错误。\r\n\r\n\r\n## map\r\n\r\n判断是否存在\r\n```\r\nfunc main() {\r\n    scoreMap := make(map[string]int)\r\n    scoreMap["张三"] = 90\r\n    scoreMap["小明"] = 100\r\n    // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\r\n    v, ok := scoreMap["张三"]\r\n    if ok {\r\n        fmt.Println(v)\r\n    } else {\r\n        fmt.Println("查无此人")\r\n    }\r\n}\r\n```\r\n\r\n## 结构体\r\n是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\r\n匿名字段\r\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\r\n\r\n## 函数\r\n\r\n多返回值可直接作为其他函数调用实参\r\n\r\n```\r\npackage main\r\n\r\nfunc test() (int, int) {\r\n    return 1, 2\r\n}\r\n\r\nfunc add(x, y int) int {\r\n    return x + y\r\n}\r\n\r\nfunc sum(n ...int) int {\r\n    var x int\r\n    for _, i := range n {\r\n        x += i\r\n    }\r\n\r\n    return x\r\n}\r\n```\r\n\r\n\r\ndefer\r\n1. 关闭文件句柄\r\n2. 锁资源释放\r\n3. 数据库连接释放',contentRendered:'<h2 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h2>\n<p>_用法</p>\n<ol>\n<li>导入包时，仅引用该包，（即只执行init函数）</li>\n<li>省略变量</li>\n</ol>\n<p>变量声明\nvar name type;\n变量声明自动初始化\n整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil\n批量声明</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    var (\n        a string\n        b int\n        c bool\n        d float32\n    )\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>数组声明</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    全局：\n    var arr0 [5]int = [5]int{1, 2, 3}\n    var arr1 = [5]int{1, 2, 3, 4, 5}\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\n    var str = [5]string{3: "hello world", 4: "tom"}\n    局部：\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {"user1", 10}, // 可省略元素类型。\n        {"user2", 20}, // 别忘了最后一行的逗号。\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>golang 分配内存</p>\n<ol>\n<li>new</li>\n<li>make\n<ol>\n<li>map只能为slice, map, channel分配内存，并返回一个初始化的值.</li>\n</ol>\n</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>make(map[string]string)\nmake([]int, 2)\nmake([]int, 2, 4) \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol>\n<li>\n<p>第一种用法，即缺少长度的参数，只传类型，这种用法只能用在类型为map或chan的场景，例如make([]int)是会报错的。这样返回的空间长度都是默认为0的。</p>\n</li>\n<li>\n<p>第二种用法，指定了长度，例如make([]int, 2)返回的是一个长度为2的slice</p>\n</li>\n<li>\n<p>第三种用法，第二参数指定的是切片的长度，第三个参数是用来指定预留的空间长度，例如a := make([]int, 2, 4), 这里值得注意的是返回的切片a的总长度是4，预留的意思并不是另外多出来4的长度，其实是包含了前面2个已经切片的个数的。所以举个例子当你这样用的时候 a := make([]int, 4, 2)，就会报语法错误。</p>\n</li>\n</ol>\n<h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2>\n<p>判断是否存在</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>func main() {\n    scoreMap := make(map[string]int)\n    scoreMap["张三"] = 90\n    scoreMap["小明"] = 100\n    // 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\n    v, ok := scoreMap["张三"]\n    if ok {\n        fmt.Println(v)\n    } else {\n        fmt.Println("查无此人")\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2>\n<p>是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\n匿名字段\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2>\n<p>多返回值可直接作为其他函数调用实参</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>package main\n\nfunc test() (int, int) {\n    return 1, 2\n}\n\nfunc add(x, y int) int {\n    return x + y\n}\n\nfunc sum(n ...int) int {\n    var x int\n    for _, i := range n {\n        x += i\n    }\n\n    return x\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>defer</p>\n<ol>\n<li>关闭文件句柄</li>\n<li>锁资源释放</li>\n<li>数据库连接释放</li>\n</ol>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/golang.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"golang",filePath:"/Users/jck/caicai_blog/docs/record/golang.md",filePathRelative:"record/golang.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/golang.html.vue",componentFilePathRelative:"pages/record/golang.html.vue",componentFileChunkName:"v-7f5909be",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/golang.html.js",dataFilePathRelative:"pages/record/golang.html.js",dataFileChunkName:"v-7f5909be",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/golang.html",htmlFilePathRelative:"record/golang.html"},{data:{key:"v-15bb06e3",path:"/record/redis.html",title:"初探redis",lang:"zh-CN",frontmatter:{title:"初探redis",tag:["redis"],categories:["redis"],date:"2022/01/01 19:36"},excerpt:"",headers:[{level:2,title:"redis 特点",slug:"redis-特点",children:[]},{level:2,title:"redis简单操作",slug:"redis简单操作",children:[]},{level:2,title:"常用数据类型",slug:"常用数据类型",children:[{level:3,title:"String",slug:"string",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"Hasp",slug:"hasp",children:[]},{level:3,title:"Zset 有序列表",slug:"zset-有序列表",children:[]},{level:3,title:"Bitmaps",slug:"bitmaps",children:[]},{level:3,title:"HyperLoglog",slug:"hyperloglog",children:[]},{level:3,title:"Geospatial",slug:"geospatial",children:[]}]},{level:2,title:"Redis 订阅发布",slug:"redis-订阅发布",children:[]},{level:2,title:"事务",slug:"事务",children:[{level:3,title:"乐观锁，悲观锁",slug:"乐观锁-悲观锁",children:[]}]},{level:2,title:"Redis 配置",slug:"redis-配置",children:[]}],git:{}},key:"v-15bb06e3",path:"/record/redis.html",title:"初探redis",lang:"zh-CN",frontmatter:{title:"初探redis",tag:["redis"],categories:["redis"],date:"2022/01/01 19:36"},excerpt:"",headers:[{level:2,title:"redis 特点",slug:"redis-特点",children:[]},{level:2,title:"redis简单操作",slug:"redis简单操作",children:[]},{level:2,title:"常用数据类型",slug:"常用数据类型",children:[{level:3,title:"String",slug:"string",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"Hasp",slug:"hasp",children:[]},{level:3,title:"Zset 有序列表",slug:"zset-有序列表",children:[]},{level:3,title:"Bitmaps",slug:"bitmaps",children:[]},{level:3,title:"HyperLoglog",slug:"hyperloglog",children:[]},{level:3,title:"Geospatial",slug:"geospatial",children:[]}]},{level:2,title:"Redis 订阅发布",slug:"redis-订阅发布",children:[]},{level:2,title:"事务",slug:"事务",children:[{level:3,title:"乐观锁，悲观锁",slug:"乐观锁-悲观锁",children:[]}]},{level:2,title:"Redis 配置",slug:"redis-配置",children:[]}],content:'\r\n\r\n# redis 学习\r\n\r\n设置后台启动\r\nredis.conf 中 \r\n```\r\ndaemonize no // yes为后台启动\r\n```\r\n启动服务命令为：redis-server\r\n后台启动时可以使用redis-cli连接redis服务器\r\n\r\n\r\n## redis 特点\r\n\r\n单线程，io多路复用\r\n可持久化\r\n\r\n## redis简单操作\r\n\r\n|操作|作用|\r\n|---|---|\r\n|set key value|设置key为value|\r\n|keys *|查看当前库所有key|\r\n|exists key|判断某个key是否存在|\r\n|type key|查看这个key时什么类型|\r\n|del key|删除指定的key数据|\r\n|unlink key|根据value选择非阻塞删除|\r\n|expire key 10|为指定key设置过期时间（10）是10s|\r\n|ttl key|查看该key还有多久过期-1表示永不过气，-2表示已经过期|\r\n|select 0|选择数据库0|\r\n|dbsize|查看有多少key|\r\n|flushdb|清空当前db|\r\n|flushall|清空全部库|\r\n|get key|取值|\r\n|append key value|在key 后添加value|\r\n|strlen key|获取键的长度|\r\n|setnx key value|当值不存在时设置值|\r\n|incr key|值自增|\r\n|decr key|值自减|\r\n|incrby/decrby key step|值增/减step|\r\n|mset key v1 v2 v3...|设置多个value|\r\n|mget k1 k2 k3||\r\n|msetnx nx k1 v1 k2 v2 k3 v3|原子操作，若有一个不成功，都不成功|\r\n|getrange key index1,index2|获取范围内的值|\r\n|set range key index value|用v符号key 从index开始的|\r\n|setex key ttl value|设置value 同时设置ttl|\r\n|getset key value|获取旧值设置新值|\r\n\r\n## 常用数据类型\r\n\r\n### String\r\n\r\n二进制安全 redis中一个value做多512M\r\n可修改，内存结构类似java的arrarylist，预分配冗余空间类似capacity，size，小于1M时每次扩容翻倍，大于1M每次增加1M\r\n\r\n### List\r\n\r\n单键多值，是一个双向链表\r\n内存结构，当元素少时，内存中连续分配，数据多的时分链式分配\r\n|操作|含义|\r\n|---|---|\r\n|lpush/rpush key v1 v2 v3|左边插入，右边插入|\r\n|lpop/rpop key|从key左边/右边删除一个元素|\r\n|rpoplpush k1 k2|从k1右边删除一个插入到k2左边|\r\n|lrange key start stop|按索引下标获得元素\r\n|lindex key index|按下索引下标获得元素|\r\n|llen key|获列表长度|\r\n|linsert key before v1 newvalue |在value的后面插入newvalue|\r\n|lrem key n value|从左边查出n个value|\r\n|lset key index value|将列表key下标为index的值替换成value|\r\n\r\n### Set\r\n\r\n哈希表实现\r\n\r\n|操作|含义|\r\n|---|---|\r\n|sadd key v1 v2...|将几个元素加入key|\r\n|smenbers key|取出key中元素|\r\n|sismenber key value|判断key中是否存在value|\r\n|scard key|返回个数|\r\n|srem key v1 v2...|删除key中元素|\r\n|spop key|随机从key中删除一个元素|\r\n|srandmenber key n|随机从key中取出n个元素|\r\n|smove source destination value|把集合中一个值从一个集合移动到另一个|\r\n|sinter k1 k2|返回交集元素 |\r\n|sunion k1 k2|返回并集元素|\r\n|sdiff  k1 k2|返回差集元素|\r\n\r\n### Hasp\r\n\r\n就是一个map，存键值对\r\n\r\n|操作|含义|\r\n|---|---|\r\n|hset key field value|给key中的field赋值value|\r\n|hget key field|取出key中field的值|\r\n|hmset key f1 v1 f2 v2 ...|批量设置|\r\n|hkeys key|列出hash中所有field|\r\n|hexists key field|查看key中是否存在field|\r\n|hvals key|列出该key中所有value|\r\n|hincrby key field increment|为key中fieldfield 加上增量|\r\n|hsetnx key field value|若field不存在则设置field为value|\r\n\r\n### Zset 有序列表\r\n\r\n是一个没有重复元素的字符串集合，每个域关联一个大小，大小有序\r\nZset 内部由hash表和跳跃表组成，跳跃表给元素value排序查找\r\n\r\n|操作|含义|\r\n|---|---|\r\n|zadd key score1 value1...|将一或多个s,v插入key中|\r\n|zrange key start stop [withscores]|返回有序集key中下标在start到stop之间的元素，若带withscores则同时返回scores|\r\n|zrangebyscore key minmax [withscores][limit offset count]|返回key中score介于min和max之间的包含等于按score值递增排列|\r\n|zincrby key increment value|为key的score加上增量|\r\n|zrevrangebyscore key maxmin [withscores][limit offset count]|降序|\r\n|zrem key value|删除key中value|\r\n|zcount key min max |统计该区间内的元素|\r\n|zrank key value|返回key中该value排名，0为第一个|\r\n\r\n### Bitmaps\r\n\r\n本身是字符串但是能对位操作\r\n\r\n|操作|含义|\r\n|---|---|\r\n|setbit key offset value|设置key中某个offset的值（0/1），offset从0开始|\r\n|getbit key offset|得到key中offset的值|\r\n|bitcount key [start stop]|统计1的数|\r\n|bitop and/or/not/xor  destkey k1 k2 k3..|对k1,k2,k3做op操作结果保存在destkey中|\r\n\r\n\r\n### HyperLoglog\r\n\r\n|操作|含义|\r\n|---|---|\r\n|pfadd key element ...|向key中添加element|\r\n|pfcount key|返回key中元素个数|\r\n|pfmerge dkey s1key s2key...|将s1,s2...中合并放到dkey中|\r\n\r\n### Geospatial\r\n方便放地理位置\r\n|操作|含义|\r\n|---|---|\r\n|geoadd key longitude latitude menber ...|添加key 经度纬度名称|\r\n|geopos key menber|从key中获取menber的经纬度|\r\n|geodist key menber1 menber2 [m\\|km\\|ft]|获取两地点的直线距离|\r\n|georadius key longitude latitude radius m\\|km\\|ft|找出给定坐标半径内的地点|\r\n\r\n## Redis 订阅发布\r\n\r\nredis客户端之间可以订阅发布消息\r\n\r\n命令\r\n|subscribe channel|订阅channel1|\r\n|publish channel msg|发布消息到channel1|\r\n\r\n## 事务\r\n\r\n### 乐观锁，悲观锁\r\n\r\n乐观锁，每次拿数据不加锁，修改时对比版本（数据会附加版本信息？），使用checkandset（）\r\n悲观锁:每次拿数据加锁。\r\n\r\n\r\n|操作|含义|\r\n|---|---|\r\n|multi|定义一组操作|\r\n|exec|执行|\r\n|discard|放弃|\r\n|watch key...|watch key，采用乐观锁，如果在事务执行前key发生改变那么事务会被打断|\r\n\r\n\r\n1. 各指令按序执行，不会被其他事务打断，执行中有错误则错误的那个执行失败，其他的正常执行，输入指令时有错误的，直接退出multi\r\n2. 没有隔离级别的概念，队列中命令没有被提交时不会被执行\r\n3. 不保证原子性，事务中一条命令失败其后的继续执行，没有回滚\r\n\r\n\r\n## Redis 配置\r\n\r\n配置文件大小写不敏感\r\n```\r\n# Redis configuration file example.\r\n#\r\n# Note that in order to read the configuration file, Redis must be\r\n# started with the file path as first argument:\r\n#\r\n# ./redis-server /path/to/redis.conf\r\n\r\n# Note on units: when memory size is needed, it is possible to specify\r\n# it in the usual form of 1k 5GB 4M and so forth:\r\n#\r\n# 1k => 1000 bytes\r\n# 1kb => 1024 bytes\r\n# 1m => 1000000 bytes\r\n# 1mb => 1024*1024 bytes\r\n# 1g => 1000000000 bytes\r\n# 1gb => 1024*1024*1024 bytes\r\n#\r\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\r\n\r\n################################## INCLUDES ###################################\r\n################################## 包含     ###################################\r\n\r\n# Include one or more other config files here.  This is useful if you\r\n# have a standard template that goes to all Redis servers but also need\r\n# to customize a few per-server settings.  Include files can include\r\n# other files, so use this wisely.\r\n#\r\n# Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"\r\n# from admin or Redis Sentinel. Since Redis always uses the last processed\r\n# line as value of a configuration directive, you\'d better put includes\r\n# at the beginning of this file to avoid overwriting config change at runtime.\r\n#\r\n# If instead you are interested in using includes to override configuration\r\n# options, it is better to use include as the last line.\r\n#\r\n# 假如说你有一个可用于所有的 redis server 的标准配置模板，\r\n# 但针对某些 server 又需要一些个性化的设置，\r\n# 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。\r\n#\r\n# 但是要注意哦，include 是不能被 config rewrite 命令改写的\r\n# 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，\r\n# 以避免在运行时覆盖配置的改变，相反，你就把它放在后面\r\n# include /path/to/local.conf\r\n# include /path/to/other.conf\r\n\r\n################################ GENERAL  #####################################\r\n################################ 常用     #####################################\r\n\r\n# By default Redis does not run as a daemon. Use \'yes\' if you need it.\r\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\r\n# 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。\r\n# 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。\r\ndaemonize yes\r\n\r\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\r\n# default. You can specify a custom pid file location here.\r\n# 当 Redis 以守护进程的方式运行的时候，Redis 默认会把 pid 文件放在/var/run/redis.pid\r\n# 可配置到其他地址，当运行多个 redis 服务时，需要指定不同的 pid 文件和端口\r\n# 指定存储Redis进程号的文件路径\r\npidfile /var/run/redis.pid\r\n\r\n# Accept connections on the specified port, default is 6379.\r\n# If port 0 is specified Redis will not listen on a TCP socket.\r\n# 端口，默认端口是6379，生产环境中建议更改端口号，安全性更高\r\n# 如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。\r\nport 9966\r\n\r\n# TCP listen() backlog.\r\n#\r\n# In high requests-per-second environments you need an high backlog in order\r\n# to avoid slow clients connections issues. Note that the Linux kernel\r\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\r\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\r\n# in order to get the desired effect.\r\n# TCP 监听的最大容纳数量\r\n# 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，\r\n# 当系统并发量大并且客户端速度缓慢的时候，你需要把这个值调高以避免客户端连接缓慢的问题。\r\n# Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，默认是511，而Linux的默认参数值是128。\r\n# 所以可以将这二个参数一起参考设定，你以便达到你的预期。\r\n#  \r\ntcp-backlog 511\r\n\r\n# By default Redis listens for connections from all the network interfaces\r\n# available on the server. It is possible to listen to just one or multiple\r\n# interfaces using the "bind" configuration directive, followed by one or\r\n# more IP addresses.\r\n#\r\n# Examples:\r\n#\r\n# bind 192.168.1.100 10.0.0.1\r\n# 有时候为了安全起见，redis一般都是监听127.0.0.1 但是有时候又有同网段能连接的需求，当然可以绑定0.0.0.0 用iptables来控制访问权限，或者设置redis访问密码来保证数据安全\r\n\r\n# 不设置将处理所有请求,建议生产环境中设置，有个误区：bind是用来限制外网IP访问的，其实不是，限制外网ip访问可以通过iptables；如：-A INPUT -s 10.10.1.0/24 -p tcp -m state --state NEW -m tcp --dport 9966 -j ACCEPT ；\r\n# 实际上，bind ip 绑定的是redis所在服务器网卡的ip，当然127.0.0.1也是可以的\r\n#如果绑定一个外网ip，就会报错：Creating Server TCP listening socket xxx.xxx.xxx.xxx:9966: bind: Cannot assign requested address\r\n\r\n# bind 127.0.0.1\r\nbind 127.0.0.1 10.10.1.3\r\n\r\n# 假设绑定是以上ip，使用 netstat -anp|grep 9966 会发现，这两个ip被bind，其中10.10.1.3是服务器网卡的ip\r\n# tcp        0      0 10.10.1.3:9966         0.0.0.0:*                   LISTEN      11188/redis-server  \r\n# tcp        0      0 127.0.0.1:9966         0.0.0.0:*                   LISTEN      11188/redis-server \r\n\r\n\r\n# Specify the path for the Unix socket that will be used to listen for\r\n# incoming connections. There is no default, so Redis will not listen\r\n# on a unix socket when not specified.\r\n#\r\n# unixsocket /tmp/redis.sock\r\n# unixsocketperm 700\r\n\r\n# Close the connection after a client is idle for N seconds (0 to disable)\r\n# 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。\r\ntimeout 0\r\n\r\n# TCP keepalive.\r\n#\r\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\r\n# of communication. This is useful for two reasons:\r\n#\r\n# 1) Detect dead peers.\r\n# 2) Take the connection alive from the point of view of network\r\n#    equipment in the middle.\r\n#\r\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\r\n# Note that to close the connection the double of the time is needed.\r\n# On other kernels the period depends on the kernel configuration.\r\n#\r\n# A reasonable value for this option is 60 seconds.\r\n\r\n# tcp 心跳包。\r\n#\r\n# 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。\r\n# 这个之所有有用，主要由两个原因：\r\n#\r\n# 1) 防止死的 peers\r\n# 2) Take the connection alive from the point of view of network\r\n#    equipment in the middle.\r\n#\r\n# 推荐一个合理的值就是60秒\r\ntcp-keepalive 0\r\n\r\n# Specify the server verbosity level.\r\n# This can be one of:\r\n# debug (a lot of information, useful for development/testing)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (moderately verbose, what you want in production probably)\r\n# warning (only very important / critical messages are logged)\r\n# 日志记录等级，4个可选值debug,verbose,notice,warning\r\n# 可以是下面的这些值：\r\n# debug (适用于开发或测试阶段)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (适用于生产环境)\r\n# warning (仅仅一些重要的消息被记录)\r\nloglevel notice\r\n\r\n# Specify the log file name. Also the empty string can be used to force\r\n# Redis to log on the standard output. Note that if you use standard\r\n# output for logging but daemonize, logs will be sent to /dev/null\r\n#配置 log 文件地址,默认打印在命令行终端的窗口上，也可设为/dev/null屏蔽日志、\r\nlogfile "/data/logs/redis/redis.log"\r\n\r\n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\r\n# and optionally update the other syslog parameters to suit your needs.\r\n# 要想把日志记录到系统日志，就把它改成 yes，\r\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\r\n# syslog-enabled no\r\n\r\n# Specify the syslog identity.\r\n# 设置 syslog 的 identity。\r\n# syslog-ident redis\r\n\r\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\r\n# syslog-facility local0\r\n\r\n# Set the number of databases. The default database is DB 0, you can select\r\n# a different one on a per-connection basis using SELECT <dbid> where\r\n# dbid is a number between 0 and \'databases\'-1\r\n# 可用的数据库数，默认值为16，默认数据库为0，数据库范围在0-（database-1）之间\r\ndatabases 16\r\n\r\n################################ SNAPSHOTTING  ################################\r\n################################ 快照          ################################\r\n#\r\n# Save the DB on disk:\r\n#\r\n#   save <seconds> <changes>\r\n#\r\n#   Will save the DB if both the given number of seconds and the given\r\n#   number of write operations against the DB occurred.\r\n#\r\n#   In the example below the behaviour will be to save:\r\n#   after 900 sec (15 min) if at least 1 key changed\r\n#   after 300 sec (5 min) if at least 10 keys changed\r\n#   after 60 sec if at least 10000 keys changed\r\n#\r\n#   Note: you can disable saving completely by commenting out all "save" lines.\r\n#\r\n#   It is also possible to remove all the previously configured save\r\n#   points by adding a save directive with a single empty string argument\r\n#   like in the following example:\r\n#\r\n#   save ""\r\n# 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。\r\n\r\n#    if(在60秒之内有10000个keys发生变化时){\r\n#      进行镜像备份\r\n#    }else if(在300秒之内有10个keys发生了变化){\r\n#      进行镜像备份\r\n#    }else if(在900秒之内有1个keys发生了变化){\r\n#      进行镜像备份\r\n#    }\r\n\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n\r\n# By default Redis will stop accepting writes if RDB snapshots are enabled\r\n# (at least one save point) and the latest background save failed.\r\n# This will make the user aware (in a hard way) that data is not persisting\r\n# on disk properly, otherwise chances are that no one will notice and some\r\n#:/ disaster will happen.\r\n#\r\n# If the background saving process will start working again Redis will\r\n# automatically allow writes again.\r\n#\r\n# However if you have setup your proper monitoring of the Redis server\r\n# and persistence, you may want to disable this feature so that Redis will\r\n# continue to work as usual even if there are problems with disk,\r\n# permissions, and so forth.\r\n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\r\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\r\n# 否则就会没人注意到灾难的发生。\r\n#\r\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\r\n#\r\n# 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好\r\nstop-writes-on-bgsave-error yes\r\n\r\n# Compress string objects using LZF when dump .rdb databases?\r\n# For default that\'s set to \'yes\' as it\'s almost always a win.\r\n# If you want to save some CPU in the saving child set it to \'no\' but\r\n# the dataset will likely be bigger if you have compressible values or keys.\r\n# 在进行备份时,是否进行压缩\r\n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\r\n# 默认都设为 yes\r\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\r\n# 不过这个数据集可能就会比较大\r\nrdbcompression yes\r\n\r\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\r\n# This makes the format more resistant to corruption but there is a performance\r\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\r\n# for maximum performances.\r\n#\r\n# RDB files created with checksum disabled have a checksum of zero that will\r\n# tell the loading code to skip the check.    \r\n# 读取和写入的时候是否支持CRC64校验，默认是开启的\r\nrdbchecksum yes\r\n\r\n# The filename where to dump the DB\r\n# 备份文件的文件名\r\ndbfilename dump.rdb\r\n\r\n# The working directory.\r\n#\r\n# The DB will be written inside this directory, with the filename specified\r\n# above using the \'dbfilename\' configuration directive.\r\n#\r\n# The Append Only File will also be created inside this directory.\r\n#\r\n# Note that you must specify a directory here, not a file name.\r\n# 数据库备份的文件放置的路径\r\n# 路径跟文件名分开配置是因为 Redis 备份时，先会将当前数据库的状态写入到一个临时文件\r\n# 等备份完成时，再把该临时文件替换为上面所指定的文件\r\n# 而临时文件和上面所配置的备份文件都会放在这个指定的路径当中\r\n# 默认值为 ./\r\ndir /data/data/redis/\r\n\r\n################################# REPLICATION #################################\r\n################################# 主从复制    #################################\r\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\r\n# another Redis server. A few things to understand ASAP about Redis replication.\r\n#\r\n# 1) Redis replication is asynchronous, but you can configure a master to\r\n#    stop accepting writes if it appears to be not connected with at least\r\n#    a given number of slaves.\r\n# 2) Redis slaves are able to perform a partial resynchronization with the\r\n#    master if the replication link is lost for a relatively small amount of\r\n#    time. You may want to configure the replication backlog size (see the next\r\n#    sections of this file) with a sensible value depending on your needs.\r\n# 3) Replication is automatic and does not need user intervention. After a\r\n#    network partition slaves automatically try to reconnect to masters\r\n#    and resynchronize with them.\r\n#\r\n# 设置该数据库为其他数据库的从数据库\r\n# slaveof <masterip> <masterport> 当本机为从服务时，设置主服务的IP及端口\r\n# slaveof <masterip> <masterport>\r\n\r\n# If the master is password protected (using the "requirepass" configuration\r\n# directive below) it is possible to tell the slave to authenticate before\r\n# starting the replication synchronization process, otherwise the master will\r\n# refuse the slave request.\r\n#\r\n# 指定与主数据库连接时需要的密码验证\r\n# masterauth <master-password> 当本机为从服务时，设置访问master服务器的密码\r\n# masterauth <master-password>\r\n\r\n# When a slave loses its connection with the master, or when the replication\r\n# is still in progress, the slave can act in two different ways:\r\n#\r\n# 1) if slave-serve-stale-data is set to \'yes\' (the default) the slave will\r\n#    still reply to client requests, possibly with out of date data, or the\r\n#    data set may just be empty if this is the first synchronization.\r\n#\r\n# 2) if slave-serve-stale-data is set to \'no\' the slave will reply with\r\n#    an error "SYNC with master in progress" to all the kind of commands\r\n#    but to INFO and SLAVEOF.\r\n#\r\n# 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”,除了INFO，SLAVEOF这两个命令\r\nslave-serve-stale-data yes\r\n\r\n# You can configure a slave instance to accept writes or not. Writing against\r\n# a slave instance may be useful to store some ephemeral data (because data\r\n# written on a slave will be easily deleted after resync with the master) but\r\n# may also cause problems if clients are writing to it because of a\r\n# misconfiguration.\r\n#\r\n# Since Redis 2.6 by default slaves are read-only.\r\n#\r\n# Note: read only slaves are not designed to be exposed to untrusted clients\r\n# on the internet. It\'s just a protection layer against misuse of the instance.\r\n# Still a read only slave exports by default all the administrative commands\r\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\r\n# security of read only slaves using \'rename-command\' to shadow all the\r\n# administrative / dangerous commands.\r\n# 是否允许slave服务器节点只提供读服务\r\nslave-read-only yes\r\n\r\n# Replication SYNC strategy: disk or socket.\r\n#\r\n# -------------------------------------------------------\r\n# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY\r\n# -------------------------------------------------------\r\n#\r\n# New slaves and reconnecting slaves that are not able to continue the replication\r\n# process just receiving differences, need to do what is called a "full\r\n# synchronization". An RDB file is transmitted from the master to the slaves.\r\n# The transmission can happen in two different ways:\r\n#\r\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\r\n#                 file on disk. Later the file is transferred by the parent\r\n#                 process to the slaves incrementally.\r\n# 2) Diskless: The Redis master creates a new process that directly writes the\r\n#              RDB file to slave sockets, without touching the disk at all.\r\n#\r\n# With disk-backed replication, while the RDB file is generated, more slaves\r\n# can be queued and served with the RDB file as soon as the current child producing\r\n# the RDB file finishes its work. With diskless replication instead once\r\n# the transfer starts, new slaves arriving will be queued and a new transfer\r\n# will start when the current one terminates.\r\n#\r\n# When diskless replication is used, the master waits a configurable amount of\r\n# time (in seconds) before starting the transfer in the hope that multiple slaves\r\n# will arrive and the transfer can be parallelized.\r\n#\r\n# With slow disks and fast (large bandwidth) networks, diskless replication\r\n# works better.\r\nrepl-diskless-sync no\r\n\r\n# When diskless replication is enabled, it is possible to configure the delay\r\n# the server waits in order to spawn the child that transfers the RDB via socket\r\n# to the slaves.\r\n#\r\n# This is important since once the transfer starts, it is not possible to serve\r\n# new slaves arriving, that will be queued for the next RDB transfer, so the server\r\n# waits a delay in order to let more slaves arrive.\r\n#\r\n# The delay is specified in seconds, and by default is 5 seconds. To disable\r\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\r\nrepl-diskless-sync-delay 5\r\n\r\n# Slaves send PINGs to server in a predefined interval. It\'s possible to change\r\n# this interval with the repl_ping_slave_period option. The default value is 10\r\n# seconds.\r\n#\r\n# Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\r\n# 你可以改变这个时间间隔。默认为 10 秒。\r\n# repl-ping-slave-period 10\r\n\r\n# The following option sets the replication timeout for:\r\n#\r\n# 1) Bulk transfer I/O during SYNC, from the point of view of slave.\r\n# 2) Master timeout from the point of view of slaves (data, pings).\r\n# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).\r\n#\r\n# It is important to make sure that this value is greater than the value\r\n# specified for repl-ping-slave-period otherwise a timeout will be detected\r\n# every time there is low traffic between the master and the slave.\r\n#\r\n# 设置主从复制过期时间\r\n# 这个值一定要比 repl-ping-slave-period 大\r\n# repl-timeout 60\r\n\r\n# Disable TCP_NODELAY on the slave socket after SYNC?\r\n#\r\n# If you select "yes" Redis will use a smaller number of TCP packets and\r\n# less bandwidth to send data to slaves. But this can add a delay for\r\n# the data to appear on the slave side, up to 40 milliseconds with\r\n# Linux kernels using a default configuration.\r\n#\r\n# If you select "no" the delay for data to appear on the slave side will\r\n# be reduced but more bandwidth will be used for replication.\r\n#\r\n# By default we optimize for low latency, but in very high traffic conditions\r\n# or when the master and slaves are many hops away, turning this to "yes" may\r\n# be a good idea.\r\n# 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。\r\nrepl-disable-tcp-nodelay no\r\n\r\n# Set the replication backlog size. The backlog is a buffer that accumulates\r\n# slave data when slaves are disconnected for some time, so that when a slave\r\n# wants to reconnect again, often a full resync is not needed, but a partial\r\n# resync is enough, just passing the portion of data the slave missed while\r\n# disconnected.\r\n#\r\n# The bigger the replication backlog, the longer the time the slave can be\r\n# disconnected and later be able to perform a partial resynchronization.\r\n#\r\n# The backlog is only allocated once there is at least a slave connected.\r\n#\r\n# 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\r\n# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\r\n# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\r\n#\r\n# The biggest the replication backlog, the longer the time the slave can be\r\n# disconnected and later be able to perform a partial resynchronization.\r\n# 这个值越大，salve 可以断开连接的时间就越长。\r\n\r\n# repl-backlog-size 1mb\r\n\r\n# After a master has no longer connected slaves for some time, the backlog\r\n# will be freed. The following option configures the amount of seconds that\r\n# need to elapse, starting from the time the last slave disconnected, for\r\n# the backlog buffer to be freed.\r\n#\r\n# A value of 0 means to never release the backlog.\r\n#\r\n# 在某些时候，master 不再连接 slaves，backlog 将被释放。\r\n# 如果设置为 0 ，意味着绝不释放 backlog 。\r\n# repl-backlog-ttl 3600\r\n\r\n# The slave priority is an integer number published by Redis in the INFO output.\r\n# It is used by Redis Sentinel in order to select a slave to promote into a\r\n# master if the master is no longer working correctly.\r\n#\r\n# A slave with a low priority number is considered better for promotion, so\r\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\r\n# pick the one with priority 10, that is the lowest.\r\n#\r\n# However a special priority of 0 marks the slave as not able to perform the\r\n# role of master, so a slave with priority of 0 will never be selected by\r\n# Redis Sentinel for promotion.\r\n#\r\n# By default the priority is 100.\r\n# 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis\r\n# Sentinel会将priority值最小的slave提升为master。\r\n# 这个值越小，就越会被优先选中，需要注意的是，\r\n# 若该配置项为0，则对应的slave永远不会自动提升为master。\r\nslave-priority 100\r\n\r\n# It is possible for a master to stop accepting writes if there are less than\r\n# N slaves connected, having a lag less or equal than M seconds.\r\n#\r\n# The N slaves need to be in "online" state.\r\n#\r\n# The lag in seconds, that must be <= the specified value, is calculated from\r\n# the last ping received from the slave, that is usually sent every second.\r\n#\r\n# This option does not GUARANTEE that N replicas will accept the write, but\r\n# will limit the window of exposure for lost writes in case not enough slaves\r\n# are available, to the specified number of seconds\r\n#\r\n# For example to require at least 3 slaves with a lag <= 10 seconds use:\r\n#\r\n# min-slaves-to-write 3\r\n# min-slaves-max-lag 10\r\n#\r\n# Setting one or the other to 0 disables the feature.\r\n#\r\n# By default min-slaves-to-write is set to 0 (feature disabled) and\r\n# min-slaves-max-lag is set to 10.\r\n\r\n################################## SECURITY ###################################\r\n################################## 安全     ###################################\r\n\r\n# Require clients to issue AUTH <PASSWORD> before processing any other\r\n# commands.  This might be useful in environments in which you do not trust\r\n# others with access to the host running redis-server.\r\n#\r\n# This should stay commented out for backward compatibility and because most\r\n# people do not need auth (e.g. they run their own servers).\r\n#\r\n# Warning: since Redis is pretty fast an outside user can try up to\r\n# 150k passwords per second against a good box. This means that you should\r\n# use a very strong password otherwise it will be very easy to break.\r\n#\r\n# 设置连接redis的密码\r\n# redis速度相当快，一个外部用户在一秒钟进行150K次密码尝试，需指定强大的密码来防止暴力破解\r\nrequirepass set_enough_strong_passwd\r\n\r\n# Command renaming.\r\n#\r\n# It is possible to change the name of dangerous commands in a shared\r\n# environment. For instance the CONFIG command may be renamed into something\r\n# hard to guess so that it will still be available for internal-use tools\r\n# but not available for general clients.\r\n#\r\n# Example:\r\n#\r\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\r\n#\r\n# It is also possible to completely kill a command by renaming it into\r\n# an empty string:\r\n#\r\n# rename-command CONFIG ""\r\n#\r\n# Please note that changing the name of commands that are logged into the\r\n# AOF file or transmitted to slaves may cause problems.\r\n# 重命名一些高危命令，用来禁止高危命令\r\nrename-command FLUSHALL ZYzv6FOBdwflW2nX\r\nrename-command CONFIG aI7zwm1GDzMMrEi\r\nrename-command EVAL S9UHPKEpSvUJMM\r\nrename-command FLUSHDB D60FPVDJuip7gy6l\r\n\r\n################################### LIMITS ####################################\r\n################################### 限制   ####################################\r\n\r\n# Set the max number of connected clients at the same time. By default\r\n# this limit is set to 10000 clients, however if the Redis server is not\r\n# able to configure the process file limit to allow for the specified limit\r\n# the max number of allowed clients is set to the current file limit\r\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\r\n#\r\n# Once the limit is reached Redis will close all the new connections sending\r\n# an error \'max number of clients reached\'.\r\n#\r\n# 限制同时连接的客户数量,默认是10000\r\n# 当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到 error 信息\r\n# maxclients 10000\r\n\r\n# Don\'t use more memory than the specified amount of bytes.\r\n# When the memory limit is reached Redis will try to remove keys\r\n# according to the eviction policy selected (see maxmemory-policy).\r\n#\r\n# If Redis can\'t remove keys according to the policy, or if the policy is\r\n# set to \'noeviction\', Redis will start to reply with errors to commands\r\n# that would use more memory, like SET, LPUSH, and so on, and will continue\r\n# to reply to read-only commands like GET.\r\n#\r\n# This option is usually useful when using Redis as an LRU cache, or to set\r\n# a hard memory limit for an instance (using the \'noeviction\' policy).\r\n#\r\n# WARNING: If you have slaves attached to an instance with maxmemory on,\r\n# the size of the output buffers needed to feed the slaves are subtracted\r\n# from the used memory count, so that network problems / resyncs will\r\n# not trigger a loop where keys are evicted, and in turn the output\r\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\r\n# of more keys, and so forth until the database is completely emptied.\r\n#\r\n# In short... if you have slaves attached it is suggested that you set a lower\r\n# limit for maxmemory so that there is some free RAM on the system for slave\r\n# output buffers (but this is not needed if the policy is \'noeviction\').\r\n#\r\n# 设置redis能够使用的最大内存。\r\n# 达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key（设置过expire信息的key）\r\n# 在删除时,按照过期时间进行删除，最早将要被过期的key将最先被删除\r\n# 如果已到期或即将到期的key删光，仍进行set操作，那么将返回错误\r\n# 此时redis将不再接收写请求,只接收get请求。\r\n# maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用\r\n# maxmemory <bytes>\r\n\r\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\r\n# is reached. You can select among five behaviors:\r\n#\r\n# volatile-lru -> remove the key with an expire set using an LRU algorithm\r\n# allkeys-lru -> remove any key according to the LRU algorithm\r\n# volatile-random -> remove a random key with an expire set\r\n# allkeys-random -> remove a random key, any key\r\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\r\n# noeviction -> don\'t expire at all, just return an error on write operations\r\n#\r\n# Note: with any of the above policies, Redis will return an error on write\r\n#       operations, when there are no suitable keys for eviction.\r\n#\r\n#       At the date of writing these commands are: set setnx setex append\r\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\r\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\r\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\r\n#       getset mset msetnx exec sort\r\n#\r\n# The default is:\r\n#\r\n# maxmemory-policy noeviction\r\n\r\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\r\n# algorithms (in order to save memory), so you can tune it for speed or\r\n# accuracy. For default Redis will check five keys and pick the one that was\r\n# used less recently, you can change the sample size using the following\r\n# configuration directive.\r\n#\r\n# The default of 5 produces good enough results. 10 Approximates very closely\r\n# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.\r\n#\r\n# maxmemory-samples 5\r\n\r\n############################## APPEND ONLY MODE ###############################\r\n\r\n# By default Redis asynchronously dumps the dataset on disk. This mode is\r\n# good enough in many applications, but an issue with the Redis process or\r\n# a power outage may result into a few minutes of writes lost (depending on\r\n# the configured save points).\r\n#\r\n# The Append Only File is an alternative persistence mode that provides\r\n# much better durability. For instance using the default data fsync policy\r\n# (see later in the config file) Redis can lose just one second of writes in a\r\n# dramatic event like a server power outage, or a single write if something\r\n# wrong with the Redis process itself happens, but the operating system is\r\n# still running correctly.\r\n#\r\n# AOF and RDB persistence can be enabled at the same time without problems.\r\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\r\n# with the better durability guarantees.\r\n#\r\n# Please check http://redis.io/topics/persistence for more information.\r\n\r\n# redis 默认每次更新操作后会在后台异步的把数据库镜像备份到磁盘，但该备份非常耗时，且备份不宜太频繁\r\n# redis 同步数据文件是按上面save条件来同步的\r\n# 如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失\r\n# 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式\r\n# 开启append only 模式后,redis 将每一次写操作请求都追加到appendonly.aof 文件中\r\n# redis重新启动时,会从该文件恢复出之前的状态。\r\n# 但可能会造成 appendonly.aof 文件过大，所以redis支持BGREWRITEAOF 指令，对appendonly.aof重新整理,默认是不开启的。\r\n\r\nappendonly no\r\n\r\n# The name of the append only file (default: "appendonly.aof")\r\n# 默认为appendonly.aof。\r\nappendfilename "appendonly.aof"\r\n\r\n# The fsync() call tells the Operating System to actually write data on disk\r\n# instead of waiting for more data in the output buffer. Some OS will really flush\r\n# data on disk, some other OS will just try to do it ASAP.\r\n#\r\n# Redis supports three different modes:\r\n#\r\n# no: don\'t fsync, just let the OS flush the data when it wants. Faster.\r\n# always: fsync after every write to the append only log. Slow, Safest.\r\n# everysec: fsync only one time every second. Compromise.\r\n#\r\n# The default is "everysec", as that\'s usually the right compromise between\r\n# speed and data safety. It\'s up to you to understand if you can relax this to\r\n# "no" that will let the operating system flush the output buffer when\r\n# it wants, for better performances (but if you can live with the idea of\r\n# some data loss consider the default persistence mode that\'s snapshotting),\r\n# or on the contrary, use "always" that\'s very slow but a bit safer than\r\n# everysec.\r\n#\r\n# More details please check the following article:\r\n# http://antirez.com/post/redis-persistence-demystified.html\r\n#\r\n# If unsure, use "everysec".\r\n\r\n# 设置对 appendonly.aof 文件进行同步的频率,有三种选择always、everysec、no，默认是everysec表示每秒同步一次。\r\n# always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。\r\n# no表示等操作系统进行数据缓存同步到磁盘，都进行同步,everysec 表示对写操作进行累积,每秒同步一次\r\n# appendfsync always\r\n# appendfsync everysec\r\n# appendfsync no\r\n\r\n# When the AOF fsync policy is set to always or everysec, and a background\r\n# saving process (a background save or AOF log background rewriting) is\r\n# performing a lot of I/O against the disk, in some Linux configurations\r\n# Redis may block too long on the fsync() call. Note that there is no fix for\r\n# this currently, as even performing fsync in a different thread will block\r\n# our synchronous write(2) call.\r\n#\r\n# In order to mitigate this problem it\'s possible to use the following option\r\n# that will prevent fsync() from being called in the main process while a\r\n# BGSAVE or BGREWRITEAOF is in progress.\r\n#\r\n# This means that while another child is saving, the durability of Redis is\r\n# the same as "appendfsync none". In practical terms, this means that it is\r\n# possible to lose up to 30 seconds of log in the worst scenario (with the\r\n# default Linux settings).\r\n#\r\n# If you have latency problems turn this to "yes". Otherwise leave it as\r\n# "no" that is the safest pick from the point of view of durability.\r\n# 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。\r\nno-appendfsync-on-rewrite yes\r\n\r\n# Automatic rewrite of the append only file.\r\n# Redis is able to automatically rewrite the log file implicitly calling\r\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\r\n#\r\n# This is how it works: Redis remembers the size of the AOF file after the\r\n# latest rewrite (if no rewrite has happened since the restart, the size of\r\n# the AOF at startup is used).\r\n#\r\n# This base size is compared to the current size. If the current size is\r\n# bigger than the specified percentage, the rewrite is triggered. Also\r\n# you need to specify a minimal size for the AOF file to be rewritten, this\r\n# is useful to avoid rewriting the AOF file even if the percentage increase\r\n# is reached but it is still pretty small.\r\n#\r\n# Specify a percentage of zero in order to disable the automatic AOF\r\n# rewrite feature.\r\n# 指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时，就会触发background rewrite。若配置为0，则会禁用自动rewrite\r\nauto-aof-rewrite-percentage 100\r\n\r\n# 指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite。即这两个配置项同时满足时，才会触发rewrite。\r\nauto-aof-rewrite-min-size 64mb\r\n\r\n# An AOF file may be found to be truncated at the end during the Redis\r\n# startup process, when the AOF data gets loaded back into memory.\r\n# This may happen when the system where Redis is running\r\n# crashes, especially when an ext4 filesystem is mounted without the\r\n# data=ordered option (however this can\'t happen when Redis itself\r\n# crashes or aborts but the operating system still works correctly).\r\n#\r\n# Redis can either exit with an error when this happens, or load as much\r\n# data as possible (the default now) and start if the AOF file is found\r\n# to be truncated at the end. The following option controls this behavior.\r\n#\r\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\r\n# the Redis server starts emitting a log to inform the user of the event.\r\n# Otherwise if the option is set to no, the server aborts with an error\r\n# and refuses to start. When the option is set to no, the user requires\r\n# to fix the AOF file using the "redis-check-aof" utility before to restart\r\n# the server.\r\n#\r\n# Note that if the AOF file will be found to be corrupted in the middle\r\n# the server will still exit with an error. This option only applies when\r\n# Redis will try to read more data from the AOF file but not enough bytes\r\n# will be found.\r\naof-load-truncated yes\r\n\r\n################################ LUA SCRIPTING  ###############################\r\n\r\n# Max execution time of a Lua script in milliseconds.\r\n#\r\n# If the maximum execution time is reached Redis will log that a script is\r\n# still in execution after the maximum allowed time and will start to\r\n# reply to queries with an error.\r\n#\r\n# When a long running script exceeds the maximum execution time only the\r\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\r\n# used to stop a script that did not yet called write commands. The second\r\n# is the only way to shut down the server in the case a write command was\r\n# already issued by the script but the user doesn\'t want to wait for the natural\r\n# termination of the script.\r\n#\r\n# Set it to 0 or a negative value for unlimited execution without warnings.\r\n# 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000\r\nlua-time-limit 5000\r\n\r\n################################ REDIS CLUSTER  ###############################\r\n#\r\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however\r\n# in order to mark it as "mature" we need to wait for a non trivial percentage\r\n# of users to deploy it in production.\r\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n#\r\n# Normal Redis instances can\'t be part of a Redis Cluster; only nodes that are\r\n# started as cluster nodes can. In order to start a Redis instance as a\r\n# cluster node enable the cluster support uncommenting the following:\r\n#\r\n# cluster-enabled yes\r\n\r\n# Every cluster node has a cluster configuration file. This file is not\r\n# intended to be edited by hand. It is created and updated by Redis nodes.\r\n# Every Redis Cluster node requires a different cluster configuration file.\r\n# Make sure that instances running in the same system do not have\r\n# overlapping cluster configuration file names.\r\n#\r\n# cluster-config-file nodes-6379.conf\r\n\r\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\r\n# for it to be considered in failure state.\r\n# Most other internal time limits are multiple of the node timeout.\r\n#\r\n# cluster-node-timeout 15000\r\n\r\n# A slave of a failing master will avoid to start a failover if its data\r\n# looks too old.\r\n#\r\n# There is no simple way for a slave to actually have a exact measure of\r\n# its "data age", so the following two checks are performed:\r\n#\r\n# 1) If there are multiple slaves able to failover, they exchange messages\r\n#    in order to try to give an advantage to the slave with the best\r\n#    replication offset (more data from the master processed).\r\n#    Slaves will try to get their rank by offset, and apply to the start\r\n#    of the failover a delay proportional to their rank.\r\n#\r\n# 2) Every single slave computes the time of the last interaction with\r\n#    its master. This can be the last ping or command received (if the master\r\n#    is still in the "connected" state), or the time that elapsed since the\r\n#    disconnection with the master (if the replication link is currently down).\r\n#    If the last interaction is too old, the slave will not try to failover\r\n#    at all.\r\n#\r\n# The point "2" can be tuned by user. Specifically a slave will not perform\r\n# the failover if, since the last interaction with the master, the time\r\n# elapsed is greater than:\r\n#\r\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\r\n#\r\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\r\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\r\n# slave will not try to failover if it was not able to talk with the master\r\n# for longer than 310 seconds.\r\n#\r\n# A large slave-validity-factor may allow slaves with too old data to failover\r\n# a master, while a too small value may prevent the cluster from being able to\r\n# elect a slave at all.\r\n#\r\n# For maximum availability, it is possible to set the slave-validity-factor\r\n# to a value of 0, which means, that slaves will always try to failover the\r\n# master regardless of the last time they interacted with the master.\r\n# (However they\'ll always try to apply a delay proportional to their\r\n# offset rank).\r\n#\r\n# Zero is the only value able to guarantee that when all the partitions heal\r\n# the cluster will always be able to continue.\r\n#\r\n# cluster-slave-validity-factor 10\r\n\r\n# Cluster slaves are able to migrate to orphaned masters, that are masters\r\n# that are left without working slaves. This improves the cluster ability\r\n# to resist to failures as otherwise an orphaned master can\'t be failed over\r\n# in case of failure if it has no working slaves.\r\n#\r\n# Slaves migrate to orphaned masters only if there are still at least a\r\n# given number of other working slaves for their old master. This number\r\n# is the "migration barrier". A migration barrier of 1 means that a slave\r\n# will migrate only if there is at least 1 other working slave for its master\r\n# and so forth. It usually reflects the number of slaves you want for every\r\n# master in your cluster.\r\n#\r\n# Default is 1 (slaves migrate only if their masters remain with at least\r\n# one slave). To disable migration just set it to a very large value.\r\n# A value of 0 can be set but is useful only for debugging and dangerous\r\n# in production.\r\n#\r\n# cluster-migration-barrier 1\r\n\r\n# By default Redis Cluster nodes stop accepting queries if they detect there\r\n# is at least an hash slot uncovered (no available node is serving it).\r\n# This way if the cluster is partially down (for example a range of hash slots\r\n# are no longer covered) all the cluster becomes, eventually, unavailable.\r\n# It automatically returns available as soon as all the slots are covered again.\r\n#\r\n# However sometimes you want the subset of the cluster which is working,\r\n# to continue to accept queries for the part of the key space that is still\r\n# covered. In order to do so, just set the cluster-require-full-coverage\r\n# option to no.\r\n#\r\n# cluster-require-full-coverage yes\r\n\r\n# In order to setup your cluster make sure to read the documentation\r\n# available at http://redis.io web site.\r\n\r\n################################## SLOW LOG ###################################\r\n\r\n# The Redis Slow Log is a system to log queries that exceeded a specified\r\n# execution time. The execution time does not include the I/O operations\r\n# like talking with the client, sending the reply and so forth,\r\n# but just the time needed to actually execute the command (this is the only\r\n# stage of command execution where the thread is blocked and can not serve\r\n# other requests in the meantime).\r\n#\r\n# You can configure the slow log with two parameters: one tells Redis\r\n# what is the execution time, in microseconds, to exceed in order for the\r\n# command to get logged, and the other parameter is the length of the\r\n# slow log. When a new command is logged the oldest one is removed from the\r\n# queue of logged commands.\r\n\r\n# The following time is expressed in microseconds, so 1000000 is equivalent\r\n# to one second. Note that a negative number disables the slow log, while\r\n# a value of zero forces the logging of every command.\r\nslowlog-log-slower-than 10000\r\n\r\n# There is no limit to this length. Just be aware that it will consume memory.\r\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\r\nslowlog-max-len 128\r\n\r\n################################ LATENCY MONITOR ##############################\r\n\r\n# The Redis latency monitoring subsystem samples different operations\r\n# at runtime in order to collect data related to possible sources of\r\n# latency of a Redis instance.\r\n#\r\n# Via the LATENCY command this information is available to the user that can\r\n# print graphs and obtain reports.\r\n#\r\n# The system only logs operations that were performed in a time equal or\r\n# greater than the amount of milliseconds specified via the\r\n# latency-monitor-threshold configuration directive. When its value is set\r\n# to zero, the latency monitor is turned off.\r\n#\r\n# By default latency monitoring is disabled since it is mostly not needed\r\n# if you don\'t have latency issues, and collecting data has a performance\r\n# impact, that while very small, can be measured under big load. Latency\r\n# monitoring can easily be enabled at runtime using the command\r\n# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.\r\nlatency-monitor-threshold 0\r\n\r\n############################# EVENT NOTIFICATION ##############################\r\n\r\n# Redis can notify Pub/Sub clients about events happening in the key space.\r\n# This feature is documented at http://redis.io/topics/notifications\r\n#\r\n# For instance if keyspace events notification is enabled, and a client\r\n# performs a DEL operation on key "foo" stored in the Database 0, two\r\n# messages will be published via Pub/Sub:\r\n#\r\n# PUBLISH __keyspace@0__:foo del\r\n# PUBLISH __keyevent@0__:del foo\r\n#\r\n# It is possible to select the events that Redis will notify among a set\r\n# of classes. Every class is identified by a single character:\r\n#\r\n#  K     Keyspace events, published with __keyspace@<db>__ prefix.\r\n#  E     Keyevent events, published with __keyevent@<db>__ prefix.\r\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\r\n#  $     String commands\r\n#  l     List commands\r\n#  s     Set commands\r\n#  h     Hash commands\r\n#  z     Sorted set commands\r\n#  x     Expired events (events generated every time a key expires)\r\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\r\n#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.\r\n#\r\n#  The "notify-keyspace-events" takes as argument a string that is composed\r\n#  of zero or multiple characters. The empty string means that notifications\r\n#  are disabled.\r\n#\r\n#  Example: to enable list and generic events, from the point of view of the\r\n#           event name, use:\r\n#\r\n#  notify-keyspace-events Elg\r\n#\r\n#  Example 2: to get the stream of the expired keys subscribing to channel\r\n#             name __keyevent@0__:expired use:\r\n#\r\n#  notify-keyspace-events Ex\r\n#\r\n#  By default all notifications are disabled because most users don\'t need\r\n#  this feature and the feature has some overhead. Note that if you don\'t\r\n#  specify at least one of K or E, no events will be delivered.\r\nnotify-keyspace-events ""\r\n\r\n############################### ADVANCED CONFIG ###############################\r\n\r\n# Hashes are encoded using a memory efficient data structure when they have a\r\n# small number of entries, and the biggest entry does not exceed a given\r\n# threshold. These thresholds can be configured using the following directives.\r\n# 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，\r\n# hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值\r\nhash-max-ziplist-entries 512\r\nhash-max-ziplist-value 64\r\n\r\n# Similarly to hashes, small lists are also encoded in a special way in order\r\n# to save a lot of space. The special representation is only used when\r\n# you are under the following limits:\r\n# list数据类型多少节点以下会采用去指针的紧凑存储格式。\r\n# list数据类型节点值大小小于多少字节会采用紧凑存储格式。\r\nlist-max-ziplist-entries 512\r\nlist-max-ziplist-value 64\r\n\r\n# Sets have a special encoding in just one case: when a set is composed\r\n# of just strings that happen to be integers in radix 10 in the range\r\n# of 64 bit signed integers.\r\n# The following configuration setting sets the limit in the size of the\r\n# set in order to use this special memory saving encoding.\r\n# set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。\r\nset-max-intset-entries 512\r\n\r\n# Similarly to hashes and lists, sorted sets are also specially encoded in\r\n# order to save a lot of space. This encoding is only used when the length and\r\n# elements of a sorted set are below the following limits:\r\n\r\n# zsort数据类型多少节点以下会采用去指针的紧凑存储格式。\r\n# zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\r\nzset-max-ziplist-entries 128\r\nzset-max-ziplist-value 64\r\n\r\n# HyperLogLog sparse representation bytes limit. The limit includes the\r\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\r\n# this limit, it is converted into the dense representation.\r\n#\r\n# A value greater than 16000 is totally useless, since at that point the\r\n# dense representation is more memory efficient.\r\n#\r\n# The suggested value is ~ 3000 in order to have the benefits of\r\n# the space efficient encoding without slowing down too much PFADD,\r\n# which is O(N) with the sparse encoding. The value can be raised to\r\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\r\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\r\nhll-sparse-max-bytes 3000\r\n\r\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\r\n# order to help rehashing the main Redis hash table (the one mapping top-level\r\n# keys to values). The hash table implementation Redis uses (see dict.c)\r\n# performs a lazy rehashing: the more operation you run into a hash table\r\n# that is rehashing, the more rehashing "steps" are performed, so if the\r\n# server is idle the rehashing is never complete and some more memory is used\r\n# by the hash table.\r\n#\r\n# The default is to use this millisecond 10 times every second in order to\r\n# actively rehash the main dictionaries, freeing memory when possible.\r\n#\r\n# If unsure:\r\n# use "activerehashing no" if you have hard latency requirements and it is\r\n# not a good thing in your environment that Redis can reply from time to time\r\n# to queries with 2 milliseconds delay.\r\n#\r\n# use "activerehashing yes" if you don\'t have such hard requirements but\r\n# want to free memory asap when possible.\r\n\r\n# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用\r\n# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。\r\n# 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存\r\nactiverehashing yes\r\n\r\n# The client output buffer limits can be used to force disconnection of clients\r\n# that are not reading data from the server fast enough for some reason (a\r\n# common reason is that a Pub/Sub client can\'t consume messages as fast as the\r\n# publisher can produce them).\r\n#\r\n# The limit can be set differently for the three different classes of clients:\r\n#\r\n# normal -> normal clients including MONITOR clients\r\n# slave  -> slave clients\r\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\r\n#\r\n# The syntax of every client-output-buffer-limit directive is the following:\r\n#\r\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\r\n#\r\n# A client is immediately disconnected once the hard limit is reached, or if\r\n# the soft limit is reached and remains reached for the specified number of\r\n# seconds (continuously).\r\n# So for instance if the hard limit is 32 megabytes and the soft limit is\r\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\r\n# if the size of the output buffers reach 32 megabytes, but will also get\r\n# disconnected if the client reaches 16 megabytes and continuously overcomes\r\n# the limit for 10 seconds.\r\n#\r\n# By default normal clients are not limited because they don\'t receive data\r\n# without asking (in a push way), but just after a request, so only\r\n# asynchronous clients may create a scenario where data is requested faster\r\n# than it can read.\r\n#\r\n# Instead there is a default limit for pubsub and slave clients, since\r\n# subscribers and slaves receive data in a push fashion.\r\n#\r\n# Both the hard or the soft limit can be disabled by setting them to zero.\r\nclient-output-buffer-limit normal 0 0 0\r\nclient-output-buffer-limit slave 256mb 64mb 60\r\nclient-output-buffer-limit pubsub 32mb 8mb 60\r\n\r\n# Redis calls an internal function to perform many background tasks, like\r\n# closing connections of clients in timeout, purging expired keys that are\r\n# never requested, and so forth.\r\n#\r\n# Not all tasks are performed with the same frequency, but Redis checks for\r\n# tasks to perform according to the specified "hz" value.\r\n#\r\n# By default "hz" is set to 10. Raising the value will use more CPU when\r\n# Redis is idle, but at the same time will make Redis more responsive when\r\n# there are many keys expiring at the same time, and timeouts may be\r\n# handled with more precision.\r\n#\r\n# The range is between 1 and 500, however a value over 100 is usually not\r\n# a good idea. Most users should use the default of 10 and raise this up to\r\n# 100 only in environments where very low latency is required.\r\nhz 10\r\n\r\n# When a child rewrites the AOF file, if the following option is enabled\r\n# the file will be fsync-ed every 32 MB of data generated. This is useful\r\n# in order to commit the file to the disk more incrementally and avoid\r\n# big latency spikes.\r\n# aof rewrite过程中,是否采取增量文件同步策略,默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数\r\naof-rewrite-incremental-fsync yes\r\n\r\n\r\n# redis数据存储\r\nredis的存储分为内存存储、磁盘存储和log文件三部分，配置文件中有三个参数对其进行配置。\r\nsave seconds updates，save配置，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。可多个条件配合，默认配置了三个条件。\r\nappendonly yes/no ，appendonly配置，指出是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。\r\nappendfsync no/always/everysec ，appendfsync配置，no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。\r\n```',contentRendered:'<h1 id="redis-学习" tabindex="-1"><a class="header-anchor" href="#redis-学习" aria-hidden="true">#</a> redis 学习</h1>\n<p>设置后台启动\nredis.conf 中</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>daemonize no // yes为后台启动\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动服务命令为：redis-server\n后台启动时可以使用redis-cli连接redis服务器</p>\n<h2 id="redis-特点" tabindex="-1"><a class="header-anchor" href="#redis-特点" aria-hidden="true">#</a> redis 特点</h2>\n<p>单线程，io多路复用\n可持久化</p>\n<h2 id="redis简单操作" tabindex="-1"><a class="header-anchor" href="#redis简单操作" aria-hidden="true">#</a> redis简单操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set key value</td>\n<td>设置key为value</td>\n</tr>\n<tr>\n<td>keys *</td>\n<td>查看当前库所有key</td>\n</tr>\n<tr>\n<td>exists key</td>\n<td>判断某个key是否存在</td>\n</tr>\n<tr>\n<td>type key</td>\n<td>查看这个key时什么类型</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>删除指定的key数据</td>\n</tr>\n<tr>\n<td>unlink key</td>\n<td>根据value选择非阻塞删除</td>\n</tr>\n<tr>\n<td>expire key 10</td>\n<td>为指定key设置过期时间（10）是10s</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看该key还有多久过期-1表示永不过气，-2表示已经过期</td>\n</tr>\n<tr>\n<td>select 0</td>\n<td>选择数据库0</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>查看有多少key</td>\n</tr>\n<tr>\n<td>flushdb</td>\n<td>清空当前db</td>\n</tr>\n<tr>\n<td>flushall</td>\n<td>清空全部库</td>\n</tr>\n<tr>\n<td>get key</td>\n<td>取值</td>\n</tr>\n<tr>\n<td>append key value</td>\n<td>在key 后添加value</td>\n</tr>\n<tr>\n<td>strlen key</td>\n<td>获取键的长度</td>\n</tr>\n<tr>\n<td>setnx key value</td>\n<td>当值不存在时设置值</td>\n</tr>\n<tr>\n<td>incr key</td>\n<td>值自增</td>\n</tr>\n<tr>\n<td>decr key</td>\n<td>值自减</td>\n</tr>\n<tr>\n<td>incrby/decrby key step</td>\n<td>值增/减step</td>\n</tr>\n<tr>\n<td>mset key v1 v2 v3...</td>\n<td>设置多个value</td>\n</tr>\n<tr>\n<td>mget k1 k2 k3</td>\n<td></td>\n</tr>\n<tr>\n<td>msetnx nx k1 v1 k2 v2 k3 v3</td>\n<td>原子操作，若有一个不成功，都不成功</td>\n</tr>\n<tr>\n<td>getrange key index1,index2</td>\n<td>获取范围内的值</td>\n</tr>\n<tr>\n<td>set range key index value</td>\n<td>用v符号key 从index开始的</td>\n</tr>\n<tr>\n<td>setex key ttl value</td>\n<td>设置value 同时设置ttl</td>\n</tr>\n<tr>\n<td>getset key value</td>\n<td>获取旧值设置新值</td>\n</tr>\n</tbody>\n</table>\n<h2 id="常用数据类型" tabindex="-1"><a class="header-anchor" href="#常用数据类型" aria-hidden="true">#</a> 常用数据类型</h2>\n<h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3>\n<p>二进制安全 redis中一个value做多512M\n可修改，内存结构类似java的arrarylist，预分配冗余空间类似capacity，size，小于1M时每次扩容翻倍，大于1M每次增加1M</p>\n<h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3>\n<p>单键多值，是一个双向链表\n内存结构，当元素少时，内存中连续分配，数据多的时分链式分配</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lpush/rpush key v1 v2 v3</td>\n<td>左边插入，右边插入</td>\n</tr>\n<tr>\n<td>lpop/rpop key</td>\n<td>从key左边/右边删除一个元素</td>\n</tr>\n<tr>\n<td>rpoplpush k1 k2</td>\n<td>从k1右边删除一个插入到k2左边</td>\n</tr>\n<tr>\n<td>lrange key start stop</td>\n<td>按索引下标获得元素</td>\n</tr>\n<tr>\n<td>lindex key index</td>\n<td>按下索引下标获得元素</td>\n</tr>\n<tr>\n<td>llen key</td>\n<td>获列表长度</td>\n</tr>\n<tr>\n<td>linsert key before v1 newvalue</td>\n<td>在value的后面插入newvalue</td>\n</tr>\n<tr>\n<td>lrem key n value</td>\n<td>从左边查出n个value</td>\n</tr>\n<tr>\n<td>lset key index value</td>\n<td>将列表key下标为index的值替换成value</td>\n</tr>\n</tbody>\n</table>\n<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3>\n<p>哈希表实现</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sadd key v1 v2...</td>\n<td>将几个元素加入key</td>\n</tr>\n<tr>\n<td>smenbers key</td>\n<td>取出key中元素</td>\n</tr>\n<tr>\n<td>sismenber key value</td>\n<td>判断key中是否存在value</td>\n</tr>\n<tr>\n<td>scard key</td>\n<td>返回个数</td>\n</tr>\n<tr>\n<td>srem key v1 v2...</td>\n<td>删除key中元素</td>\n</tr>\n<tr>\n<td>spop key</td>\n<td>随机从key中删除一个元素</td>\n</tr>\n<tr>\n<td>srandmenber key n</td>\n<td>随机从key中取出n个元素</td>\n</tr>\n<tr>\n<td>smove source destination value</td>\n<td>把集合中一个值从一个集合移动到另一个</td>\n</tr>\n<tr>\n<td>sinter k1 k2</td>\n<td>返回交集元素</td>\n</tr>\n<tr>\n<td>sunion k1 k2</td>\n<td>返回并集元素</td>\n</tr>\n<tr>\n<td>sdiff  k1 k2</td>\n<td>返回差集元素</td>\n</tr>\n</tbody>\n</table>\n<h3 id="hasp" tabindex="-1"><a class="header-anchor" href="#hasp" aria-hidden="true">#</a> Hasp</h3>\n<p>就是一个map，存键值对</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hset key field value</td>\n<td>给key中的field赋值value</td>\n</tr>\n<tr>\n<td>hget key field</td>\n<td>取出key中field的值</td>\n</tr>\n<tr>\n<td>hmset key f1 v1 f2 v2 ...</td>\n<td>批量设置</td>\n</tr>\n<tr>\n<td>hkeys key</td>\n<td>列出hash中所有field</td>\n</tr>\n<tr>\n<td>hexists key field</td>\n<td>查看key中是否存在field</td>\n</tr>\n<tr>\n<td>hvals key</td>\n<td>列出该key中所有value</td>\n</tr>\n<tr>\n<td>hincrby key field increment</td>\n<td>为key中fieldfield 加上增量</td>\n</tr>\n<tr>\n<td>hsetnx key field value</td>\n<td>若field不存在则设置field为value</td>\n</tr>\n</tbody>\n</table>\n<h3 id="zset-有序列表" tabindex="-1"><a class="header-anchor" href="#zset-有序列表" aria-hidden="true">#</a> Zset 有序列表</h3>\n<p>是一个没有重复元素的字符串集合，每个域关联一个大小，大小有序\nZset 内部由hash表和跳跃表组成，跳跃表给元素value排序查找</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zadd key score1 value1...</td>\n<td>将一或多个s,v插入key中</td>\n</tr>\n<tr>\n<td>zrange key start stop [withscores]</td>\n<td>返回有序集key中下标在start到stop之间的元素，若带withscores则同时返回scores</td>\n</tr>\n<tr>\n<td>zrangebyscore key minmax [withscores][limit offset count]</td>\n<td>返回key中score介于min和max之间的包含等于按score值递增排列</td>\n</tr>\n<tr>\n<td>zincrby key increment value</td>\n<td>为key的score加上增量</td>\n</tr>\n<tr>\n<td>zrevrangebyscore key maxmin [withscores][limit offset count]</td>\n<td>降序</td>\n</tr>\n<tr>\n<td>zrem key value</td>\n<td>删除key中value</td>\n</tr>\n<tr>\n<td>zcount key min max</td>\n<td>统计该区间内的元素</td>\n</tr>\n<tr>\n<td>zrank key value</td>\n<td>返回key中该value排名，0为第一个</td>\n</tr>\n</tbody>\n</table>\n<h3 id="bitmaps" tabindex="-1"><a class="header-anchor" href="#bitmaps" aria-hidden="true">#</a> Bitmaps</h3>\n<p>本身是字符串但是能对位操作</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setbit key offset value</td>\n<td>设置key中某个offset的值（0/1），offset从0开始</td>\n</tr>\n<tr>\n<td>getbit key offset</td>\n<td>得到key中offset的值</td>\n</tr>\n<tr>\n<td>bitcount key [start stop]</td>\n<td>统计1的数</td>\n</tr>\n<tr>\n<td>bitop and/or/not/xor  destkey k1 k2 k3..</td>\n<td>对k1,k2,k3做op操作结果保存在destkey中</td>\n</tr>\n</tbody>\n</table>\n<h3 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLoglog</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pfadd key element ...</td>\n<td>向key中添加element</td>\n</tr>\n<tr>\n<td>pfcount key</td>\n<td>返回key中元素个数</td>\n</tr>\n<tr>\n<td>pfmerge dkey s1key s2key...</td>\n<td>将s1,s2...中合并放到dkey中</td>\n</tr>\n</tbody>\n</table>\n<h3 id="geospatial" tabindex="-1"><a class="header-anchor" href="#geospatial" aria-hidden="true">#</a> Geospatial</h3>\n<p>方便放地理位置</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>geoadd key longitude latitude menber ...</td>\n<td>添加key 经度纬度名称</td>\n</tr>\n<tr>\n<td>geopos key menber</td>\n<td>从key中获取menber的经纬度</td>\n</tr>\n<tr>\n<td>geodist key menber1 menber2 [m|km|ft]</td>\n<td>获取两地点的直线距离</td>\n</tr>\n<tr>\n<td>georadius key longitude latitude radius m|km|ft</td>\n<td>找出给定坐标半径内的地点</td>\n</tr>\n</tbody>\n</table>\n<h2 id="redis-订阅发布" tabindex="-1"><a class="header-anchor" href="#redis-订阅发布" aria-hidden="true">#</a> Redis 订阅发布</h2>\n<p>redis客户端之间可以订阅发布消息</p>\n<p>命令\n|subscribe channel|订阅channel1|\n|publish channel msg|发布消息到channel1|</p>\n<h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2>\n<h3 id="乐观锁-悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-悲观锁" aria-hidden="true">#</a> 乐观锁，悲观锁</h3>\n<p>乐观锁，每次拿数据不加锁，修改时对比版本（数据会附加版本信息？），使用checkandset（）\n悲观锁:每次拿数据加锁。</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>multi</td>\n<td>定义一组操作</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>执行</td>\n</tr>\n<tr>\n<td>discard</td>\n<td>放弃</td>\n</tr>\n<tr>\n<td>watch key...</td>\n<td>watch key，采用乐观锁，如果在事务执行前key发生改变那么事务会被打断</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>各指令按序执行，不会被其他事务打断，执行中有错误则错误的那个执行失败，其他的正常执行，输入指令时有错误的，直接退出multi</li>\n<li>没有隔离级别的概念，队列中命令没有被提交时不会被执行</li>\n<li>不保证原子性，事务中一条命令失败其后的继续执行，没有回滚</li>\n</ol>\n<h2 id="redis-配置" tabindex="-1"><a class="header-anchor" href="#redis-配置" aria-hidden="true">#</a> Redis 配置</h2>\n<p>配置文件大小写不敏感</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code># Redis configuration file example.\n#\n# Note that in order to read the configuration file, Redis must be\n# started with the file path as first argument:\n#\n# ./redis-server /path/to/redis.conf\n\n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k => 1000 bytes\n# 1kb => 1024 bytes\n# 1m => 1000000 bytes\n# 1mb => 1024*1024 bytes\n# 1g => 1000000000 bytes\n# 1gb => 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n\n################################## INCLUDES ###################################\n################################## 包含     ###################################\n\n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all Redis servers but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"\n# from admin or Redis Sentinel. Since Redis always uses the last processed\n# line as value of a configuration directive, you\'d better put includes\n# at the beginning of this file to avoid overwriting config change at runtime.\n#\n# If instead you are interested in using includes to override configuration\n# options, it is better to use include as the last line.\n#\n# 假如说你有一个可用于所有的 redis server 的标准配置模板，\n# 但针对某些 server 又需要一些个性化的设置，\n# 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。\n#\n# 但是要注意哦，include 是不能被 config rewrite 命令改写的\n# 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，\n# 以避免在运行时覆盖配置的改变，相反，你就把它放在后面\n# include /path/to/local.conf\n# include /path/to/other.conf\n\n################################ GENERAL  #####################################\n################################ 常用     #####################################\n\n# By default Redis does not run as a daemon. Use \'yes\' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\n# 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。\n# 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。\ndaemonize yes\n\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\n# default. You can specify a custom pid file location here.\n# 当 Redis 以守护进程的方式运行的时候，Redis 默认会把 pid 文件放在/var/run/redis.pid\n# 可配置到其他地址，当运行多个 redis 服务时，需要指定不同的 pid 文件和端口\n# 指定存储Redis进程号的文件路径\npidfile /var/run/redis.pid\n\n# Accept connections on the specified port, default is 6379.\n# If port 0 is specified Redis will not listen on a TCP socket.\n# 端口，默认端口是6379，生产环境中建议更改端口号，安全性更高\n# 如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。\nport 9966\n\n# TCP listen() backlog.\n#\n# In high requests-per-second environments you need an high backlog in order\n# to avoid slow clients connections issues. Note that the Linux kernel\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\n# in order to get the desired effect.\n# TCP 监听的最大容纳数量\n# 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，\n# 当系统并发量大并且客户端速度缓慢的时候，你需要把这个值调高以避免客户端连接缓慢的问题。\n# Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，默认是511，而Linux的默认参数值是128。\n# 所以可以将这二个参数一起参考设定，你以便达到你的预期。\n#  \ntcp-backlog 511\n\n# By default Redis listens for connections from all the network interfaces\n# available on the server. It is possible to listen to just one or multiple\n# interfaces using the "bind" configuration directive, followed by one or\n# more IP addresses.\n#\n# Examples:\n#\n# bind 192.168.1.100 10.0.0.1\n# 有时候为了安全起见，redis一般都是监听127.0.0.1 但是有时候又有同网段能连接的需求，当然可以绑定0.0.0.0 用iptables来控制访问权限，或者设置redis访问密码来保证数据安全\n\n# 不设置将处理所有请求,建议生产环境中设置，有个误区：bind是用来限制外网IP访问的，其实不是，限制外网ip访问可以通过iptables；如：-A INPUT -s 10.10.1.0/24 -p tcp -m state --state NEW -m tcp --dport 9966 -j ACCEPT ；\n# 实际上，bind ip 绑定的是redis所在服务器网卡的ip，当然127.0.0.1也是可以的\n#如果绑定一个外网ip，就会报错：Creating Server TCP listening socket xxx.xxx.xxx.xxx:9966: bind: Cannot assign requested address\n\n# bind 127.0.0.1\nbind 127.0.0.1 10.10.1.3\n\n# 假设绑定是以上ip，使用 netstat -anp|grep 9966 会发现，这两个ip被bind，其中10.10.1.3是服务器网卡的ip\n# tcp        0      0 10.10.1.3:9966         0.0.0.0:*                   LISTEN      11188/redis-server  \n# tcp        0      0 127.0.0.1:9966         0.0.0.0:*                   LISTEN      11188/redis-server \n\n\n# Specify the path for the Unix socket that will be used to listen for\n# incoming connections. There is no default, so Redis will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /tmp/redis.sock\n# unixsocketperm 700\n\n# Close the connection after a client is idle for N seconds (0 to disable)\n# 客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。\ntimeout 0\n\n# TCP keepalive.\n#\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\n# of communication. This is useful for two reasons:\n#\n# 1) Detect dead peers.\n# 2) Take the connection alive from the point of view of network\n#    equipment in the middle.\n#\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\n# Note that to close the connection the double of the time is needed.\n# On other kernels the period depends on the kernel configuration.\n#\n# A reasonable value for this option is 60 seconds.\n\n# tcp 心跳包。\n#\n# 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。\n# 这个之所有有用，主要由两个原因：\n#\n# 1) 防止死的 peers\n# 2) Take the connection alive from the point of view of network\n#    equipment in the middle.\n#\n# 推荐一个合理的值就是60秒\ntcp-keepalive 0\n\n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\n# 日志记录等级，4个可选值debug,verbose,notice,warning\n# 可以是下面的这些值：\n# debug (适用于开发或测试阶段)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (适用于生产环境)\n# warning (仅仅一些重要的消息被记录)\nloglevel notice\n\n# Specify the log file name. Also the empty string can be used to force\n# Redis to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\n#配置 log 文件地址,默认打印在命令行终端的窗口上，也可设为/dev/null屏蔽日志、\nlogfile "/data/logs/redis/redis.log"\n\n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# 要想把日志记录到系统日志，就把它改成 yes，\n# 也可以可选择性的更新其他的syslog 参数以达到你的要求\n# syslog-enabled no\n\n# Specify the syslog identity.\n# 设置 syslog 的 identity。\n# syslog-ident redis\n\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n\n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT &lt;dbid> where\n# dbid is a number between 0 and \'databases\'-1\n# 可用的数据库数，默认值为16，默认数据库为0，数据库范围在0-（database-1）之间\ndatabases 16\n\n################################ SNAPSHOTTING  ################################\n################################ 快照          ################################\n#\n# Save the DB on disk:\n#\n#   save &lt;seconds> &lt;changes>\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behaviour will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving completely by commenting out all "save" lines.\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save ""\n# 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。\n\n#    if(在60秒之内有10000个keys发生变化时){\n#      进行镜像备份\n#    }else if(在300秒之内有10个keys发生了变化){\n#      进行镜像备份\n#    }else if(在900秒之内有1个keys发生了变化){\n#      进行镜像备份\n#    }\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n#:/ disaster will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\n# 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，\n# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，\n# 否则就会没人注意到灾难的发生。\n#\n# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。\n#\n# 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# For default that\'s set to \'yes\' as it\'s almost always a win.\n# If you want to save some CPU in the saving child set it to \'no\' but\n# the dataset will likely be bigger if you have compressible values or keys.\n# 在进行备份时,是否进行压缩\n# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串\n# 默认都设为 yes\n# 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，\n# 不过这个数据集可能就会比较大\nrdbcompression yes\n\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.    \n# 读取和写入的时候是否支持CRC64校验，默认是开启的\nrdbchecksum yes\n\n# The filename where to dump the DB\n# 备份文件的文件名\ndbfilename dump.rdb\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the \'dbfilename\' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\n# 数据库备份的文件放置的路径\n# 路径跟文件名分开配置是因为 Redis 备份时，先会将当前数据库的状态写入到一个临时文件\n# 等备份完成时，再把该临时文件替换为上面所指定的文件\n# 而临时文件和上面所配置的备份文件都会放在这个指定的路径当中\n# 默认值为 ./\ndir /data/data/redis/\n\n################################# REPLICATION #################################\n################################# 主从复制    #################################\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\n# another Redis server. A few things to understand ASAP about Redis replication.\n#\n# 1) Redis replication is asynchronous, but you can configure a master to\n#    stop accepting writes if it appears to be not connected with at least\n#    a given number of slaves.\n# 2) Redis slaves are able to perform a partial resynchronization with the\n#    master if the replication link is lost for a relatively small amount of\n#    time. You may want to configure the replication backlog size (see the next\n#    sections of this file) with a sensible value depending on your needs.\n# 3) Replication is automatic and does not need user intervention. After a\n#    network partition slaves automatically try to reconnect to masters\n#    and resynchronize with them.\n#\n# 设置该数据库为其他数据库的从数据库\n# slaveof &lt;masterip> &lt;masterport> 当本机为从服务时，设置主服务的IP及端口\n# slaveof &lt;masterip> &lt;masterport>\n\n# If the master is password protected (using the "requirepass" configuration\n# directive below) it is possible to tell the slave to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the slave request.\n#\n# 指定与主数据库连接时需要的密码验证\n# masterauth &lt;master-password> 当本机为从服务时，设置访问master服务器的密码\n# masterauth &lt;master-password>\n\n# When a slave loses its connection with the master, or when the replication\n# is still in progress, the slave can act in two different ways:\n#\n# 1) if slave-serve-stale-data is set to \'yes\' (the default) the slave will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) if slave-serve-stale-data is set to \'no\' the slave will reply with\n#    an error "SYNC with master in progress" to all the kind of commands\n#    but to INFO and SLAVEOF.\n#\n# 当slave服务器和master服务器失去连接后，或者当数据正在复制传输的时候，如果此参数值设置“yes”，slave服务器可以继续接受客户端的请求，否则，会返回给请求的客户端如下信息“SYNC with master in progress”,除了INFO，SLAVEOF这两个命令\nslave-serve-stale-data yes\n\n# You can configure a slave instance to accept writes or not. Writing against\n# a slave instance may be useful to store some ephemeral data (because data\n# written on a slave will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since Redis 2.6 by default slaves are read-only.\n#\n# Note: read only slaves are not designed to be exposed to untrusted clients\n# on the internet. It\'s just a protection layer against misuse of the instance.\n# Still a read only slave exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\n# security of read only slaves using \'rename-command\' to shadow all the\n# administrative / dangerous commands.\n# 是否允许slave服务器节点只提供读服务\nslave-read-only yes\n\n# Replication SYNC strategy: disk or socket.\n#\n# -------------------------------------------------------\n# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY\n# -------------------------------------------------------\n#\n# New slaves and reconnecting slaves that are not able to continue the replication\n# process just receiving differences, need to do what is called a "full\n# synchronization". An RDB file is transmitted from the master to the slaves.\n# The transmission can happen in two different ways:\n#\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\n#                 file on disk. Later the file is transferred by the parent\n#                 process to the slaves incrementally.\n# 2) Diskless: The Redis master creates a new process that directly writes the\n#              RDB file to slave sockets, without touching the disk at all.\n#\n# With disk-backed replication, while the RDB file is generated, more slaves\n# can be queued and served with the RDB file as soon as the current child producing\n# the RDB file finishes its work. With diskless replication instead once\n# the transfer starts, new slaves arriving will be queued and a new transfer\n# will start when the current one terminates.\n#\n# When diskless replication is used, the master waits a configurable amount of\n# time (in seconds) before starting the transfer in the hope that multiple slaves\n# will arrive and the transfer can be parallelized.\n#\n# With slow disks and fast (large bandwidth) networks, diskless replication\n# works better.\nrepl-diskless-sync no\n\n# When diskless replication is enabled, it is possible to configure the delay\n# the server waits in order to spawn the child that transfers the RDB via socket\n# to the slaves.\n#\n# This is important since once the transfer starts, it is not possible to serve\n# new slaves arriving, that will be queued for the next RDB transfer, so the server\n# waits a delay in order to let more slaves arrive.\n#\n# The delay is specified in seconds, and by default is 5 seconds. To disable\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\nrepl-diskless-sync-delay 5\n\n# Slaves send PINGs to server in a predefined interval. It\'s possible to change\n# this interval with the repl_ping_slave_period option. The default value is 10\n# seconds.\n#\n# Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。\n# 你可以改变这个时间间隔。默认为 10 秒。\n# repl-ping-slave-period 10\n\n# The following option sets the replication timeout for:\n#\n# 1) Bulk transfer I/O during SYNC, from the point of view of slave.\n# 2) Master timeout from the point of view of slaves (data, pings).\n# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-slave-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the slave.\n#\n# 设置主从复制过期时间\n# 这个值一定要比 repl-ping-slave-period 大\n# repl-timeout 60\n\n# Disable TCP_NODELAY on the slave socket after SYNC?\n#\n# If you select "yes" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to slaves. But this can add a delay for\n# the data to appear on the slave side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select "no" the delay for data to appear on the slave side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and slaves are many hops away, turning this to "yes" may\n# be a good idea.\n# 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。\nrepl-disable-tcp-nodelay no\n\n# Set the replication backlog size. The backlog is a buffer that accumulates\n# slave data when slaves are disconnected for some time, so that when a slave\n# wants to reconnect again, often a full resync is not needed, but a partial\n# resync is enough, just passing the portion of data the slave missed while\n# disconnected.\n#\n# The bigger the replication backlog, the longer the time the slave can be\n# disconnected and later be able to perform a partial resynchronization.\n#\n# The backlog is only allocated once there is at least a slave connected.\n#\n# 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时\n# 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，\n# 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。\n#\n# The biggest the replication backlog, the longer the time the slave can be\n# disconnected and later be able to perform a partial resynchronization.\n# 这个值越大，salve 可以断开连接的时间就越长。\n\n# repl-backlog-size 1mb\n\n# After a master has no longer connected slaves for some time, the backlog\n# will be freed. The following option configures the amount of seconds that\n# need to elapse, starting from the time the last slave disconnected, for\n# the backlog buffer to be freed.\n#\n# A value of 0 means to never release the backlog.\n#\n# 在某些时候，master 不再连接 slaves，backlog 将被释放。\n# 如果设置为 0 ，意味着绝不释放 backlog 。\n# repl-backlog-ttl 3600\n\n# The slave priority is an integer number published by Redis in the INFO output.\n# It is used by Redis Sentinel in order to select a slave to promote into a\n# master if the master is no longer working correctly.\n#\n# A slave with a low priority number is considered better for promotion, so\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\n# pick the one with priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the slave as not able to perform the\n# role of master, so a slave with priority of 0 will never be selected by\n# Redis Sentinel for promotion.\n#\n# By default the priority is 100.\n# 指定slave的优先级。在不只1个slave存在的部署环境下，当master宕机时，Redis\n# Sentinel会将priority值最小的slave提升为master。\n# 这个值越小，就越会被优先选中，需要注意的是，\n# 若该配置项为0，则对应的slave永远不会自动提升为master。\nslave-priority 100\n\n# It is possible for a master to stop accepting writes if there are less than\n# N slaves connected, having a lag less or equal than M seconds.\n#\n# The N slaves need to be in "online" state.\n#\n# The lag in seconds, that must be &lt;= the specified value, is calculated from\n# the last ping received from the slave, that is usually sent every second.\n#\n# This option does not GUARANTEE that N replicas will accept the write, but\n# will limit the window of exposure for lost writes in case not enough slaves\n# are available, to the specified number of seconds\n#\n# For example to require at least 3 slaves with a lag &lt;= 10 seconds use:\n#\n# min-slaves-to-write 3\n# min-slaves-max-lag 10\n#\n# Setting one or the other to 0 disables the feature.\n#\n# By default min-slaves-to-write is set to 0 (feature disabled) and\n# min-slaves-max-lag is set to 10.\n\n################################## SECURITY ###################################\n################################## 安全     ###################################\n\n# Require clients to issue AUTH &lt;PASSWORD> before processing any other\n# commands.  This might be useful in environments in which you do not trust\n# others with access to the host running redis-server.\n#\n# This should stay commented out for backward compatibility and because most\n# people do not need auth (e.g. they run their own servers).\n#\n# Warning: since Redis is pretty fast an outside user can try up to\n# 150k passwords per second against a good box. This means that you should\n# use a very strong password otherwise it will be very easy to break.\n#\n# 设置连接redis的密码\n# redis速度相当快，一个外部用户在一秒钟进行150K次密码尝试，需指定强大的密码来防止暴力破解\nrequirepass set_enough_strong_passwd\n\n# Command renaming.\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# hard to guess so that it will still be available for internal-use tools\n# but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command by renaming it into\n# an empty string:\n#\n# rename-command CONFIG ""\n#\n# Please note that changing the name of commands that are logged into the\n# AOF file or transmitted to slaves may cause problems.\n# 重命名一些高危命令，用来禁止高危命令\nrename-command FLUSHALL ZYzv6FOBdwflW2nX\nrename-command CONFIG aI7zwm1GDzMMrEi\nrename-command EVAL S9UHPKEpSvUJMM\nrename-command FLUSHDB D60FPVDJuip7gy6l\n\n################################### LIMITS ####################################\n################################### 限制   ####################################\n\n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the Redis server is not\n# able to configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached Redis will close all the new connections sending\n# an error \'max number of clients reached\'.\n#\n# 限制同时连接的客户数量,默认是10000\n# 当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到 error 信息\n# maxclients 10000\n\n# Don\'t use more memory than the specified amount of bytes.\n# When the memory limit is reached Redis will try to remove keys\n# according to the eviction policy selected (see maxmemory-policy).\n#\n# If Redis can\'t remove keys according to the policy, or if the policy is\n# set to \'noeviction\', Redis will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using Redis as an LRU cache, or to set\n# a hard memory limit for an instance (using the \'noeviction\' policy).\n#\n# WARNING: If you have slaves attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the slaves are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have slaves attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for slave\n# output buffers (but this is not needed if the policy is \'noeviction\').\n#\n# 设置redis能够使用的最大内存。\n# 达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key（设置过expire信息的key）\n# 在删除时,按照过期时间进行删除，最早将要被过期的key将最先被删除\n# 如果已到期或即将到期的key删光，仍进行set操作，那么将返回错误\n# 此时redis将不再接收写请求,只接收get请求。\n# maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用\n# maxmemory &lt;bytes>\n\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached. You can select among five behaviors:\n#\n# volatile-lru -> remove the key with an expire set using an LRU algorithm\n# allkeys-lru -> remove any key according to the LRU algorithm\n# volatile-random -> remove a random key with an expire set\n# allkeys-random -> remove a random key, any key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\n# noeviction -> don\'t expire at all, just return an error on write operations\n#\n# Note: with any of the above policies, Redis will return an error on write\n#       operations, when there are no suitable keys for eviction.\n#\n#       At the date of writing these commands are: set setnx setex append\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\n#       getset mset msetnx exec sort\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can tune it for speed or\n# accuracy. For default Redis will check five keys and pick the one that was\n# used less recently, you can change the sample size using the following\n# configuration directive.\n#\n# The default of 5 produces good enough results. 10 Approximates very closely\n# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.\n#\n# maxmemory-samples 5\n\n############################## APPEND ONLY MODE ###############################\n\n# By default Redis asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the Redis process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) Redis can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the Redis process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Please check http://redis.io/topics/persistence for more information.\n\n# redis 默认每次更新操作后会在后台异步的把数据库镜像备份到磁盘，但该备份非常耗时，且备份不宜太频繁\n# redis 同步数据文件是按上面save条件来同步的\n# 如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失\n# 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式\n# 开启append only 模式后,redis 将每一次写操作请求都追加到appendonly.aof 文件中\n# redis重新启动时,会从该文件恢复出之前的状态。\n# 但可能会造成 appendonly.aof 文件过大，所以redis支持BGREWRITEAOF 指令，对appendonly.aof重新整理,默认是不开启的。\n\nappendonly no\n\n# The name of the append only file (default: "appendonly.aof")\n# 默认为appendonly.aof。\nappendfilename "appendonly.aof"\n\n# The fsync() call tells the Operating System to actually write data on disk\n# instead of waiting for more data in the output buffer. Some OS will really flush\n# data on disk, some other OS will just try to do it ASAP.\n#\n# Redis supports three different modes:\n#\n# no: don\'t fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log. Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is "everysec", as that\'s usually the right compromise between\n# speed and data safety. It\'s up to you to understand if you can relax this to\n# "no" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that\'s snapshotting),\n# or on the contrary, use "always" that\'s very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use "everysec".\n\n# 设置对 appendonly.aof 文件进行同步的频率,有三种选择always、everysec、no，默认是everysec表示每秒同步一次。\n# always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。\n# no表示等操作系统进行数据缓存同步到磁盘，都进行同步,everysec 表示对写操作进行累积,每秒同步一次\n# appendfsync always\n# appendfsync everysec\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it\'s possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving, the durability of Redis is\n# the same as "appendfsync none". In practical terms, this means that it is\n# possible to lose up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n#\n# If you have latency problems turn this to "yes". Otherwise leave it as\n# "no" that is the safest pick from the point of view of durability.\n# 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。\nno-appendfsync-on-rewrite yes\n\n# Automatic rewrite of the append only file.\n# Redis is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\n#\n# This is how it works: Redis remembers the size of the AOF file after the\n# latest rewrite (if no rewrite has happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n# 指定Redis重写aof文件的条件，默认为100，表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上次afo文件大小的100%时，就会触发background rewrite。若配置为0，则会禁用自动rewrite\nauto-aof-rewrite-percentage 100\n\n# 指定触发rewrite的aof文件大小。若aof文件小于该值，即使当前文件的增量比例达到auto-aof-rewrite-percentage的配置值，也不会触发自动rewrite。即这两个配置项同时满足时，才会触发rewrite。\nauto-aof-rewrite-min-size 64mb\n\n# An AOF file may be found to be truncated at the end during the Redis\n# startup process, when the AOF data gets loaded back into memory.\n# This may happen when the system where Redis is running\n# crashes, especially when an ext4 filesystem is mounted without the\n# data=ordered option (however this can\'t happen when Redis itself\n# crashes or aborts but the operating system still works correctly).\n#\n# Redis can either exit with an error when this happens, or load as much\n# data as possible (the default now) and start if the AOF file is found\n# to be truncated at the end. The following option controls this behavior.\n#\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\n# the Redis server starts emitting a log to inform the user of the event.\n# Otherwise if the option is set to no, the server aborts with an error\n# and refuses to start. When the option is set to no, the user requires\n# to fix the AOF file using the "redis-check-aof" utility before to restart\n# the server.\n#\n# Note that if the AOF file will be found to be corrupted in the middle\n# the server will still exit with an error. This option only applies when\n# Redis will try to read more data from the AOF file but not enough bytes\n# will be found.\naof-load-truncated yes\n\n################################ LUA SCRIPTING  ###############################\n\n# Max execution time of a Lua script in milliseconds.\n#\n# If the maximum execution time is reached Redis will log that a script is\n# still in execution after the maximum allowed time and will start to\n# reply to queries with an error.\n#\n# When a long running script exceeds the maximum execution time only the\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\n# used to stop a script that did not yet called write commands. The second\n# is the only way to shut down the server in the case a write command was\n# already issued by the script but the user doesn\'t want to wait for the natural\n# termination of the script.\n#\n# Set it to 0 or a negative value for unlimited execution without warnings.\n# 一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间，默认为5000\nlua-time-limit 5000\n\n################################ REDIS CLUSTER  ###############################\n#\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however\n# in order to mark it as "mature" we need to wait for a non trivial percentage\n# of users to deploy it in production.\n# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n#\n# Normal Redis instances can\'t be part of a Redis Cluster; only nodes that are\n# started as cluster nodes can. In order to start a Redis instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n\n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by Redis nodes.\n# Every Redis Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system do not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are multiple of the node timeout.\n#\n# cluster-node-timeout 15000\n\n# A slave of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a slave to actually have a exact measure of\n# its "data age", so the following two checks are performed:\n#\n# 1) If there are multiple slaves able to failover, they exchange messages\n#    in order to try to give an advantage to the slave with the best\n#    replication offset (more data from the master processed).\n#    Slaves will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single slave computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the "connected" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the slave will not try to failover\n#    at all.\n#\n# The point "2" can be tuned by user. Specifically a slave will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * slave-validity-factor) + repl-ping-slave-period\n#\n# So for example if node-timeout is 30 seconds, and the slave-validity-factor\n# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the\n# slave will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large slave-validity-factor may allow slaves with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a slave at all.\n#\n# For maximum availability, it is possible to set the slave-validity-factor\n# to a value of 0, which means, that slaves will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they\'ll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-slave-validity-factor 10\n\n# Cluster slaves are able to migrate to orphaned masters, that are masters\n# that are left without working slaves. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can\'t be failed over\n# in case of failure if it has no working slaves.\n#\n# Slaves migrate to orphaned masters only if there are still at least a\n# given number of other working slaves for their old master. This number\n# is the "migration barrier". A migration barrier of 1 means that a slave\n# will migrate only if there is at least 1 other working slave for its master\n# and so forth. It usually reflects the number of slaves you want for every\n# master in your cluster.\n#\n# Default is 1 (slaves migrate only if their masters remain with at least\n# one slave). To disable migration just set it to a very large value.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n\n# By default Redis Cluster nodes stop accepting queries if they detect there\n# is at least an hash slot uncovered (no available node is serving it).\n# This way if the cluster is partially down (for example a range of hash slots\n# are no longer covered) all the cluster becomes, eventually, unavailable.\n# It automatically returns available as soon as all the slots are covered again.\n#\n# However sometimes you want the subset of the cluster which is working,\n# to continue to accept queries for the part of the key space that is still\n# covered. In order to do so, just set the cluster-require-full-coverage\n# option to no.\n#\n# cluster-require-full-coverage yes\n\n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n################################## SLOW LOG ###################################\n\n# The Redis Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n#\n# You can configure the slow log with two parameters: one tells Redis\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n\n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n\n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n\n################################ LATENCY MONITOR ##############################\n\n# The Redis latency monitoring subsystem samples different operations\n# at runtime in order to collect data related to possible sources of\n# latency of a Redis instance.\n#\n# Via the LATENCY command this information is available to the user that can\n# print graphs and obtain reports.\n#\n# The system only logs operations that were performed in a time equal or\n# greater than the amount of milliseconds specified via the\n# latency-monitor-threshold configuration directive. When its value is set\n# to zero, the latency monitor is turned off.\n#\n# By default latency monitoring is disabled since it is mostly not needed\n# if you don\'t have latency issues, and collecting data has a performance\n# impact, that while very small, can be measured under big load. Latency\n# monitoring can easily be enabled at runtime using the command\n# "CONFIG SET latency-monitor-threshold &lt;milliseconds>" if needed.\nlatency-monitor-threshold 0\n\n############################# EVENT NOTIFICATION ##############################\n\n# Redis can notify Pub/Sub clients about events happening in the key space.\n# This feature is documented at http://redis.io/topics/notifications\n#\n# For instance if keyspace events notification is enabled, and a client\n# performs a DEL operation on key "foo" stored in the Database 0, two\n# messages will be published via Pub/Sub:\n#\n# PUBLISH __keyspace@0__:foo del\n# PUBLISH __keyevent@0__:del foo\n#\n# It is possible to select the events that Redis will notify among a set\n# of classes. Every class is identified by a single character:\n#\n#  K     Keyspace events, published with __keyspace@&lt;db>__ prefix.\n#  E     Keyevent events, published with __keyevent@&lt;db>__ prefix.\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\n#  $     String commands\n#  l     List commands\n#  s     Set commands\n#  h     Hash commands\n#  z     Sorted set commands\n#  x     Expired events (events generated every time a key expires)\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\n#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.\n#\n#  The "notify-keyspace-events" takes as argument a string that is composed\n#  of zero or multiple characters. The empty string means that notifications\n#  are disabled.\n#\n#  Example: to enable list and generic events, from the point of view of the\n#           event name, use:\n#\n#  notify-keyspace-events Elg\n#\n#  Example 2: to get the stream of the expired keys subscribing to channel\n#             name __keyevent@0__:expired use:\n#\n#  notify-keyspace-events Ex\n#\n#  By default all notifications are disabled because most users don\'t need\n#  this feature and the feature has some overhead. Note that if you don\'t\n#  specify at least one of K or E, no events will be delivered.\nnotify-keyspace-events ""\n\n############################### ADVANCED CONFIG ###############################\n\n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\n# 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，\n# hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n\n# Similarly to hashes, small lists are also encoded in a special way in order\n# to save a lot of space. The special representation is only used when\n# you are under the following limits:\n# list数据类型多少节点以下会采用去指针的紧凑存储格式。\n# list数据类型节点值大小小于多少字节会采用紧凑存储格式。\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\n\n# Sets have a special encoding in just one case: when a set is composed\n# of just strings that happen to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\n# set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。\nset-max-intset-entries 512\n\n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\n\n# zsort数据类型多少节点以下会采用去指针的紧凑存储格式。\n# zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# HyperLogLog sparse representation bytes limit. The limit includes the\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\n# this limit, it is converted into the dense representation.\n#\n# A value greater than 16000 is totally useless, since at that point the\n# dense representation is more memory efficient.\n#\n# The suggested value is ~ 3000 in order to have the benefits of\n# the space efficient encoding without slowing down too much PFADD,\n# which is O(N) with the sparse encoding. The value can be raised to\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\nhll-sparse-max-bytes 3000\n\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main Redis hash table (the one mapping top-level\n# keys to values). The hash table implementation Redis uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into a hash table\n# that is rehashing, the more rehashing "steps" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n#\n# The default is to use this millisecond 10 times every second in order to\n# actively rehash the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use "activerehashing no" if you have hard latency requirements and it is\n# not a good thing in your environment that Redis can reply from time to time\n# to queries with 2 milliseconds delay.\n#\n# use "activerehashing yes" if you don\'t have such hard requirements but\n# want to free memory asap when possible.\n\n# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用\n# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。\n# 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存\nactiverehashing yes\n\n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can\'t consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -> normal clients including MONITOR clients\n# slave  -> slave clients\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit &lt;class> &lt;hard limit> &lt;soft limit> &lt;soft seconds>\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don\'t receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and slave clients, since\n# subscribers and slaves receive data in a push fashion.\n#\n# Both the hard or the soft limit can be disabled by setting them to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Redis calls an internal function to perform many background tasks, like\n# closing connections of clients in timeout, purging expired keys that are\n# never requested, and so forth.\n#\n# Not all tasks are performed with the same frequency, but Redis checks for\n# tasks to perform according to the specified "hz" value.\n#\n# By default "hz" is set to 10. Raising the value will use more CPU when\n# Redis is idle, but at the same time will make Redis more responsive when\n# there are many keys expiring at the same time, and timeouts may be\n# handled with more precision.\n#\n# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n\n# When a child rewrites the AOF file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\n# aof rewrite过程中,是否采取增量文件同步策略,默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步,这样可以减少aof大文件写入对磁盘的操作次数\naof-rewrite-incremental-fsync yes\n\n\n# redis数据存储\nredis的存储分为内存存储、磁盘存储和log文件三部分，配置文件中有三个参数对其进行配置。\nsave seconds updates，save配置，指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。可多个条件配合，默认配置了三个条件。\nappendonly yes/no ，appendonly配置，指出是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。\nappendfsync no/always/everysec ，appendfsync配置，no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br><span class="line-number">350</span><br><span class="line-number">351</span><br><span class="line-number">352</span><br><span class="line-number">353</span><br><span class="line-number">354</span><br><span class="line-number">355</span><br><span class="line-number">356</span><br><span class="line-number">357</span><br><span class="line-number">358</span><br><span class="line-number">359</span><br><span class="line-number">360</span><br><span class="line-number">361</span><br><span class="line-number">362</span><br><span class="line-number">363</span><br><span class="line-number">364</span><br><span class="line-number">365</span><br><span class="line-number">366</span><br><span class="line-number">367</span><br><span class="line-number">368</span><br><span class="line-number">369</span><br><span class="line-number">370</span><br><span class="line-number">371</span><br><span class="line-number">372</span><br><span class="line-number">373</span><br><span class="line-number">374</span><br><span class="line-number">375</span><br><span class="line-number">376</span><br><span class="line-number">377</span><br><span class="line-number">378</span><br><span class="line-number">379</span><br><span class="line-number">380</span><br><span class="line-number">381</span><br><span class="line-number">382</span><br><span class="line-number">383</span><br><span class="line-number">384</span><br><span class="line-number">385</span><br><span class="line-number">386</span><br><span class="line-number">387</span><br><span class="line-number">388</span><br><span class="line-number">389</span><br><span class="line-number">390</span><br><span class="line-number">391</span><br><span class="line-number">392</span><br><span class="line-number">393</span><br><span class="line-number">394</span><br><span class="line-number">395</span><br><span class="line-number">396</span><br><span class="line-number">397</span><br><span class="line-number">398</span><br><span class="line-number">399</span><br><span class="line-number">400</span><br><span class="line-number">401</span><br><span class="line-number">402</span><br><span class="line-number">403</span><br><span class="line-number">404</span><br><span class="line-number">405</span><br><span class="line-number">406</span><br><span class="line-number">407</span><br><span class="line-number">408</span><br><span class="line-number">409</span><br><span class="line-number">410</span><br><span class="line-number">411</span><br><span class="line-number">412</span><br><span class="line-number">413</span><br><span class="line-number">414</span><br><span class="line-number">415</span><br><span class="line-number">416</span><br><span class="line-number">417</span><br><span class="line-number">418</span><br><span class="line-number">419</span><br><span class="line-number">420</span><br><span class="line-number">421</span><br><span class="line-number">422</span><br><span class="line-number">423</span><br><span class="line-number">424</span><br><span class="line-number">425</span><br><span class="line-number">426</span><br><span class="line-number">427</span><br><span class="line-number">428</span><br><span class="line-number">429</span><br><span class="line-number">430</span><br><span class="line-number">431</span><br><span class="line-number">432</span><br><span class="line-number">433</span><br><span class="line-number">434</span><br><span class="line-number">435</span><br><span class="line-number">436</span><br><span class="line-number">437</span><br><span class="line-number">438</span><br><span class="line-number">439</span><br><span class="line-number">440</span><br><span class="line-number">441</span><br><span class="line-number">442</span><br><span class="line-number">443</span><br><span class="line-number">444</span><br><span class="line-number">445</span><br><span class="line-number">446</span><br><span class="line-number">447</span><br><span class="line-number">448</span><br><span class="line-number">449</span><br><span class="line-number">450</span><br><span class="line-number">451</span><br><span class="line-number">452</span><br><span class="line-number">453</span><br><span class="line-number">454</span><br><span class="line-number">455</span><br><span class="line-number">456</span><br><span class="line-number">457</span><br><span class="line-number">458</span><br><span class="line-number">459</span><br><span class="line-number">460</span><br><span class="line-number">461</span><br><span class="line-number">462</span><br><span class="line-number">463</span><br><span class="line-number">464</span><br><span class="line-number">465</span><br><span class="line-number">466</span><br><span class="line-number">467</span><br><span class="line-number">468</span><br><span class="line-number">469</span><br><span class="line-number">470</span><br><span class="line-number">471</span><br><span class="line-number">472</span><br><span class="line-number">473</span><br><span class="line-number">474</span><br><span class="line-number">475</span><br><span class="line-number">476</span><br><span class="line-number">477</span><br><span class="line-number">478</span><br><span class="line-number">479</span><br><span class="line-number">480</span><br><span class="line-number">481</span><br><span class="line-number">482</span><br><span class="line-number">483</span><br><span class="line-number">484</span><br><span class="line-number">485</span><br><span class="line-number">486</span><br><span class="line-number">487</span><br><span class="line-number">488</span><br><span class="line-number">489</span><br><span class="line-number">490</span><br><span class="line-number">491</span><br><span class="line-number">492</span><br><span class="line-number">493</span><br><span class="line-number">494</span><br><span class="line-number">495</span><br><span class="line-number">496</span><br><span class="line-number">497</span><br><span class="line-number">498</span><br><span class="line-number">499</span><br><span class="line-number">500</span><br><span class="line-number">501</span><br><span class="line-number">502</span><br><span class="line-number">503</span><br><span class="line-number">504</span><br><span class="line-number">505</span><br><span class="line-number">506</span><br><span class="line-number">507</span><br><span class="line-number">508</span><br><span class="line-number">509</span><br><span class="line-number">510</span><br><span class="line-number">511</span><br><span class="line-number">512</span><br><span class="line-number">513</span><br><span class="line-number">514</span><br><span class="line-number">515</span><br><span class="line-number">516</span><br><span class="line-number">517</span><br><span class="line-number">518</span><br><span class="line-number">519</span><br><span class="line-number">520</span><br><span class="line-number">521</span><br><span class="line-number">522</span><br><span class="line-number">523</span><br><span class="line-number">524</span><br><span class="line-number">525</span><br><span class="line-number">526</span><br><span class="line-number">527</span><br><span class="line-number">528</span><br><span class="line-number">529</span><br><span class="line-number">530</span><br><span class="line-number">531</span><br><span class="line-number">532</span><br><span class="line-number">533</span><br><span class="line-number">534</span><br><span class="line-number">535</span><br><span class="line-number">536</span><br><span class="line-number">537</span><br><span class="line-number">538</span><br><span class="line-number">539</span><br><span class="line-number">540</span><br><span class="line-number">541</span><br><span class="line-number">542</span><br><span class="line-number">543</span><br><span class="line-number">544</span><br><span class="line-number">545</span><br><span class="line-number">546</span><br><span class="line-number">547</span><br><span class="line-number">548</span><br><span class="line-number">549</span><br><span class="line-number">550</span><br><span class="line-number">551</span><br><span class="line-number">552</span><br><span class="line-number">553</span><br><span class="line-number">554</span><br><span class="line-number">555</span><br><span class="line-number">556</span><br><span class="line-number">557</span><br><span class="line-number">558</span><br><span class="line-number">559</span><br><span class="line-number">560</span><br><span class="line-number">561</span><br><span class="line-number">562</span><br><span class="line-number">563</span><br><span class="line-number">564</span><br><span class="line-number">565</span><br><span class="line-number">566</span><br><span class="line-number">567</span><br><span class="line-number">568</span><br><span class="line-number">569</span><br><span class="line-number">570</span><br><span class="line-number">571</span><br><span class="line-number">572</span><br><span class="line-number">573</span><br><span class="line-number">574</span><br><span class="line-number">575</span><br><span class="line-number">576</span><br><span class="line-number">577</span><br><span class="line-number">578</span><br><span class="line-number">579</span><br><span class="line-number">580</span><br><span class="line-number">581</span><br><span class="line-number">582</span><br><span class="line-number">583</span><br><span class="line-number">584</span><br><span class="line-number">585</span><br><span class="line-number">586</span><br><span class="line-number">587</span><br><span class="line-number">588</span><br><span class="line-number">589</span><br><span class="line-number">590</span><br><span class="line-number">591</span><br><span class="line-number">592</span><br><span class="line-number">593</span><br><span class="line-number">594</span><br><span class="line-number">595</span><br><span class="line-number">596</span><br><span class="line-number">597</span><br><span class="line-number">598</span><br><span class="line-number">599</span><br><span class="line-number">600</span><br><span class="line-number">601</span><br><span class="line-number">602</span><br><span class="line-number">603</span><br><span class="line-number">604</span><br><span class="line-number">605</span><br><span class="line-number">606</span><br><span class="line-number">607</span><br><span class="line-number">608</span><br><span class="line-number">609</span><br><span class="line-number">610</span><br><span class="line-number">611</span><br><span class="line-number">612</span><br><span class="line-number">613</span><br><span class="line-number">614</span><br><span class="line-number">615</span><br><span class="line-number">616</span><br><span class="line-number">617</span><br><span class="line-number">618</span><br><span class="line-number">619</span><br><span class="line-number">620</span><br><span class="line-number">621</span><br><span class="line-number">622</span><br><span class="line-number">623</span><br><span class="line-number">624</span><br><span class="line-number">625</span><br><span class="line-number">626</span><br><span class="line-number">627</span><br><span class="line-number">628</span><br><span class="line-number">629</span><br><span class="line-number">630</span><br><span class="line-number">631</span><br><span class="line-number">632</span><br><span class="line-number">633</span><br><span class="line-number">634</span><br><span class="line-number">635</span><br><span class="line-number">636</span><br><span class="line-number">637</span><br><span class="line-number">638</span><br><span class="line-number">639</span><br><span class="line-number">640</span><br><span class="line-number">641</span><br><span class="line-number">642</span><br><span class="line-number">643</span><br><span class="line-number">644</span><br><span class="line-number">645</span><br><span class="line-number">646</span><br><span class="line-number">647</span><br><span class="line-number">648</span><br><span class="line-number">649</span><br><span class="line-number">650</span><br><span class="line-number">651</span><br><span class="line-number">652</span><br><span class="line-number">653</span><br><span class="line-number">654</span><br><span class="line-number">655</span><br><span class="line-number">656</span><br><span class="line-number">657</span><br><span class="line-number">658</span><br><span class="line-number">659</span><br><span class="line-number">660</span><br><span class="line-number">661</span><br><span class="line-number">662</span><br><span class="line-number">663</span><br><span class="line-number">664</span><br><span class="line-number">665</span><br><span class="line-number">666</span><br><span class="line-number">667</span><br><span class="line-number">668</span><br><span class="line-number">669</span><br><span class="line-number">670</span><br><span class="line-number">671</span><br><span class="line-number">672</span><br><span class="line-number">673</span><br><span class="line-number">674</span><br><span class="line-number">675</span><br><span class="line-number">676</span><br><span class="line-number">677</span><br><span class="line-number">678</span><br><span class="line-number">679</span><br><span class="line-number">680</span><br><span class="line-number">681</span><br><span class="line-number">682</span><br><span class="line-number">683</span><br><span class="line-number">684</span><br><span class="line-number">685</span><br><span class="line-number">686</span><br><span class="line-number">687</span><br><span class="line-number">688</span><br><span class="line-number">689</span><br><span class="line-number">690</span><br><span class="line-number">691</span><br><span class="line-number">692</span><br><span class="line-number">693</span><br><span class="line-number">694</span><br><span class="line-number">695</span><br><span class="line-number">696</span><br><span class="line-number">697</span><br><span class="line-number">698</span><br><span class="line-number">699</span><br><span class="line-number">700</span><br><span class="line-number">701</span><br><span class="line-number">702</span><br><span class="line-number">703</span><br><span class="line-number">704</span><br><span class="line-number">705</span><br><span class="line-number">706</span><br><span class="line-number">707</span><br><span class="line-number">708</span><br><span class="line-number">709</span><br><span class="line-number">710</span><br><span class="line-number">711</span><br><span class="line-number">712</span><br><span class="line-number">713</span><br><span class="line-number">714</span><br><span class="line-number">715</span><br><span class="line-number">716</span><br><span class="line-number">717</span><br><span class="line-number">718</span><br><span class="line-number">719</span><br><span class="line-number">720</span><br><span class="line-number">721</span><br><span class="line-number">722</span><br><span class="line-number">723</span><br><span class="line-number">724</span><br><span class="line-number">725</span><br><span class="line-number">726</span><br><span class="line-number">727</span><br><span class="line-number">728</span><br><span class="line-number">729</span><br><span class="line-number">730</span><br><span class="line-number">731</span><br><span class="line-number">732</span><br><span class="line-number">733</span><br><span class="line-number">734</span><br><span class="line-number">735</span><br><span class="line-number">736</span><br><span class="line-number">737</span><br><span class="line-number">738</span><br><span class="line-number">739</span><br><span class="line-number">740</span><br><span class="line-number">741</span><br><span class="line-number">742</span><br><span class="line-number">743</span><br><span class="line-number">744</span><br><span class="line-number">745</span><br><span class="line-number">746</span><br><span class="line-number">747</span><br><span class="line-number">748</span><br><span class="line-number">749</span><br><span class="line-number">750</span><br><span class="line-number">751</span><br><span class="line-number">752</span><br><span class="line-number">753</span><br><span class="line-number">754</span><br><span class="line-number">755</span><br><span class="line-number">756</span><br><span class="line-number">757</span><br><span class="line-number">758</span><br><span class="line-number">759</span><br><span class="line-number">760</span><br><span class="line-number">761</span><br><span class="line-number">762</span><br><span class="line-number">763</span><br><span class="line-number">764</span><br><span class="line-number">765</span><br><span class="line-number">766</span><br><span class="line-number">767</span><br><span class="line-number">768</span><br><span class="line-number">769</span><br><span class="line-number">770</span><br><span class="line-number">771</span><br><span class="line-number">772</span><br><span class="line-number">773</span><br><span class="line-number">774</span><br><span class="line-number">775</span><br><span class="line-number">776</span><br><span class="line-number">777</span><br><span class="line-number">778</span><br><span class="line-number">779</span><br><span class="line-number">780</span><br><span class="line-number">781</span><br><span class="line-number">782</span><br><span class="line-number">783</span><br><span class="line-number">784</span><br><span class="line-number">785</span><br><span class="line-number">786</span><br><span class="line-number">787</span><br><span class="line-number">788</span><br><span class="line-number">789</span><br><span class="line-number">790</span><br><span class="line-number">791</span><br><span class="line-number">792</span><br><span class="line-number">793</span><br><span class="line-number">794</span><br><span class="line-number">795</span><br><span class="line-number">796</span><br><span class="line-number">797</span><br><span class="line-number">798</span><br><span class="line-number">799</span><br><span class="line-number">800</span><br><span class="line-number">801</span><br><span class="line-number">802</span><br><span class="line-number">803</span><br><span class="line-number">804</span><br><span class="line-number">805</span><br><span class="line-number">806</span><br><span class="line-number">807</span><br><span class="line-number">808</span><br><span class="line-number">809</span><br><span class="line-number">810</span><br><span class="line-number">811</span><br><span class="line-number">812</span><br><span class="line-number">813</span><br><span class="line-number">814</span><br><span class="line-number">815</span><br><span class="line-number">816</span><br><span class="line-number">817</span><br><span class="line-number">818</span><br><span class="line-number">819</span><br><span class="line-number">820</span><br><span class="line-number">821</span><br><span class="line-number">822</span><br><span class="line-number">823</span><br><span class="line-number">824</span><br><span class="line-number">825</span><br><span class="line-number">826</span><br><span class="line-number">827</span><br><span class="line-number">828</span><br><span class="line-number">829</span><br><span class="line-number">830</span><br><span class="line-number">831</span><br><span class="line-number">832</span><br><span class="line-number">833</span><br><span class="line-number">834</span><br><span class="line-number">835</span><br><span class="line-number">836</span><br><span class="line-number">837</span><br><span class="line-number">838</span><br><span class="line-number">839</span><br><span class="line-number">840</span><br><span class="line-number">841</span><br><span class="line-number">842</span><br><span class="line-number">843</span><br><span class="line-number">844</span><br><span class="line-number">845</span><br><span class="line-number">846</span><br><span class="line-number">847</span><br><span class="line-number">848</span><br><span class="line-number">849</span><br><span class="line-number">850</span><br><span class="line-number">851</span><br><span class="line-number">852</span><br><span class="line-number">853</span><br><span class="line-number">854</span><br><span class="line-number">855</span><br><span class="line-number">856</span><br><span class="line-number">857</span><br><span class="line-number">858</span><br><span class="line-number">859</span><br><span class="line-number">860</span><br><span class="line-number">861</span><br><span class="line-number">862</span><br><span class="line-number">863</span><br><span class="line-number">864</span><br><span class="line-number">865</span><br><span class="line-number">866</span><br><span class="line-number">867</span><br><span class="line-number">868</span><br><span class="line-number">869</span><br><span class="line-number">870</span><br><span class="line-number">871</span><br><span class="line-number">872</span><br><span class="line-number">873</span><br><span class="line-number">874</span><br><span class="line-number">875</span><br><span class="line-number">876</span><br><span class="line-number">877</span><br><span class="line-number">878</span><br><span class="line-number">879</span><br><span class="line-number">880</span><br><span class="line-number">881</span><br><span class="line-number">882</span><br><span class="line-number">883</span><br><span class="line-number">884</span><br><span class="line-number">885</span><br><span class="line-number">886</span><br><span class="line-number">887</span><br><span class="line-number">888</span><br><span class="line-number">889</span><br><span class="line-number">890</span><br><span class="line-number">891</span><br><span class="line-number">892</span><br><span class="line-number">893</span><br><span class="line-number">894</span><br><span class="line-number">895</span><br><span class="line-number">896</span><br><span class="line-number">897</span><br><span class="line-number">898</span><br><span class="line-number">899</span><br><span class="line-number">900</span><br><span class="line-number">901</span><br><span class="line-number">902</span><br><span class="line-number">903</span><br><span class="line-number">904</span><br><span class="line-number">905</span><br><span class="line-number">906</span><br><span class="line-number">907</span><br><span class="line-number">908</span><br><span class="line-number">909</span><br><span class="line-number">910</span><br><span class="line-number">911</span><br><span class="line-number">912</span><br><span class="line-number">913</span><br><span class="line-number">914</span><br><span class="line-number">915</span><br><span class="line-number">916</span><br><span class="line-number">917</span><br><span class="line-number">918</span><br><span class="line-number">919</span><br><span class="line-number">920</span><br><span class="line-number">921</span><br><span class="line-number">922</span><br><span class="line-number">923</span><br><span class="line-number">924</span><br><span class="line-number">925</span><br><span class="line-number">926</span><br><span class="line-number">927</span><br><span class="line-number">928</span><br><span class="line-number">929</span><br><span class="line-number">930</span><br><span class="line-number">931</span><br><span class="line-number">932</span><br><span class="line-number">933</span><br><span class="line-number">934</span><br><span class="line-number">935</span><br><span class="line-number">936</span><br><span class="line-number">937</span><br><span class="line-number">938</span><br><span class="line-number">939</span><br><span class="line-number">940</span><br><span class="line-number">941</span><br><span class="line-number">942</span><br><span class="line-number">943</span><br><span class="line-number">944</span><br><span class="line-number">945</span><br><span class="line-number">946</span><br><span class="line-number">947</span><br><span class="line-number">948</span><br><span class="line-number">949</span><br><span class="line-number">950</span><br><span class="line-number">951</span><br><span class="line-number">952</span><br><span class="line-number">953</span><br><span class="line-number">954</span><br><span class="line-number">955</span><br><span class="line-number">956</span><br><span class="line-number">957</span><br><span class="line-number">958</span><br><span class="line-number">959</span><br><span class="line-number">960</span><br><span class="line-number">961</span><br><span class="line-number">962</span><br><span class="line-number">963</span><br><span class="line-number">964</span><br><span class="line-number">965</span><br><span class="line-number">966</span><br><span class="line-number">967</span><br><span class="line-number">968</span><br><span class="line-number">969</span><br><span class="line-number">970</span><br><span class="line-number">971</span><br><span class="line-number">972</span><br><span class="line-number">973</span><br><span class="line-number">974</span><br><span class="line-number">975</span><br><span class="line-number">976</span><br><span class="line-number">977</span><br><span class="line-number">978</span><br><span class="line-number">979</span><br><span class="line-number">980</span><br><span class="line-number">981</span><br><span class="line-number">982</span><br><span class="line-number">983</span><br><span class="line-number">984</span><br><span class="line-number">985</span><br><span class="line-number">986</span><br><span class="line-number">987</span><br><span class="line-number">988</span><br><span class="line-number">989</span><br><span class="line-number">990</span><br><span class="line-number">991</span><br><span class="line-number">992</span><br><span class="line-number">993</span><br><span class="line-number">994</span><br><span class="line-number">995</span><br><span class="line-number">996</span><br><span class="line-number">997</span><br><span class="line-number">998</span><br><span class="line-number">999</span><br><span class="line-number">1000</span><br><span class="line-number">1001</span><br><span class="line-number">1002</span><br><span class="line-number">1003</span><br><span class="line-number">1004</span><br><span class="line-number">1005</span><br><span class="line-number">1006</span><br><span class="line-number">1007</span><br><span class="line-number">1008</span><br><span class="line-number">1009</span><br><span class="line-number">1010</span><br><span class="line-number">1011</span><br><span class="line-number">1012</span><br><span class="line-number">1013</span><br><span class="line-number">1014</span><br><span class="line-number">1015</span><br><span class="line-number">1016</span><br><span class="line-number">1017</span><br><span class="line-number">1018</span><br><span class="line-number">1019</span><br><span class="line-number">1020</span><br><span class="line-number">1021</span><br><span class="line-number">1022</span><br><span class="line-number">1023</span><br><span class="line-number">1024</span><br><span class="line-number">1025</span><br><span class="line-number">1026</span><br><span class="line-number">1027</span><br><span class="line-number">1028</span><br><span class="line-number">1029</span><br><span class="line-number">1030</span><br><span class="line-number">1031</span><br><span class="line-number">1032</span><br><span class="line-number">1033</span><br><span class="line-number">1034</span><br><span class="line-number">1035</span><br><span class="line-number">1036</span><br><span class="line-number">1037</span><br><span class="line-number">1038</span><br><span class="line-number">1039</span><br><span class="line-number">1040</span><br><span class="line-number">1041</span><br><span class="line-number">1042</span><br><span class="line-number">1043</span><br><span class="line-number">1044</span><br><span class="line-number">1045</span><br><span class="line-number">1046</span><br><span class="line-number">1047</span><br><span class="line-number">1048</span><br><span class="line-number">1049</span><br><span class="line-number">1050</span><br><span class="line-number">1051</span><br><span class="line-number">1052</span><br><span class="line-number">1053</span><br><span class="line-number">1054</span><br><span class="line-number">1055</span><br><span class="line-number">1056</span><br><span class="line-number">1057</span><br><span class="line-number">1058</span><br><span class="line-number">1059</span><br><span class="line-number">1060</span><br><span class="line-number">1061</span><br><span class="line-number">1062</span><br><span class="line-number">1063</span><br><span class="line-number">1064</span><br><span class="line-number">1065</span><br><span class="line-number">1066</span><br><span class="line-number">1067</span><br><span class="line-number">1068</span><br><span class="line-number">1069</span><br><span class="line-number">1070</span><br><span class="line-number">1071</span><br><span class="line-number">1072</span><br><span class="line-number">1073</span><br><span class="line-number">1074</span><br><span class="line-number">1075</span><br><span class="line-number">1076</span><br><span class="line-number">1077</span><br><span class="line-number">1078</span><br><span class="line-number">1079</span><br><span class="line-number">1080</span><br><span class="line-number">1081</span><br><span class="line-number">1082</span><br><span class="line-number">1083</span><br><span class="line-number">1084</span><br><span class="line-number">1085</span><br><span class="line-number">1086</span><br><span class="line-number">1087</span><br><span class="line-number">1088</span><br><span class="line-number">1089</span><br><span class="line-number">1090</span><br><span class="line-number">1091</span><br><span class="line-number">1092</span><br><span class="line-number">1093</span><br><span class="line-number">1094</span><br><span class="line-number">1095</span><br><span class="line-number">1096</span><br><span class="line-number">1097</span><br><span class="line-number">1098</span><br><span class="line-number">1099</span><br><span class="line-number">1100</span><br><span class="line-number">1101</span><br><span class="line-number">1102</span><br><span class="line-number">1103</span><br><span class="line-number">1104</span><br><span class="line-number">1105</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/redis.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"redis",filePath:"/Users/jck/caicai_blog/docs/record/redis.md",filePathRelative:"record/redis.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis.html.vue",componentFilePathRelative:"pages/record/redis.html.vue",componentFileChunkName:"v-15bb06e3",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis.html.js",dataFilePathRelative:"pages/record/redis.html.js",dataFileChunkName:"v-15bb06e3",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/redis.html",htmlFilePathRelative:"record/redis.html"},{data:{key:"v-0b557a49",path:"/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",title:"Redis缓存实践",lang:"zh-CN",frontmatter:{title:"Redis缓存实践",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/02/27 20:15",tag:["redis","go"]},excerpt:"",headers:[{level:2,title:"几种读写方式",slug:"几种读写方式",children:[]}],git:{}},key:"v-0b557a49",path:"/record/redis%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5.html",title:"Redis缓存实践",lang:"zh-CN",frontmatter:{title:"Redis缓存实践",coverUrl:"https://i.pinimg.com/originals/ce/10/81/ce10818cef2696f7445bd0673c51d1ba.png",date:"2022/02/27 20:15",tag:["redis","go"]},excerpt:"",headers:[{level:2,title:"几种读写方式",slug:"几种读写方式",children:[]}],content:"\n# 绪论\n\n之前的几篇都才写了个标题，这次我想具体写一些，主要是想先把找到的原理进行一个理解最后在自己实践一下。并且redis学了一个月了，一直没拿来做点什么，都快忘光了。正好看到redis可以用作缓存，因此尝试一下。我上次看书发现redis还可以做什么队列，那个等复试完了再弄弄看。\n\n# 原理\n\nRedis做缓存，就是在读mysql数据库前先访问redis，如果命中就不用在访问数据库，未命中就访问数据库。\n盗的示意图\n![](https://images.alsritter.icu/images/2021/04/27/20210428093359.png)\n\n## 几种读写方式\n\n偷一下懒，直接摆别人的图和文字了\n\n\n# 实践\n\n# 总结\n\n感觉还行\n\n# 参考文章\n\n1. redis缓存读写模式<https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91>\n2. go-zero持久层缓存设计<https://go-zero.dev/redis-cache.html>\n3. Redis 缓存读写策略设计及常见问题<https://alsritter.icu/posts/56acbef6/>",contentRendered:'<h1 id="绪论" tabindex="-1"><a class="header-anchor" href="#绪论" aria-hidden="true">#</a> 绪论</h1>\n<p>之前的几篇都才写了个标题，这次我想具体写一些，主要是想先把找到的原理进行一个理解最后在自己实践一下。并且redis学了一个月了，一直没拿来做点什么，都快忘光了。正好看到redis可以用作缓存，因此尝试一下。我上次看书发现redis还可以做什么队列，那个等复试完了再弄弄看。</p>\n<h1 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h1>\n<p>Redis做缓存，就是在读mysql数据库前先访问redis，如果命中就不用在访问数据库，未命中就访问数据库。\n盗的示意图\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://images.alsritter.icu/images/2021/04/27/20210428093359.png" data="aurora"></p>\n<h2 id="几种读写方式" tabindex="-1"><a class="header-anchor" href="#几种读写方式" aria-hidden="true">#</a> 几种读写方式</h2>\n<p>偷一下懒，直接摆别人的图和文字了</p>\n<h1 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h1>\n<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1>\n<p>感觉还行</p>\n<h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h1>\n<ol>\n<li>redis缓存读写模式<a href="https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91" target="_blank" rel="noopener noreferrer">https://xie.infoq.cn/article/f74f50bc9e5ca215ca2841b91<ExternalLinkIcon/></a></li>\n<li>go-zero持久层缓存设计<a href="https://go-zero.dev/redis-cache.html" target="_blank" rel="noopener noreferrer">https://go-zero.dev/redis-cache.html<ExternalLinkIcon/></a></li>\n<li>Redis 缓存读写策略设计及常见问题<a href="https://alsritter.icu/posts/56acbef6/" target="_blank" rel="noopener noreferrer">https://alsritter.icu/posts/56acbef6/<ExternalLinkIcon/></a></li>\n</ol>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/redis缓存实践.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"redis缓存实践",filePath:"/Users/jck/caicai_blog/docs/record/redis缓存实践.md",filePathRelative:"record/redis缓存实践.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis缓存实践.html.vue",componentFilePathRelative:"pages/record/redis缓存实践.html.vue",componentFileChunkName:"v-0b557a49",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/redis缓存实践.html.js",dataFilePathRelative:"pages/record/redis缓存实践.html.js",dataFileChunkName:"v-0b557a49",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/redis缓存实践.html",htmlFilePathRelative:"record/redis缓存实践.html"},{data:{key:"v-fb6448d2",path:"/record/regex.html",title:"正则表达式学习",lang:"zh-CN",frontmatter:{title:"正则表达式学习",tag:["regex"],categories:["regex"],date:"2021/12/31 23:23"},excerpt:"",headers:[{level:2,title:"常见的匹配",slug:"常见的匹配",children:[]}],git:{}},key:"v-fb6448d2",path:"/record/regex.html",title:"正则表达式学习",lang:"zh-CN",frontmatter:{title:"正则表达式学习",tag:["regex"],categories:["regex"],date:"2021/12/31 23:23"},excerpt:"",headers:[{level:2,title:"常见的匹配",slug:"常见的匹配",children:[]}],content:'\r\n\r\n\r\n## 常见的匹配\r\n\r\n\r\n```\r\n    reEmail = `\\w+@\\w+\\.\\w+`\r\n    reLinke= `href="(https?://[\\s\\S]+?)"`\r\n    rePhone  = `1[3456789]\\d\\s?\\d{4}\\s?\\d{4}`\r\n    reIdcard = `[123456789]\\d{5}((19\\d{2})|(20[01]\\d))((0[1-9])|(1[012]))((0[1-9])|([12]\\d)|(3[01]))\\d{3}[\\dXx]`\r\n    reImg    = `https?://[^"]+?(\\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`\r\n```',contentRendered:'<h2 id="常见的匹配" tabindex="-1"><a class="header-anchor" href="#常见的匹配" aria-hidden="true">#</a> 常见的匹配</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>    reEmail = `\\w+@\\w+\\.\\w+`\n    reLinke= `href="(https?://[\\s\\S]+?)"`\n    rePhone  = `1[3456789]\\d\\s?\\d{4}\\s?\\d{4}`\n    reIdcard = `[123456789]\\d{5}((19\\d{2})|(20[01]\\d))((0[1-9])|(1[012]))((0[1-9])|([12]\\d)|(3[01]))\\d{3}[\\dXx]`\n    reImg    = `https?://[^"]+?(\\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/regex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"regex",filePath:"/Users/jck/caicai_blog/docs/record/regex.md",filePathRelative:"record/regex.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/regex.html.vue",componentFilePathRelative:"pages/record/regex.html.vue",componentFileChunkName:"v-fb6448d2",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/regex.html.js",dataFilePathRelative:"pages/record/regex.html.js",dataFileChunkName:"v-fb6448d2",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/regex.html",htmlFilePathRelative:"record/regex.html"},{data:{key:"v-7cab0f64",path:"/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",title:"初探bilibili微服务框架kratos",lang:"zh-CN",frontmatter:{title:"初探bilibili微服务框架kratos",tag:["go","microservice","kratos"],categories:["go","microservice"],date:"2022/02/08 00:15"},excerpt:"",headers:[],git:{}},key:"v-7cab0f64",path:"/record/%E5%88%9D%E6%8E%A2bilibili%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6kratos.html",title:"初探bilibili微服务框架kratos",lang:"zh-CN",frontmatter:{title:"初探bilibili微服务框架kratos",tag:["go","microservice","kratos"],categories:["go","microservice"],date:"2022/02/08 00:15"},excerpt:"",headers:[],content:"\n\n",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/初探bilibili微服务框架kratos.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"初探bilibili微服务框架kratos",filePath:"/Users/jck/caicai_blog/docs/record/初探bilibili微服务框架kratos.md",filePathRelative:"record/初探bilibili微服务框架kratos.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探bilibili微服务框架kratos.html.vue",componentFilePathRelative:"pages/record/初探bilibili微服务框架kratos.html.vue",componentFileChunkName:"v-7cab0f64",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探bilibili微服务框架kratos.html.js",dataFilePathRelative:"pages/record/初探bilibili微服务框架kratos.html.js",dataFileChunkName:"v-7cab0f64",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/初探bilibili微服务框架kratos.html",htmlFilePathRelative:"record/初探bilibili微服务框架kratos.html"},{data:{key:"v-be3aac98",path:"/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",title:"初探golang微服务",lang:"zh-CN",frontmatter:{title:"初探golang微服务",tag:["go","microservice"],categories:["go","microservice"],date:"2022/02/05 00:15"},excerpt:"",headers:[],git:{}},key:"v-be3aac98",path:"/record/%E5%88%9D%E6%8E%A2golang%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",title:"初探golang微服务",lang:"zh-CN",frontmatter:{title:"初探golang微服务",tag:["go","microservice"],categories:["go","microservice"],date:"2022/02/05 00:15"},excerpt:"",headers:[],content:"\n# 微服务\n\n最近在看go语言微服务及高并发这本书，感觉算是大概了解了一下golang微服务的发展什么的\n",contentRendered:'<h1 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务" aria-hidden="true">#</a> 微服务</h1>\n<p>最近在看go语言微服务及高并发这本书，感觉算是大概了解了一下golang微服务的发展什么的</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/初探golang微服务.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"初探golang微服务",filePath:"/Users/jck/caicai_blog/docs/record/初探golang微服务.md",filePathRelative:"record/初探golang微服务.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探golang微服务.html.vue",componentFilePathRelative:"pages/record/初探golang微服务.html.vue",componentFileChunkName:"v-be3aac98",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/初探golang微服务.html.js",dataFilePathRelative:"pages/record/初探golang微服务.html.js",dataFileChunkName:"v-be3aac98",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/初探golang微服务.html",htmlFilePathRelative:"record/初探golang微服务.html"},{data:{key:"v-4d557aaa",path:"/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",title:"我的第一个微服务项目",lang:"zh-CN",frontmatter:{title:"我的第一个微服务项目",tag:["go","microservice","kratos"],categories:["go","microservice","project"],date:"2022/02/13 23:49"},excerpt:"",headers:[{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"暂定要使用的技术",slug:"暂定要使用的技术",children:[]},{level:2,title:"目前进度",slug:"目前进度",children:[]}],git:{}},key:"v-4d557aaa",path:"/record/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE.html",title:"我的第一个微服务项目",lang:"zh-CN",frontmatter:{title:"我的第一个微服务项目",tag:["go","microservice","kratos"],categories:["go","microservice","project"],date:"2022/02/13 23:49"},excerpt:"",headers:[{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"暂定要使用的技术",slug:"暂定要使用的技术",children:[]},{level:2,title:"目前进度",slug:"目前进度",children:[]}],content:"\n# 我的第一个微服务项目\n\n\n我是分割线，嘤嘤嘤\n->============================================<-\n## Summary\n在看了好几天kratos文档以及代码示例example后，并且看了看官方的示例beer-shop 项目的代码后，基本了解了kratos项目该怎么写，于是我也终于开始施工我的第一个称得上项目的微服务项目，我暂定其总 功能为学校管理系统，并暂定其由用户（学生，教师，管理员）管理微服务，选课成绩管理微服务，机构设置微服务组成，后续其他微服务等我想到了再网上加.\n**项目地址为：<https://github.com/kasoushu/education-micro>**\n\n\n## 暂定要使用的技术\n|技术|说明|链接|\n|---|---|---\n|kratos|微服务框架|<https://go-kratos.dev/docs/>|\n|protobuf|生成grpc|<https://developers.google.com/protocol-buffers/docs/downloads>\n|jwt|用户验证| <https://github.com/dgrijalva/jwt-go>|\n|grpc|远程调用|<>|\n|jaeger|链路追踪|<>|\n|consul|服务注册，服务发现|<>|\n|ent|orm框架 |<>|\n|gorm|orm框架 |<>|\n\n## 目前进度\n|step|status|\n|---|---|\n|用户管理微服务|已实现|\n|选课成绩管理微服务|正在施工|\n|机构管理微服务|未施工|",contentRendered:'<h1 id="我的第一个微服务项目" tabindex="-1"><a class="header-anchor" href="#我的第一个微服务项目" aria-hidden="true">#</a> 我的第一个微服务项目</h1>\n<p>我是分割线，嘤嘤嘤\n-&gt;============================================&lt;-</p>\n<h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2>\n<p>在看了好几天kratos文档以及代码示例example后，并且看了看官方的示例beer-shop 项目的代码后，基本了解了kratos项目该怎么写，于是我也终于开始施工我的第一个称得上项目的微服务项目，我暂定其总 功能为学校管理系统，并暂定其由用户（学生，教师，管理员）管理微服务，选课成绩管理微服务，机构设置微服务组成，后续其他微服务等我想到了再网上加.\n<strong>项目地址为：<a href="https://github.com/kasoushu/education-micro" target="_blank" rel="noopener noreferrer">https://github.com/kasoushu/education-micro<ExternalLinkIcon/></a></strong></p>\n<h2 id="暂定要使用的技术" tabindex="-1"><a class="header-anchor" href="#暂定要使用的技术" aria-hidden="true">#</a> 暂定要使用的技术</h2>\n<table>\n<thead>\n<tr>\n<th>技术</th>\n<th>说明</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>kratos</td>\n<td>微服务框架</td>\n<td><a href="https://go-kratos.dev/docs/" target="_blank" rel="noopener noreferrer">https://go-kratos.dev/docs/<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>protobuf</td>\n<td>生成grpc</td>\n<td><a href="https://developers.google.com/protocol-buffers/docs/downloads" target="_blank" rel="noopener noreferrer">https://developers.google.com/protocol-buffers/docs/downloads<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>jwt</td>\n<td>用户验证</td>\n<td><a href="https://github.com/dgrijalva/jwt-go" target="_blank" rel="noopener noreferrer">https://github.com/dgrijalva/jwt-go<ExternalLinkIcon/></a></td>\n</tr>\n<tr>\n<td>grpc</td>\n<td>远程调用</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>jaeger</td>\n<td>链路追踪</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>consul</td>\n<td>服务注册，服务发现</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>ent</td>\n<td>orm框架</td>\n<td>&lt;&gt;</td>\n</tr>\n<tr>\n<td>gorm</td>\n<td>orm框架</td>\n<td>&lt;&gt;</td>\n</tr>\n</tbody>\n</table>\n<h2 id="目前进度" tabindex="-1"><a class="header-anchor" href="#目前进度" aria-hidden="true">#</a> 目前进度</h2>\n<table>\n<thead>\n<tr>\n<th>step</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户管理微服务</td>\n<td>已实现</td>\n</tr>\n<tr>\n<td>选课成绩管理微服务</td>\n<td>正在施工</td>\n</tr>\n<tr>\n<td>机构管理微服务</td>\n<td>未施工</td>\n</tr>\n</tbody>\n</table>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/我的第一个微服务项目.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"我的第一个微服务项目",filePath:"/Users/jck/caicai_blog/docs/record/我的第一个微服务项目.md",filePathRelative:"record/我的第一个微服务项目.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/我的第一个微服务项目.html.vue",componentFilePathRelative:"pages/record/我的第一个微服务项目.html.vue",componentFileChunkName:"v-4d557aaa",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/我的第一个微服务项目.html.js",dataFilePathRelative:"pages/record/我的第一个微服务项目.html.js",dataFileChunkName:"v-4d557aaa",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/我的第一个微服务项目.html",htmlFilePathRelative:"record/我的第一个微服务项目.html"},{data:{key:"v-47e6875f",path:"/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",title:"考研记录",lang:"zh-CN",frontmatter:{title:"考研记录",date:"2022/04/23 1:11",tags:["考研","CS"],categories:["杂谈"]},excerpt:"",headers:[],git:{}},key:"v-47e6875f",path:"/record/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95.html",title:"考研记录",lang:"zh-CN",frontmatter:{title:"考研记录",date:"2022/04/23 1:11",tags:["考研","CS"],categories:["杂谈"]},excerpt:"",headers:[],content:"\n# Warning\n\n本文为流水账，不具有任何指导意义，任何因效仿本文而产生的负面影响与作者一概无关！\n\n我始终认为，成功的经验难以复制，考研路上不仅需要实力，运气在考研路上也占很大一部分，所以说**选择大于努力**。不过如果没有足够的实力，再好的选择和运气也是白搭。\n\n# 前言\n\n小老弟今年上岸某双非，考试科目11408，英语75政治76，数一112，408 130。写本文记录考研生活\n\n# 数学\n\n数学可谓我之一生之敌，自初中以来，但凡大考从未如我所愿过一回。当然这应该是我太菜了。 我数学从3月开始正式开学，花费了很多时间。基本每天必看，时间2-5，6个小时。平均4个多小时。数学我基本上一直都在看书加做题，网课就看了概率论部分。我做了1800基础部分，做了之后感觉一般般就不做了，然后做了660，这本不错，可以一做，不过他的现代和概率论感觉有点简单，高数部分很不错。然后就是880，880很推荐，值得一做。然后买了1000题这个我感觉来不及做了就没做，不过我感觉应该比1800强一点吧，1800可以说是最垃圾的了...我问了一些人他们也一致同意hhhhh。\n\n然后就是做做真题，真题我就做了02-21的，太久远的也懒得做了。。真题我刷了两遍半吧，第二遍是想看看第一遍做完后错题啥的会做没，第2.5遍是12月份快考试模拟卷做不动了，就做做真题养生了。\n\n模拟卷之前我还做了李林的108，这个质量挺好的，我错了好多题\n模拟卷的话我做过李林6+4 22年的和21年的，这个110-130左右吧，感觉往年的不用咋做。。没啥提升。合工大五套超越卷做了17-22年的，这个是有点难的,,基本就100-110分左右,还有张宇的，我做了他去年的8+4还有今年的所谓过关版和啥啥版（忘了叫啥了）8+4，感觉今年张宇的偏简单了，没啥好做的后悔呜呜呜，，，，去年的8+4还OK。我感觉当年考根本不用去买以前的模拟卷做(或许是指张宇，md 36套感觉白做了)。。。合工大可以做做以前的吧。这个挺多人推荐的。数学多涉猎一些题应该还是有好处的。后面还做了李艳芳3套卷，这个真nm难。。。。。唉\n\n就这么瞎复习，就差不多到考试了，考试的时候我看错时间以为都过了一个小时了，我还才做到选择题第6个。。。就贼慌我日。。。然后就拼命做，做完填空题才发现看错时间，才过了1个小时多。。。。无语，后面就一直很慌，最后题最大似然我感觉也做的不太多，证明题做过的原题突然也不会了。。曲面积分感觉也算错了。。唉。不过最后还好有110来分....\n\n# 计算机基础综合408\n\n这个我感觉我也是瞎学的。。我本科机电专业，学408也不算零基础吧，自己学过点。。。。然后我408也是嗯看书，嫌视频太墨迹了书也差不多能看懂，我是从计组->操作系统-> 计网-> 数据结构看的，一开始看计组第二章差点把我劝退....那个补码乘除法就直接给了算法，为什么，哪来的都不知道唉，把我给看懵了。后面看看书和看看视频也算是弄懂了。。。之后基本就没啥值得说的，就一路平推。 然后推完发现我计组啥的都忘光了，就又推了一遍+做大题，之后又看了看书+看选择题，完了之后就真题了，发现真题也不难，因为王道书上基本都做过。。。真题完了一遍看了看研芝士的选择题花了半月，那个质量感觉一般般，有点垃圾（他的模拟卷也贼垃圾，用了都说垃圾）再然后9月多了，开学了408书不想看了就又做了遍真题\n\n做完发现大纲加了好多，然后看了看改的啥的。发现不咋会就等王道更新了。。。后面12月初差不多才都更新好吧，那会把这些都看了看。10，11就是做做模拟卷，看看书，11月，12月基本复习时间减少了好多，分给英语和政治了。最后几周就看看新考点，做做真题养养老了。\n\n这门考完是我感觉最好的了吧。就感觉题目挺常规的。尤其这是在上午考完数学。。整个人都不好了之后。那天感觉也很平常。也没有特别开心，我意识到这或许又是一个重大转折点吧。\n\n\n# 英语\n\n我英语一直不太好，小学以来就不喜欢英语，也不太会，一直学的也是哑巴英语，所幸考研没有听力。英语我到暑假前都只有背背单词啥的。那会每天还有课又要学专业课又要学数学，也没啥空。7月开始我每天还做做一张真题卷子的阅读题。每天一张，7-8月做了两遍差不多，当然仅限阅读部分。。。。。一开始错的贼多，一般7，8，9个有几张难的甚至10，12个。后面做的多了可能题都背下来了就基本6，7个了，有时5个以内。我后面10月。11月的时候在做基本就2-4个了，那会是真的都背下来了。。。。。感觉这个正确率也没啥参考性。阅读做了做后，我也开始做做完型，新题型之类的，后面完型差不多错8个，新题型看运气，好的时候全对，不好的时候错3个。翻译。我练的少，考试的时候感觉做的都错了。\n\n作文的话我10月底开始背作文，刚开始每天1篇小作文，后来感觉太慢了就一天两篇小作文加默写...后面就是一天一片大作文，+默写，再一天两篇大作文+默写。。都背完了之后就每天默默。。那本粉色的书上的看图写画我都全背了然后默一默啥的。作文这东西我感觉就是多背多默多写，我都背了默了之后还会抽空自己写一写，按一种类型写一篇吧，感觉每天学英语时间太少了。。也没写很多。写完了可以用那个小冰批改作文啥的，可以看看有没有语法错误啥的。。他还可以给你打分，免费的。\n\n# 政治\n\n政治我复习的挺烂的，考试选择题我感觉蛮简单的，大题就直接抄材料，再自己改一改。我感觉这个写满基本也有个一半的分数。\n\n政治我一直就不是很重视，我大概10月底开始复习的政治，花了两三个礼拜把徐涛网课和核心考案看了一遍，然后做了1000题，做完1000题都11月底了。然后就是赶紧做肖8，选择题大概27，8到33-35分。做完肖8背了背肖8大题，基本没背下来，就是熟读....然后肖4到了，就做了做肖四选择题，这会大概稳定33分多，这会就是最后两个礼拜了，这段时间就每天晚上背肖4大题和看那个时政那本书，又一说一这玩意真难背。考前晚上我还拼命背肖四，结果背的全tm在材料，我也是服了。\n\n# Nil\n\n说实话考政治那天我感觉真的印象深刻。多年以后，面对考研分数的，某C总会想起那个呼号着凛冽寒风，忘带文具袋体温表的那个遥远的清晨。考研那两天气温很冷，我穿的也不多。东西还忘带了，我骑着电瓶车回宾馆拿我的体温登记表和文具袋，手冻的僵掉了都，呜呜呜真的好tm冷。那两天特别感恩考试学校对面那个卖早餐的，味道ok，价钱一般。主要是热的，直接温暖我的心好吧。我还记得我第一次去买，想买个面包啥的，后来看看有热包子，就买了热包子，那老板说了句热乎乎的吃了不比那冷面包舒服？心想确实，然后那两天早饭和中饭都吃得他家了。\n\n回想起来这一年（8-9个月）我的作息也没变好，和网上说的不太一样。。我从来没7点多，或者6点多就起来过...通常是8点多起来的，9点左右开学吧，暑假更是8，9点起来10，9点半点开学（那会每天2点多才睡，只能说那会嘉心糖会整活）看看视频睡觉，9月开学后意识到考研紧迫性，睡觉时间早了，基本1点前就睡了，早上有课起来上课，没课8点-8点半起吧，到自习室看看书，早上基本就看看英语了，做做英语了。下午数学，晚上专业课，或者下午专业课晚上数学。11月以后是早上做一套卷子，中午或者下午做数学卷子或者408，晚上政治英语。我这么瞎搞下来最后居然分数也还行。。我其实一开始以为大概也就330-350左右。可能是中考和高考的运气转移到现在了吧。\n\n我的文笔着实不堪，若有人能看到这，希望原谅我污染了您的眼镜QAQ。再次声明，不要学我，寄了我不管的。我的评价是不如看b站名师，知乎名师，人家或许至少还有客服可以投诉...\n\n若要问我啥啥啥跟谁，我只能说我球也不懂，非要说的话，数学可以跟何凯文，408跟科软皇帝fury，英语跟汤加风，政治跟张宇",contentRendered:'<h1 id="warning" tabindex="-1"><a class="header-anchor" href="#warning" aria-hidden="true">#</a> Warning</h1>\n<p>本文为流水账，不具有任何指导意义，任何因效仿本文而产生的负面影响与作者一概无关！</p>\n<p>我始终认为，成功的经验难以复制，考研路上不仅需要实力，运气在考研路上也占很大一部分，所以说<strong>选择大于努力</strong>。不过如果没有足够的实力，再好的选择和运气也是白搭。</p>\n<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1>\n<p>小老弟今年上岸某双非，考试科目11408，英语75政治76，数一112，408 130。写本文记录考研生活</p>\n<h1 id="数学" tabindex="-1"><a class="header-anchor" href="#数学" aria-hidden="true">#</a> 数学</h1>\n<p>数学可谓我之一生之敌，自初中以来，但凡大考从未如我所愿过一回。当然这应该是我太菜了。 我数学从3月开始正式开学，花费了很多时间。基本每天必看，时间2-5，6个小时。平均4个多小时。数学我基本上一直都在看书加做题，网课就看了概率论部分。我做了1800基础部分，做了之后感觉一般般就不做了，然后做了660，这本不错，可以一做，不过他的现代和概率论感觉有点简单，高数部分很不错。然后就是880，880很推荐，值得一做。然后买了1000题这个我感觉来不及做了就没做，不过我感觉应该比1800强一点吧，1800可以说是最垃圾的了...我问了一些人他们也一致同意hhhhh。</p>\n<p>然后就是做做真题，真题我就做了02-21的，太久远的也懒得做了。。真题我刷了两遍半吧，第二遍是想看看第一遍做完后错题啥的会做没，第2.5遍是12月份快考试模拟卷做不动了，就做做真题养生了。</p>\n<p>模拟卷之前我还做了李林的108，这个质量挺好的，我错了好多题\n模拟卷的话我做过李林6+4 22年的和21年的，这个110-130左右吧，感觉往年的不用咋做。。没啥提升。合工大五套超越卷做了17-22年的，这个是有点难的,,基本就100-110分左右,还有张宇的，我做了他去年的8+4还有今年的所谓过关版和啥啥版（忘了叫啥了）8+4，感觉今年张宇的偏简单了，没啥好做的后悔呜呜呜，，，，去年的8+4还OK。我感觉当年考根本不用去买以前的模拟卷做(或许是指张宇，md 36套感觉白做了)。。。合工大可以做做以前的吧。这个挺多人推荐的。数学多涉猎一些题应该还是有好处的。后面还做了李艳芳3套卷，这个真nm难。。。。。唉</p>\n<p>就这么瞎复习，就差不多到考试了，考试的时候我看错时间以为都过了一个小时了，我还才做到选择题第6个。。。就贼慌我日。。。然后就拼命做，做完填空题才发现看错时间，才过了1个小时多。。。。无语，后面就一直很慌，最后题最大似然我感觉也做的不太多，证明题做过的原题突然也不会了。。曲面积分感觉也算错了。。唉。不过最后还好有110来分....</p>\n<h1 id="计算机基础综合408" tabindex="-1"><a class="header-anchor" href="#计算机基础综合408" aria-hidden="true">#</a> 计算机基础综合408</h1>\n<p>这个我感觉我也是瞎学的。。我本科机电专业，学408也不算零基础吧，自己学过点。。。。然后我408也是嗯看书，嫌视频太墨迹了书也差不多能看懂，我是从计组-&gt;操作系统-&gt; 计网-&gt; 数据结构看的，一开始看计组第二章差点把我劝退....那个补码乘除法就直接给了算法，为什么，哪来的都不知道唉，把我给看懵了。后面看看书和看看视频也算是弄懂了。。。之后基本就没啥值得说的，就一路平推。 然后推完发现我计组啥的都忘光了，就又推了一遍+做大题，之后又看了看书+看选择题，完了之后就真题了，发现真题也不难，因为王道书上基本都做过。。。真题完了一遍看了看研芝士的选择题花了半月，那个质量感觉一般般，有点垃圾（他的模拟卷也贼垃圾，用了都说垃圾）再然后9月多了，开学了408书不想看了就又做了遍真题</p>\n<p>做完发现大纲加了好多，然后看了看改的啥的。发现不咋会就等王道更新了。。。后面12月初差不多才都更新好吧，那会把这些都看了看。10，11就是做做模拟卷，看看书，11月，12月基本复习时间减少了好多，分给英语和政治了。最后几周就看看新考点，做做真题养养老了。</p>\n<p>这门考完是我感觉最好的了吧。就感觉题目挺常规的。尤其这是在上午考完数学。。整个人都不好了之后。那天感觉也很平常。也没有特别开心，我意识到这或许又是一个重大转折点吧。</p>\n<h1 id="英语" tabindex="-1"><a class="header-anchor" href="#英语" aria-hidden="true">#</a> 英语</h1>\n<p>我英语一直不太好，小学以来就不喜欢英语，也不太会，一直学的也是哑巴英语，所幸考研没有听力。英语我到暑假前都只有背背单词啥的。那会每天还有课又要学专业课又要学数学，也没啥空。7月开始我每天还做做一张真题卷子的阅读题。每天一张，7-8月做了两遍差不多，当然仅限阅读部分。。。。。一开始错的贼多，一般7，8，9个有几张难的甚至10，12个。后面做的多了可能题都背下来了就基本6，7个了，有时5个以内。我后面10月。11月的时候在做基本就2-4个了，那会是真的都背下来了。。。。。感觉这个正确率也没啥参考性。阅读做了做后，我也开始做做完型，新题型之类的，后面完型差不多错8个，新题型看运气，好的时候全对，不好的时候错3个。翻译。我练的少，考试的时候感觉做的都错了。</p>\n<p>作文的话我10月底开始背作文，刚开始每天1篇小作文，后来感觉太慢了就一天两篇小作文加默写...后面就是一天一片大作文，+默写，再一天两篇大作文+默写。。都背完了之后就每天默默。。那本粉色的书上的看图写画我都全背了然后默一默啥的。作文这东西我感觉就是多背多默多写，我都背了默了之后还会抽空自己写一写，按一种类型写一篇吧，感觉每天学英语时间太少了。。也没写很多。写完了可以用那个小冰批改作文啥的，可以看看有没有语法错误啥的。。他还可以给你打分，免费的。</p>\n<h1 id="政治" tabindex="-1"><a class="header-anchor" href="#政治" aria-hidden="true">#</a> 政治</h1>\n<p>政治我复习的挺烂的，考试选择题我感觉蛮简单的，大题就直接抄材料，再自己改一改。我感觉这个写满基本也有个一半的分数。</p>\n<p>政治我一直就不是很重视，我大概10月底开始复习的政治，花了两三个礼拜把徐涛网课和核心考案看了一遍，然后做了1000题，做完1000题都11月底了。然后就是赶紧做肖8，选择题大概27，8到33-35分。做完肖8背了背肖8大题，基本没背下来，就是熟读....然后肖4到了，就做了做肖四选择题，这会大概稳定33分多，这会就是最后两个礼拜了，这段时间就每天晚上背肖4大题和看那个时政那本书，又一说一这玩意真难背。考前晚上我还拼命背肖四，结果背的全tm在材料，我也是服了。</p>\n<h1 id="nil" tabindex="-1"><a class="header-anchor" href="#nil" aria-hidden="true">#</a> Nil</h1>\n<p>说实话考政治那天我感觉真的印象深刻。多年以后，面对考研分数的，某C总会想起那个呼号着凛冽寒风，忘带文具袋体温表的那个遥远的清晨。考研那两天气温很冷，我穿的也不多。东西还忘带了，我骑着电瓶车回宾馆拿我的体温登记表和文具袋，手冻的僵掉了都，呜呜呜真的好tm冷。那两天特别感恩考试学校对面那个卖早餐的，味道ok，价钱一般。主要是热的，直接温暖我的心好吧。我还记得我第一次去买，想买个面包啥的，后来看看有热包子，就买了热包子，那老板说了句热乎乎的吃了不比那冷面包舒服？心想确实，然后那两天早饭和中饭都吃得他家了。</p>\n<p>回想起来这一年（8-9个月）我的作息也没变好，和网上说的不太一样。。我从来没7点多，或者6点多就起来过...通常是8点多起来的，9点左右开学吧，暑假更是8，9点起来10，9点半点开学（那会每天2点多才睡，只能说那会嘉心糖会整活）看看视频睡觉，9月开学后意识到考研紧迫性，睡觉时间早了，基本1点前就睡了，早上有课起来上课，没课8点-8点半起吧，到自习室看看书，早上基本就看看英语了，做做英语了。下午数学，晚上专业课，或者下午专业课晚上数学。11月以后是早上做一套卷子，中午或者下午做数学卷子或者408，晚上政治英语。我这么瞎搞下来最后居然分数也还行。。我其实一开始以为大概也就330-350左右。可能是中考和高考的运气转移到现在了吧。</p>\n<p>我的文笔着实不堪，若有人能看到这，希望原谅我污染了您的眼镜QAQ。再次声明，不要学我，寄了我不管的。我的评价是不如看b站名师，知乎名师，人家或许至少还有客服可以投诉...</p>\n<p>若要问我啥啥啥跟谁，我只能说我球也不懂，非要说的话，数学可以跟何凯文，408跟科软皇帝fury，英语跟汤加风，政治跟张宇</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/考研记录.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"考研记录",filePath:"/Users/jck/caicai_blog/docs/record/考研记录.md",filePathRelative:"record/考研记录.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/考研记录.html.vue",componentFilePathRelative:"pages/record/考研记录.html.vue",componentFileChunkName:"v-47e6875f",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/考研记录.html.js",dataFilePathRelative:"pages/record/考研记录.html.js",dataFileChunkName:"v-47e6875f",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/考研记录.html",htmlFilePathRelative:"record/考研记录.html"},{data:{key:"v-5aacfb4f",path:"/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",title:"记一次leetcode周赛.md",lang:"zh-CN",frontmatter:{title:"记一次leetcode周赛.md",date:"2021/01/17 18:15",tags:["leetcode"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"记这周的周赛题",slug:"记这周的周赛题",children:[]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"1.可以形成最大正发行的矩形数目",slug:"_1-可以形成最大正发行的矩形数目",children:[]},{level:3,title:"2.同积元组",slug:"_2-同积元组",children:[]},{level:3,title:"3重新排列后的最大子矩阵",slug:"_3重新排列后的最大子矩阵",children:[]},{level:3,title:"4.猫和老鼠||",slug:"_4-猫和老鼠",children:[]}]}],git:{}},key:"v-5aacfb4f",path:"/record/%E8%AE%B0%E4%B8%80%E6%AC%A1leetcode%E5%91%A8%E8%B5%9B-md.html",title:"记一次leetcode周赛.md",lang:"zh-CN",frontmatter:{title:"记一次leetcode周赛.md",date:"2021/01/17 18:15",tags:["leetcode"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"记这周的周赛题",slug:"记这周的周赛题",children:[]},{level:2,title:"前言",slug:"前言",children:[{level:3,title:"1.可以形成最大正发行的矩形数目",slug:"_1-可以形成最大正发行的矩形数目",children:[]},{level:3,title:"2.同积元组",slug:"_2-同积元组",children:[]},{level:3,title:"3重新排列后的最大子矩阵",slug:"_3重新排列后的最大子矩阵",children:[]},{level:3,title:"4.猫和老鼠||",slug:"_4-猫和老鼠",children:[]}]}],content:"\n## 记这周的周赛题\n\n## 前言\n\n这周周赛题目前1，2，3题还是很简单的，第四个比较难。在这里贴上我对于1，2，3题目的做法。第四个题目为复制零神的题解，以此参考学习。\n\n### 1.可以形成最大正发行的矩形数目\n\n题目：给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。如果存在 k 同时满足 k <= li 和 k <= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。返回可以切出边长为 maxLen 的正方形的矩形 数目 。\n\n​\t这是一道很简单的签到题\n\n​\t显然每一个2维数组的较小的那个就是他能行成的最大的正方形的边\n\n```cpp\nclass Solution {\npublic:\n    int countGoodRectangles(vector<vector<int>>& rec) {\n        int len=rec.size();\n        map<int,int> a;\n        int mm=0;\n        for(int i=0;i<len;i++){\n            int k=min(rec[i][0],rec[i][1]);\n            a[k]++;\n            if(k>mm) mm=k;\n        }\n        return a[mm];\n    }\n};\n```\n\n### 2.同积元组\n\n题目描述：给你一个由 不同 正整数组成的数组 nums ，请你返回满足 a * b = c * d 的元组 (a, b, c, d) 的数量。其中 a、b、c 和 d 都是 nums 中的元素，且 a != b != c != d 。\n\n​\t观察他给的案例，可以发现每一个满足条件的a,b,c,d可以有八种组合。因此只要找出有多少对满足条件的a,b,c,d记为ans，那么ans*8就是最后的答案；\n\n那么如何计算ans的值，我们可以开一个map，记下每两个的乘积，如果一个乘积出现了两次或两次以上，则说明有多的数可以组成a*b=c*d，而我们只要选出2组就可以满足a* b=c*  d  根据组合数公式  \n$$\nC_n^2 = \\frac{(n-1)n}{2}\n$$\n然后ans+=C_n^2 即可\n\n```cpp\nclass Solution {\npublic:\n    \n    int tupleSameProduct(vector<int>& nums) {\n        int ans=0;\n        int len=nums.size();\n        map<int,int> a;\n        for(int i=0;i<len;i++){\n            for(int j=i+1;j<len;j++){\n                if(i==j) continue;\n                a[nums[i]*nums[j]]++;\n            }\n        }\n        for(auto &[sum,k]:a){\n         \tans+=(k*(k-1))/2;\n        }\n        return (ans)*8;\n    }\n};\n```\n\n### 3重新排列后的最大子矩阵\n\n题目描述：给你一个二进制矩阵 matrix ，它的大小为 m x n ，你可以将 matrix 中的 列 按任意顺序重新排列。\n\n请你返回最优方案下将 matrix 重新排列后，全是 1 的子矩阵面积。\n\n示例：\n\n![image-20210117183913440](https://i.loli.net/2021/01/17/6yoAWg8qjS1h2Ir.png)\n\n我们可以先用一个数组 a[i][j]表示到第i行，第j列上，连续的为1的矩形块，然后再对它进行排序，然后计算出最大值\n\n代码如下：\n\n```cpp\nclass Solution {\npublic:\n    int largestSubmatrix(vector<vector<int>>& matrix) {\n        int m=matrix.size();\n        int n=matrix[0].size();\n        for(int i=1;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(matrix[i][j]==1){\n                    matrix[i][j]+=matrix[i-1][j];\n                }\n            }\n        }\n        int ans=0;\n        for(int i=0;i<m;i++){\n            sort(matrix[i].begin(),matrix[i].end(),[](int x,int y){return x>y;});\n            for(int j=0;j<n;j++){\n                ans=max(ans,(j+1)*matrix[i][j]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n### 4.猫和老鼠||\n\n很难，我做不来，下面是copy的零神的题解\n\n前言\n首先我们需要明确「必胜态」和「必败态」的概念：\n\n一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。这里相邻的状态的定义为：在当前状态中进行决策的玩家可以到达的所有状态。也就是说，玩家可以选择移动到一个「必败态」，使得对手必败，因此当前状态是必胜的。\n\n一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。这里的道理是类似的，如果所有相邻状态都是「必胜态」，那么对手必胜，当前玩家必败。\n\n在本题中，我们可以用(c_x,c_y,m_x,m_y,op) 表示一个状态，其中 (c_x, c_y)表示猫的位置,(m x,m y) 表示老鼠的位置，op 表示当前玩家是猫（op=1）还是老鼠（op=0）。\n\n如果我们把每个状态抽象成图中的一个节点，状态A 可以到达状态B 就在它们对应的节点之间连接一条有向边，那么我们就可以使用动态规划或者记忆化搜索计算出所有状态是「必胜态」还是「必败态」。然而我们注意到，由于猫和老鼠都是根据规则任意进行移动的，甚至它们可以不进行移动，因此这个图实际上是存在环的。举一个很简单的例子，如果猫和老鼠在它们的轮次中都不进行移动，那么状态 A 可以到达状态 A (猫不移动），而状态A 也可以到达状态 A （老鼠不移动），这样 A 是否为「必胜态」依赖于其本身，我们就没法计算这些状态了。\n\n然而题目中给出了一个提示：「如果老鼠不能在 10001000 次操作以内到达食物，那么猫获胜」，这使得我们可以在状态中加入一个维度，即 (c_x, c_y, m_x, m_y,op,step) ，其中 step 表示老鼠进行的操作次数。这样一来，整个图中就不存在环了，也就是图存在一个拓扑排序，我们就可以计算出所有状态了。实际上，老鼠的操作次数最多也就是 $ 8\\times8=64 $ 次，因为老鼠不进行移动或者移动到之前到过的地方，都是没有意义的。\n\n上面的做法已经可以通过本题，例如 【记忆化搜索】思路简单，比较暴力\n题解中就使用了这种方法。这里我们给出一种时间复杂度更优的做法，可以忽略 \\textit{step}step 维度，直接在存在环的原图上进行一种特殊的「拓扑排序」并得到答案。\n\n方法一：拓扑排序\n思路与算法\n\n虽然图中的每个节点都至少在一个环中，我们无法计算出任意一个节点的状态，但我们是预先知道某些状态是「必胜态」还是「必败态」的，也就是游戏结束判定的前三条：\n\n如果猫跟老鼠处在相同的位置，那么猫获胜；\n\n如果猫先到达食物，那么猫获胜；\n\n如果老鼠先到达食物，那么老鼠获胜。\n\n这些判定情况对应的所有状态都可以预先计算出，那么接下来就很好办了，我们可以反过来考虑「必胜态」和「必败态」的计算条件：\n\n一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。因此，如果一个状态是「必败态」，那么其相邻的所有状态都是「必胜态」。因此我们可以从预先计算出的所有「必败态」开始进行广度优先搜索，它们相邻的所有状态都是「必胜态」；\n\n一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。因此，如果一个状态是「必胜态」，那么我们可以将其相邻的所有状态的入度都减少 11。如果某个状态的入度减少到了 00 并且它还没有被计算过，那么说明其相邻的所有状态都是「必胜态」，那么它就是「必败态」。\n\n因此我们只需要预处理出所有状态的入度，并且计算出所有与游戏结束相关的状态，随后进行广度优先搜索即可。由于图中存在环，因此并不是每个状态都能够确定其是「必胜态」还是「必败态」，那些状态实际上就是猫和老鼠陷入了循环，那么根据规则判定猫获胜。\n\n流程\n\n算法的流程如下：\n\n预处理出所有状态的入度；\n\n预处理出所有已经确定的游戏结束状态是「必胜态」还是「必败态」，并把它们放入队列中；\n\n依次从队列中取出状态，如果该状态是「必败态」，那么将所有其相邻且未计算的状态变为「必胜态」，并全部放入队列中；如果该状态是「必胜态」，那么将所有其相邻且未计算的状态的入度减少 11，如果某个相邻的状态入度减少为 00，那么就将其状态变为「必败态」，并放入队列中。\n\n在广度优先搜索结束后，如果初始状态如果为「必败态」或者未计算过，那么猫获胜，否则老鼠获胜。\n\n代码\n``` cpp\nclass Solution {\nprivate:\n    // f[cat_x][cat_y][mouse_x][mouse_y][is_cat_round] = 如果当前玩家必胜那么为 1，否则为 -1\n    int f[8][8][8][8][2];\n    // 统计每个状态的入度，用于拓扑排序\n    int degree[8][8][8][8][2];\n\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\npublic:\n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        auto findPosition = [&](char c) -> pair<int, int> {\n            for (int i = 0; i < m; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (grid[i][j] == c) {\n                        return {i, j};\n                    }\n                }\n            }\n            return {-1, -1};\n        };\n    \n        auto getNeighbors = [&](int x, int y, int bound) -> vector<pair<int, int>> {\n            vector<pair<int, int>> ret = {{x, y}};\n            for (int d = 0; d < 4; ++d) {\n                int xx = x, yy = y;\n                for (int _ = 1; _ <= bound; ++_) {\n                    xx += dirs[d][0];\n                    yy += dirs[d][1];\n                    if (xx < 0 || xx >= m || yy < 0 || yy >= n || grid[xx][yy] == '#') {\n                        break;\n                    }\n                    ret.emplace_back(xx, yy);\n                }\n            }\n            return ret;\n        };\n    \n        auto [cx, cy] = findPosition('C');\n        auto [mx, my] = findPosition('M');\n        auto [fx, fy] = findPosition('F');\n    \n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#') {\n                    for (int k = 0; k < m; ++k) {\n                        for (int l = 0; l < n; ++l) {\n                            if (grid[k][l] != '#') {\n                                degree[i][j][k][l][0] = getNeighbors(i, j, catJump).size();\n                                degree[i][j][k][l][1] = getNeighbors(k, l, mouseJump).size();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n        memset(f, 0, sizeof(f));\n        queue<tuple<int, int, int, int, int>> q;\n    \n        // 猫和老鼠重合\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#' && grid[i][j] != 'F') {\n                    f[i][j][i][j][0] = 1;\n                    f[i][j][i][j][1] = -1;\n                    q.emplace(i, j, i, j, 0);\n                    q.emplace(i, j, i, j, 1);\n                }\n            }\n        }\n    \n        // 猫 or 老鼠到达食物\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != '#' && grid[i][j] != 'F') {\n                    f[fx][fy][i][j][1] = -1;\n                    f[i][j][fx][fy][0] = -1;\n                    q.emplace(fx, fy, i, j, 1);\n                    q.emplace(i, j, fx, fy, 0);\n                }\n            }\n        }\n    \n        while (!q.empty()) {\n            auto [catx, caty, mousex, mousey, op] = q.front();\n            q.pop();\n            if (op == 0) {\n                vector<pair<int, int>> neighbors = getNeighbors(mousex, mousey, mouseJump);\n                for (auto [x, y]: neighbors) {\n                    --degree[catx][caty][x][y][op ^ 1];\n                    if (!f[catx][caty][x][y][op ^ 1]) {\n                        if (f[catx][caty][mousex][mousey][op] == -1) {\n                            f[catx][caty][x][y][op ^ 1] = 1;\n                            q.emplace(catx, caty, x, y, op ^ 1);\n                        }\n                        else if (degree[catx][caty][x][y][op ^ 1] == 0) {\n                            f[catx][caty][x][y][op ^ 1] = -1;\n                            q.emplace(catx, caty, x, y, op ^ 1);\n                        }\n                    }\n                }\n            }\n            else {\n                vector<pair<int, int>> neighbors = getNeighbors(catx, caty, catJump);\n                for (auto [x, y]: neighbors) {\n                    --degree[x][y][mousex][mousey][op ^ 1];\n                    if (!f[x][y][mousex][mousey][op ^ 1]) { \n                        if (f[catx][caty][mousex][mousey][op] == -1) {\n                            f[x][y][mousex][mousey][op ^ 1] = 1;\n                            q.emplace(x, y, mousex, mousey, op ^ 1);\n                        }\n                        else if (degree[x][y][mousex][mousey][op ^ 1] == 0) {\n                            f[x][y][mousex][mousey][op ^ 1] = -1;\n                            q.emplace(x, y, mousex, mousey, op ^ 1);\n                        }\n                    }\n                }\n            }\n        }\n    \n        return f[cx][cy][mx][my][1] == 1;\n    }\n};\n```\n\n\n\n复杂度分析\n\n时间复杂度：O(m^2n^2(m+n))其中 m 和 n 分别是方格的行数和列数。\n\n空间复杂度：O(m^2n^2)O(m2n2)\n",contentRendered:'<h2 id="记这周的周赛题" tabindex="-1"><a class="header-anchor" href="#记这周的周赛题" aria-hidden="true">#</a> 记这周的周赛题</h2>\n<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2>\n<p>这周周赛题目前1，2，3题还是很简单的，第四个比较难。在这里贴上我对于1，2，3题目的做法。第四个题目为复制零神的题解，以此参考学习。</p>\n<h3 id="_1-可以形成最大正发行的矩形数目" tabindex="-1"><a class="header-anchor" href="#_1-可以形成最大正发行的矩形数目" aria-hidden="true">#</a> 1.可以形成最大正发行的矩形数目</h3>\n<p>题目：给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。如果存在 k 同时满足 k &lt;= li 和 k &lt;= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。返回可以切出边长为 maxLen 的正方形的矩形 数目 。</p>\n<p>​\t这是一道很简单的签到题</p>\n<p>​\t显然每一个2维数组的较小的那个就是他能行成的最大的正方形的边</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> <span class="token function">countGoodRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> len<span class="token operator">=</span>rec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>rec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>mm<span class="token punctuation">)</span> mm<span class="token operator">=</span>k<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-同积元组" tabindex="-1"><a class="header-anchor" href="#_2-同积元组" aria-hidden="true">#</a> 2.同积元组</h3>\n<p>题目描述：给你一个由 不同 正整数组成的数组 nums ，请你返回满足 a * b = c * d 的元组 (a, b, c, d) 的数量。其中 a、b、c 和 d 都是 nums 中的元素，且 a != b != c != d 。</p>\n<p>​\t观察他给的案例，可以发现每一个满足条件的a,b,c,d可以有八种组合。因此只要找出有多少对满足条件的a,b,c,d记为ans，那么ans*8就是最后的答案；</p>\n<p>那么如何计算ans的值，我们可以开一个map，记下每两个的乘积，如果一个乘积出现了两次或两次以上，则说明有多的数可以组成a<em>b=c</em>d，而我们只要选出2组就可以满足a* b=c*  d  根据组合数公式<br>\n$$\nC_n^2 = \\frac{(n-1)n}{2}\n$$\n然后ans+=C_n^2 即可</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    \n    <span class="token keyword">int</span> <span class="token function">tupleSameProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                a<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         \tans<span class="token operator">+=</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3重新排列后的最大子矩阵" tabindex="-1"><a class="header-anchor" href="#_3重新排列后的最大子矩阵" aria-hidden="true">#</a> 3重新排列后的最大子矩阵</h3>\n<p>题目描述：给你一个二进制矩阵 matrix ，它的大小为 m x n ，你可以将 matrix 中的 列 按任意顺序重新排列。</p>\n<p>请你返回最优方案下将 matrix 重新排列后，全是 1 的子矩阵面积。</p>\n<p>示例：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210117183913440" originSrc="https://i.loli.net/2021/01/17/6yoAWg8qjS1h2Ir.png" data="aurora"></p>\n<p>我们可以先用一个数组 a[i][j]表示到第i行，第j列上，连续的为1的矩形块，然后再对它进行排序，然后计算出最大值</p>\n<p>代码如下：</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> <span class="token function">largestSubmatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">sort</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_4-猫和老鼠" tabindex="-1"><a class="header-anchor" href="#_4-猫和老鼠" aria-hidden="true">#</a> 4.猫和老鼠||</h3>\n<p>很难，我做不来，下面是copy的零神的题解</p>\n<p>前言\n首先我们需要明确「必胜态」和「必败态」的概念：</p>\n<p>一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。这里相邻的状态的定义为：在当前状态中进行决策的玩家可以到达的所有状态。也就是说，玩家可以选择移动到一个「必败态」，使得对手必败，因此当前状态是必胜的。</p>\n<p>一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。这里的道理是类似的，如果所有相邻状态都是「必胜态」，那么对手必胜，当前玩家必败。</p>\n<p>在本题中，我们可以用(c_x,c_y,m_x,m_y,op) 表示一个状态，其中 (c_x, c_y)表示猫的位置,(m x,m y) 表示老鼠的位置，op 表示当前玩家是猫（op=1）还是老鼠（op=0）。</p>\n<p>如果我们把每个状态抽象成图中的一个节点，状态A 可以到达状态B 就在它们对应的节点之间连接一条有向边，那么我们就可以使用动态规划或者记忆化搜索计算出所有状态是「必胜态」还是「必败态」。然而我们注意到，由于猫和老鼠都是根据规则任意进行移动的，甚至它们可以不进行移动，因此这个图实际上是存在环的。举一个很简单的例子，如果猫和老鼠在它们的轮次中都不进行移动，那么状态 A 可以到达状态 A (猫不移动），而状态A 也可以到达状态 A （老鼠不移动），这样 A 是否为「必胜态」依赖于其本身，我们就没法计算这些状态了。</p>\n<p>然而题目中给出了一个提示：「如果老鼠不能在 10001000 次操作以内到达食物，那么猫获胜」，这使得我们可以在状态中加入一个维度，即 (c_x, c_y, m_x, m_y,op,step) ，其中 step 表示老鼠进行的操作次数。这样一来，整个图中就不存在环了，也就是图存在一个拓扑排序，我们就可以计算出所有状态了。实际上，老鼠的操作次数最多也就是 $ 8\\times8=64 $ 次，因为老鼠不进行移动或者移动到之前到过的地方，都是没有意义的。</p>\n<p>上面的做法已经可以通过本题，例如 【记忆化搜索】思路简单，比较暴力\n题解中就使用了这种方法。这里我们给出一种时间复杂度更优的做法，可以忽略 \\textit{step}step 维度，直接在存在环的原图上进行一种特殊的「拓扑排序」并得到答案。</p>\n<p>方法一：拓扑排序\n思路与算法</p>\n<p>虽然图中的每个节点都至少在一个环中，我们无法计算出任意一个节点的状态，但我们是预先知道某些状态是「必胜态」还是「必败态」的，也就是游戏结束判定的前三条：</p>\n<p>如果猫跟老鼠处在相同的位置，那么猫获胜；</p>\n<p>如果猫先到达食物，那么猫获胜；</p>\n<p>如果老鼠先到达食物，那么老鼠获胜。</p>\n<p>这些判定情况对应的所有状态都可以预先计算出，那么接下来就很好办了，我们可以反过来考虑「必胜态」和「必败态」的计算条件：</p>\n<p>一个状态为「必胜态」，当且仅当其相邻状态中至少有一个「必败态」。因此，如果一个状态是「必败态」，那么其相邻的所有状态都是「必胜态」。因此我们可以从预先计算出的所有「必败态」开始进行广度优先搜索，它们相邻的所有状态都是「必胜态」；</p>\n<p>一个状态为「必败态」，当且仅当其相邻的所有状态都是「必胜态」。因此，如果一个状态是「必胜态」，那么我们可以将其相邻的所有状态的入度都减少 11。如果某个状态的入度减少到了 00 并且它还没有被计算过，那么说明其相邻的所有状态都是「必胜态」，那么它就是「必败态」。</p>\n<p>因此我们只需要预处理出所有状态的入度，并且计算出所有与游戏结束相关的状态，随后进行广度优先搜索即可。由于图中存在环，因此并不是每个状态都能够确定其是「必胜态」还是「必败态」，那些状态实际上就是猫和老鼠陷入了循环，那么根据规则判定猫获胜。</p>\n<p>流程</p>\n<p>算法的流程如下：</p>\n<p>预处理出所有状态的入度；</p>\n<p>预处理出所有已经确定的游戏结束状态是「必胜态」还是「必败态」，并把它们放入队列中；</p>\n<p>依次从队列中取出状态，如果该状态是「必败态」，那么将所有其相邻且未计算的状态变为「必胜态」，并全部放入队列中；如果该状态是「必胜态」，那么将所有其相邻且未计算的状态的入度减少 11，如果某个相邻的状态入度减少为 00，那么就将其状态变为「必败态」，并放入队列中。</p>\n<p>在广度优先搜索结束后，如果初始状态如果为「必败态」或者未计算过，那么猫获胜，否则老鼠获胜。</p>\n<p>代码</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token comment">// f[cat_x][cat_y][mouse_x][mouse_y][is_cat_round] = 如果当前玩家必胜那么为 1，否则为 -1</span>\n    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 统计每个状态的入度，用于拓扑排序</span>\n    <span class="token keyword">int</span> degree<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> dirs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">bool</span> <span class="token function">canMouseWin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> catJump<span class="token punctuation">,</span> <span class="token keyword">int</span> mouseJump<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">auto</span> findPosition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">-></span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">auto</span> getNeighbors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token operator">-></span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token punctuation">{</span>\n            vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> xx <span class="token operator">=</span> x<span class="token punctuation">,</span> yy <span class="token operator">=</span> y<span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> _ <span class="token operator">&lt;=</span> bound<span class="token punctuation">;</span> <span class="token operator">++</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    xx <span class="token operator">+=</span> dirs<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    yy <span class="token operator">+=</span> dirs<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> xx <span class="token operator">>=</span> m <span class="token operator">||</span> yy <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> yy <span class="token operator">>=</span> n <span class="token operator">||</span> grid<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'C\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>mx<span class="token punctuation">,</span> my<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'M\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">auto</span> <span class="token punctuation">[</span>fx<span class="token punctuation">,</span> fy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findPosition</span><span class="token punctuation">(</span><span class="token string">\'F\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        queue<span class="token operator">&lt;</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>\n    \n        <span class="token comment">// 猫和老鼠重合</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'F\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token comment">// 猫 or 老鼠到达食物</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'#\'</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">\'F\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    f<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span> fy<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> fx<span class="token punctuation">,</span> fy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">auto</span> <span class="token punctuation">[</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> neighbors <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> mouseJump<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token operator">--</span>degree<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> neighbors <span class="token operator">=</span> <span class="token function">getNeighbors</span><span class="token punctuation">(</span>catx<span class="token punctuation">,</span> caty<span class="token punctuation">,</span> catJump<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token operator">:</span> neighbors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token operator">--</span>degree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>catx<span class="token punctuation">]</span><span class="token punctuation">[</span>caty<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>degree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>mousex<span class="token punctuation">]</span><span class="token punctuation">[</span>mousey<span class="token punctuation">]</span><span class="token punctuation">[</span>op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n                            q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mousex<span class="token punctuation">,</span> mousey<span class="token punctuation">,</span> op <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token keyword">return</span> f<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cy<span class="token punctuation">]</span><span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br></div></div><p>复杂度分析</p>\n<p>时间复杂度：O(m^2n^2(m+n))其中 m 和 n 分别是方格的行数和列数。</p>\n<p>空间复杂度：O(m^2n^2)O(m2n2)</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/记一次leetcode周赛-md.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"记一次leetcode周赛-md",filePath:"/Users/jck/caicai_blog/docs/record/记一次leetcode周赛-md.md",filePathRelative:"record/记一次leetcode周赛-md.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/记一次leetcode周赛-md.html.vue",componentFilePathRelative:"pages/record/记一次leetcode周赛-md.html.vue",componentFileChunkName:"v-5aacfb4f",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/记一次leetcode周赛-md.html.js",dataFilePathRelative:"pages/record/记一次leetcode周赛-md.html.js",dataFileChunkName:"v-5aacfb4f",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/记一次leetcode周赛-md.html",htmlFilePathRelative:"record/记一次leetcode周赛-md.html"},{data:{key:"v-5a0eaa76",path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",title:"连通分量",lang:"zh-CN",frontmatter:{title:"连通分量",date:"2021/01/11 23:56",tags:["图论"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],git:{}},key:"v-5a0eaa76",path:"/record/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html",title:"连通分量",lang:"zh-CN",frontmatter:{title:"连通分量",date:"2021/01/11 23:56",tags:["图论"],categories:["algorithm"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"tarjan 算法",slug:"tarjan-算法",children:[{level:3,title:"dfs生成树",slug:"dfs生成树",children:[]},{level:3,title:"tarjan算法求强连通分量",slug:"tarjan算法求强连通分量",children:[]}]},{level:2,title:"Kosaraju 算法",slug:"kosaraju-算法",children:[]},{level:2,title:"Garbow 算法",slug:"garbow-算法",children:[]}],content:'\n\n# 连通分量\n## 定义\n\n强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。\n\n强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图。\n\n## tarjan 算法\n\n### dfs生成树\n\n在介绍该算法之前，先来了解 DFS 生成树 ，我们以下面的有向图为例：\n\n![image-20210116003201385](https://kasoushu-picture-1300449754.cos.ap-shanghai.myqcloud.com/pic/image-20210116003201385.png)\n\n有向图的 DFS 生成树主要有 4 种边（不一定全部出现）：\n\n1. 树边（tree edge）：绿色边，每次搜索找到一个还没有访问过的结点的时候就形成了一条树边。\n2. 反祖边（back edge）：黄色边，也被叫做回边，即指向祖先结点的边。\n3. 横叉边（cross edge）：红色边，它主要是在搜索的时候遇到了一个已经访问过的结点，但是这个结点 **并不是** 当前结点的祖先时形成的。\n4. 前向边（forward edge）：蓝色边，它是在搜索的时候遇到子树中的结点的时候形成的。\n\n---\n\n我们考虑 DFS 生成树与强连通分量之间的关系。\n\n如果结点  是某个强连通分量在搜索树中遇到的第一个结点，那么这个强连通分量的其余结点肯定是在搜索树中以  为根的子树中。  被称为这个强连通分量的根。\n\n反证法：假设有个结点  在该强连通分量中但是不在以  为根的子树中，那么  到  的路径中肯定有一条离开子树的边。但是这样的边只可能是横叉边或者反祖边，然而这两条边都要求指向的结点已经被访问过了，这就和  是第一个访问的结点矛盾了。得证。\n\n### tarjan算法求强连通分量\n\n在 Tarjan 算法中为每个结点  维护了以下几个变量：\n\n1. ：深度优先搜索遍历时结点  被搜索的次序。\n2. ：设以  为根的子树为  。  定义为以下结点的  的最小值：  中的结点；从  通过一条不在搜索树上的边能到达的结点。\n\n一个结点的子树内结点的 dfn 都大于该结点的 dfn。\n\n从根开始的一条路径上的 dfn 严格递增，low 严格非降。\n\n按照深度优先搜索算法搜索的次序对图中所有的结点进行搜索。在搜索过程中，对于结点  和与其相邻的结点  （v 不是 u 的父节点）考虑 3 种情况：\n\n1. 未被访问：继续对  进行深度搜索。在回溯过程中，用  更新  。因为存在从  到  的直接路径，所以  能够回溯到的已经在栈中的结点，  也一定能够回溯到。\n2. 被访问过，已经在栈中：即已经被访问过，根据  值的定义（能够回溯到的最早的已经在栈中的结点），则用  更新  。\n3. 被访问过，已不在在栈中：说明  已搜索完毕，其所在连通分量已被处理，所以不用对其做操作。\n\n代码如下：\n\n```cpp\nint dfn[N], low[N], dfncnt, s[N], in_stack[N], tp;\nint scc[N], sc;  // 结点 i 所在 scc 的编号\nint sz[N];       // 强连通 i 的大小\nvoid tarjan(int u) {\n  low[u] = dfn[u] = ++dfncnt, s[++tp] = u, in_stack[u] = 1;\n  for (int i = h[u]; i; i = e[i].nex) {\n    const int &v = e[i].t;\n    if (!dfn[v]) {\n      tarjan(v);\n      low[u] = min(low[u], low[v]); \n    } else if (in_stack[v]) {\n      low[u] = min(low[u], dfn[v]); \n    }\n  }\n  if (dfn[u] == low[u]) {\n    ++sc;  //强连通分量数加1\n    while (s[tp] != u) {\n      scc[s[tp]] = sc;  //将某个点v属于第sc个连通分量\n      sz[sc]++;  // sc这个连通分量的点的个数加1\n      in_stack[s[tp]] = 0; //让v这个点不在栈中\n      --tp; //栈顶减一\n    }\n    scc[s[tp]] = sc;  //同上\n    sz[sc]++;\n    in_stack[s[tp]] = 0;\n    --tp;\n  }\n}\n```\n\n> [https://www.cnblogs.com/shadowland/p/5872257.html](https://www.cnblogs.com/shadowland/p/5872257.html) 一个比较好的tarjan算法详解\n\n## Kosaraju 算法\n\nKosaraju 算法依靠两次简单的 DFS 实现。\n\n第一次 DFS，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯之前给顶点编号，也就是后序遍历。\n\n第二次 DFS，对于反向后的图，以标号最大的顶点作为起点开始 DFS。这样遍历到的顶点集合就是一个强连通分量。对于所有未访问过的结点，选取标号最大的，重复上述过程。\n\n两次 DFS 结束后，强连通分量就找出来了，Kosaraju 算法的时间复杂度为 (V+E)。邻接矩阵为（V^2);\n\n代码如下\n\n```cpp\n// g 是原图，g2 是反图\n// color数组统计每个点属于哪个连通分量，s为栈,栈顶将最大的标记\nvoid dfs1(int u) {\n  vis[u] = true;\n  for (int v : g[u])\n    if (!vis[v]) dfs1(v);\n  s.push_back(u);\n}\n\nvoid dfs2(int u) {\n  color[u] = sccCnt;\n  for (int v : g2[u])\n    if (!color[v]) dfs2(v);\n}\n//kosaraju 算法是先进行第一次dfs，然后第二次dfs从栈中取出最大的没有被遍历的元素进行遍历。\n//第二次dfs是对g的逆图g^T进行遍历\nvoid kosaraju() {\n  sccCnt = 0;\n  for (int i = 1; i <= n; ++i)\n    if (!vis[i]) dfs1(i);\n  for (int i = n; i >= 1; --i)\n    if (!color[s[i]]) {\n      ++sccCnt;\n      dfs2(s[i]);\n    }\n}\n```\n\n## Garbow 算法\n\nGarbow 算法是 Tarjan 算法的另一种实现，Tarjan 算法是用 dfn 和 low 来计算强连通分量的根，Garbow 维护一个节点栈，并用第二个栈来确定何时从第一个栈中弹出属于同一个强连通分量的节点。从节点  开始的 DFS 过程中，当一条路径显示这组节点都属于同一个强连通分量时，只要栈顶节点的访问时间大于根节点  的访问时间，就从第二个栈中弹出这个节点，那么最后只留下根节点  。在这个过程中每一个被弹出的节点都属于同一个强连通分量。\n\n当回溯到某一个节点  时，如果这个节点在第二个栈的顶部，就说明这个节点是强连通分量的起始节点，在这个节点之后搜索到的那些节点都属于同一个强连通分量，于是从第一个栈中弹出那些节点，构成强连通分量。\n\n```cpp\nint garbow(int u) {\n  stack1[++p1] = u;\n  stack2[++p2] = u;\n  low[u] = ++dfs_clock;\n  for (int i = head[u]; i; i = e[i].next) {\n    int v = e[i].to;\n    if (!low[v])\n      garbow(v);\n    else if (!sccno[v])\n      while (low[stack2[p2]] > low[v]) p2--;\n  }\n  if (stack2[p2] == u) {\n    p2--;\n    scc_cnt++;\n    do {\n      sccno[stack1[p1]] = scc_cnt;\n      // all_scc[scc_cnt] ++;\n    } while (stack1[p1--] != u);\n  }\n  return 0;\n}\n\nvoid find_scc(int n) {\n  dfs_clock = scc_cnt = 0;\n  p1 = p2 = 0;\n  memset(sccno, 0, sizeof(sccno));\n  memset(low, 0, sizeof(low));\n  for (int i = 1; i <= n; i++)\n    if (!low[i]) garbow(i);\n}\n```\n\n# 缩点\n\n将一个强连通分量看作一个点，可以由此建立新图，或进行其他操作\n\n# 割点\n\n定义：对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。\n\n判断条件：再进行tarjan算法求极大联通分量时，若$low_v \\geq num_u$  时，即使得儿子无法不通过祖先回到祖先，此时u为割点。\n\n例题：\n\n> 题目描述:\n        给出一个 nn 个点，mm 条边的无向图，求图的割点。\n输入格式:\n        第一行输入两个正整数 n,mn,m。下面 mm 行每行输入两个正整数 x,yx,y 表示 xx 到 yy 有一条边。\n输出格式:\n        第一行输出割点个数。第二行按照节点编号从小到大输出节点，用空格隔开。\n\n```go\n#include <iostream> \n#include <algorithm> \n#include <vector>\n#include <queue>\n#include <map>\n#include <string>\n#include <bits/stdc++.h>\nusing namespace std;\nconst int mm = 100005;\nint n,m;\nvector< vector<int> > e(100005);\nint dfn[mm],low[mm],ind=0,res=0;\nbool vis[mm]={0},dot[mm]={0};\n\nvoid tarjan(int u,int f){\n    vis[u]=1;\n    //cout<<u<<\' \'<<f<<endl;\n    low[u]=dfn[u]= ++ind;\n    int child = 0;\n    for(auto k:e[u]){\n        if(!vis[k]){\n            child++;\n            tarjan(k,u);\n            low[u] = min(low[u],low[k]);\n            if(f!=u&&low[k]>=dfn[u]&&!dot[u]){ //满足割点的条件low_v>=num_u \n                dot[u]=1;\n                res++;\n            }\n        }else if(k!=f){\n            low[u] = min(low[u],dfn[k]);\n        }\n    }\n    if(f==u&&child>=2&&!dot[u]){    //如果一个节点u拥有两个子树，那么他也是割点\n        //cout<<">=2 "<<u<<\' \'<<f<<endl;\n        dot[u]=1;\n        res++;\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf("%d%d",&x,&y);\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n    for(int i=1;i<=n;i++){\n        if(!vis[i]){\n            ind=0;\n            tarjan(i,i);\n        }\n    }\n    cout<<res<<endl;\n    for(int i=1;  i<=n;i++){\n        if(dot[i]==1)\n        printf("%d ",i);\n    }\n    return 0;\n}\n```\n\n习题\n\n> [https://www.luogu.com.cn/problem/P3387](https://www.luogu.com.cn/problem/P3387)  缩点模板题\n\n> [https://www.luogu.com.cn/problem/P3388](https://www.luogu.com.cn/problem/P3388) 割点模板题\n\n> [https://loj.ac/p/10091](https://loj.ac/p/10091)  受欢迎的牛\n>\n> 参考：oiwiki 强连通分量\n',contentRendered:'<h1 id="连通分量" tabindex="-1"><a class="header-anchor" href="#连通分量" aria-hidden="true">#</a> 连通分量</h1>\n<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2>\n<p>强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。</p>\n<p>强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图。</p>\n<h2 id="tarjan-算法" tabindex="-1"><a class="header-anchor" href="#tarjan-算法" aria-hidden="true">#</a> tarjan 算法</h2>\n<h3 id="dfs生成树" tabindex="-1"><a class="header-anchor" href="#dfs生成树" aria-hidden="true">#</a> dfs生成树</h3>\n<p>在介绍该算法之前，先来了解 DFS 生成树 ，我们以下面的有向图为例：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210116003201385" originSrc="https://kasoushu-picture-1300449754.cos.ap-shanghai.myqcloud.com/pic/image-20210116003201385.png" data="aurora"></p>\n<p>有向图的 DFS 生成树主要有 4 种边（不一定全部出现）：</p>\n<ol>\n<li>树边（tree edge）：绿色边，每次搜索找到一个还没有访问过的结点的时候就形成了一条树边。</li>\n<li>反祖边（back edge）：黄色边，也被叫做回边，即指向祖先结点的边。</li>\n<li>横叉边（cross edge）：红色边，它主要是在搜索的时候遇到了一个已经访问过的结点，但是这个结点 <strong>并不是</strong> 当前结点的祖先时形成的。</li>\n<li>前向边（forward edge）：蓝色边，它是在搜索的时候遇到子树中的结点的时候形成的。</li>\n</ol>\n<hr>\n<p>我们考虑 DFS 生成树与强连通分量之间的关系。</p>\n<p>如果结点  是某个强连通分量在搜索树中遇到的第一个结点，那么这个强连通分量的其余结点肯定是在搜索树中以  为根的子树中。  被称为这个强连通分量的根。</p>\n<p>反证法：假设有个结点  在该强连通分量中但是不在以  为根的子树中，那么  到  的路径中肯定有一条离开子树的边。但是这样的边只可能是横叉边或者反祖边，然而这两条边都要求指向的结点已经被访问过了，这就和  是第一个访问的结点矛盾了。得证。</p>\n<h3 id="tarjan算法求强连通分量" tabindex="-1"><a class="header-anchor" href="#tarjan算法求强连通分量" aria-hidden="true">#</a> tarjan算法求强连通分量</h3>\n<p>在 Tarjan 算法中为每个结点  维护了以下几个变量：</p>\n<ol>\n<li>：深度优先搜索遍历时结点  被搜索的次序。</li>\n<li>：设以  为根的子树为  。  定义为以下结点的  的最小值：  中的结点；从  通过一条不在搜索树上的边能到达的结点。</li>\n</ol>\n<p>一个结点的子树内结点的 dfn 都大于该结点的 dfn。</p>\n<p>从根开始的一条路径上的 dfn 严格递增，low 严格非降。</p>\n<p>按照深度优先搜索算法搜索的次序对图中所有的结点进行搜索。在搜索过程中，对于结点  和与其相邻的结点  （v 不是 u 的父节点）考虑 3 种情况：</p>\n<ol>\n<li>未被访问：继续对  进行深度搜索。在回溯过程中，用  更新  。因为存在从  到  的直接路径，所以  能够回溯到的已经在栈中的结点，  也一定能够回溯到。</li>\n<li>被访问过，已经在栈中：即已经被访问过，根据  值的定义（能够回溯到的最早的已经在栈中的结点），则用  更新  。</li>\n<li>被访问过，已不在在栈中：说明  已搜索完毕，其所在连通分量已被处理，所以不用对其做操作。</li>\n</ol>\n<p>代码如下：</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">int</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tp<span class="token punctuation">;</span>\n<span class="token keyword">int</span> scc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sc<span class="token punctuation">;</span>  <span class="token comment">// 结点 i 所在 scc 的编号</span>\n<span class="token keyword">int</span> sz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 强连通 i 的大小</span>\n<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfncnt<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> in_stack<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in_stack<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">++</span>sc<span class="token punctuation">;</span>  <span class="token comment">//强连通分量数加1</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//将某个点v属于第sc个连通分量</span>\n      sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// sc这个连通分量的点的个数加1</span>\n      in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//让v这个点不在栈中</span>\n      <span class="token operator">--</span>tp<span class="token punctuation">;</span> <span class="token comment">//栈顶减一</span>\n    <span class="token punctuation">}</span>\n    scc<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">;</span>  <span class="token comment">//同上</span>\n    sz<span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>\n    in_stack<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tp<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token operator">--</span>tp<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote>\n<p><a href="https://www.cnblogs.com/shadowland/p/5872257.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/shadowland/p/5872257.html<ExternalLinkIcon/></a> 一个比较好的tarjan算法详解</p>\n</blockquote>\n<h2 id="kosaraju-算法" tabindex="-1"><a class="header-anchor" href="#kosaraju-算法" aria-hidden="true">#</a> Kosaraju 算法</h2>\n<p>Kosaraju 算法依靠两次简单的 DFS 实现。</p>\n<p>第一次 DFS，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯之前给顶点编号，也就是后序遍历。</p>\n<p>第二次 DFS，对于反向后的图，以标号最大的顶点作为起点开始 DFS。这样遍历到的顶点集合就是一个强连通分量。对于所有未访问过的结点，选取标号最大的，重复上述过程。</p>\n<p>两次 DFS 结束后，强连通分量就找出来了，Kosaraju 算法的时间复杂度为 (V+E)。邻接矩阵为（V^2);</p>\n<p>代码如下</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token comment">// g 是原图，g2 是反图</span>\n<span class="token comment">// color数组统计每个点属于哪个连通分量，s为栈,栈顶将最大的标记</span>\n<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> sccCnt<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> g2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//kosaraju 算法是先进行第一次dfs，然后第二次dfs从栈中取出最大的没有被遍历的元素进行遍历。</span>\n<span class="token comment">//第二次dfs是对g的逆图g^T进行遍历</span>\n<span class="token keyword">void</span> <span class="token function">kosaraju</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sccCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">++</span>sccCnt<span class="token punctuation">;</span>\n      <span class="token function">dfs2</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="garbow-算法" tabindex="-1"><a class="header-anchor" href="#garbow-算法" aria-hidden="true">#</a> Garbow 算法</h2>\n<p>Garbow 算法是 Tarjan 算法的另一种实现，Tarjan 算法是用 dfn 和 low 来计算强连通分量的根，Garbow 维护一个节点栈，并用第二个栈来确定何时从第一个栈中弹出属于同一个强连通分量的节点。从节点  开始的 DFS 过程中，当一条路径显示这组节点都属于同一个强连通分量时，只要栈顶节点的访问时间大于根节点  的访问时间，就从第二个栈中弹出这个节点，那么最后只留下根节点  。在这个过程中每一个被弹出的节点都属于同一个强连通分量。</p>\n<p>当回溯到某一个节点  时，如果这个节点在第二个栈的顶部，就说明这个节点是强连通分量的起始节点，在这个节点之后搜索到的那些节点都属于同一个强连通分量，于是从第一个栈中弹出那些节点，构成强连通分量。</p>\n<div class="language-cpp ext-cpp line-numbers-mode"><pre v-pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">garbow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  stack1<span class="token punctuation">[</span><span class="token operator">++</span>p1<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  stack2<span class="token punctuation">[</span><span class="token operator">++</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>\n  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfs_clock<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token function">garbow</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sccno<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> p2<span class="token operator">--</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    p2<span class="token operator">--</span><span class="token punctuation">;</span>\n    scc_cnt<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n      sccno<span class="token punctuation">[</span>stack1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scc_cnt<span class="token punctuation">;</span>\n      <span class="token comment">// all_scc[scc_cnt] ++;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">find_scc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  dfs_clock <span class="token operator">=</span> scc_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  p1 <span class="token operator">=</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>sccno<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sccno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">memset</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">garbow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h1 id="缩点" tabindex="-1"><a class="header-anchor" href="#缩点" aria-hidden="true">#</a> 缩点</h1>\n<p>将一个强连通分量看作一个点，可以由此建立新图，或进行其他操作</p>\n<h1 id="割点" tabindex="-1"><a class="header-anchor" href="#割点" aria-hidden="true">#</a> 割点</h1>\n<p>定义：对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。</p>\n<p>判断条件：再进行tarjan算法求极大联通分量时，若$low_v \\geq num_u$  时，即使得儿子无法不通过祖先回到祖先，此时u为割点。</p>\n<p>例题：</p>\n<blockquote>\n<p>题目描述:\n给出一个 nn 个点，mm 条边的无向图，求图的割点。\n输入格式:\n第一行输入两个正整数 n,mn,m。下面 mm 行每行输入两个正整数 x,yx,y 表示 xx 到 yy 有一条边。\n输出格式:\n第一行输出割点个数。第二行按照节点编号从小到大输出节点，用空格隔开。</p>\n</blockquote>\n<div class="language-go ext-go line-numbers-mode"><pre v-pre class="language-go"><code>#include <span class="token operator">&lt;</span>iostream<span class="token operator">></span> \n#include <span class="token operator">&lt;</span>algorithm<span class="token operator">></span> \n#include <span class="token operator">&lt;</span>vector<span class="token operator">></span>\n#include <span class="token operator">&lt;</span>queue<span class="token operator">></span>\n#include <span class="token operator">&lt;</span><span class="token keyword">map</span><span class="token operator">></span>\n#include <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>\n#include <span class="token operator">&lt;</span>bits<span class="token operator">/</span>stdc<span class="token operator">++</span><span class="token punctuation">.</span>h<span class="token operator">></span>\nusing namespace std<span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token builtin">int</span> mm <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>\nvector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token number">100005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">int</span> dfn<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">,</span>ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token builtin">bool</span> vis<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dot<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nvoid <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token builtin">int</span> u<span class="token punctuation">,</span><span class="token builtin">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">//cout&lt;&lt;u&lt;&lt;\' \'&lt;&lt;f&lt;&lt;endl;</span>\n    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>ind<span class="token punctuation">;</span>\n    <span class="token builtin">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span>auto k<span class="token punctuation">:</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            child<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">!=</span>u<span class="token operator">&amp;&amp;</span>low<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">>=</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//满足割点的条件low_v>=num_u </span>\n                dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n                res<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span>u<span class="token operator">&amp;&amp;</span>child<span class="token operator">>=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果一个节点u拥有两个子树，那么他也是割点</span>\n        <span class="token comment">//cout&lt;&lt;">=2 "&lt;&lt;u&lt;&lt;\' \'&lt;&lt;f&lt;&lt;endl;</span>\n        dot<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n        res<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> char <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token builtin">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            ind<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>dot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>习题</p>\n<blockquote>\n<p><a href="https://www.luogu.com.cn/problem/P3387" target="_blank" rel="noopener noreferrer">https://www.luogu.com.cn/problem/P3387<ExternalLinkIcon/></a>  缩点模板题</p>\n</blockquote>\n<blockquote>\n<p><a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener noreferrer">https://www.luogu.com.cn/problem/P3388<ExternalLinkIcon/></a> 割点模板题</p>\n</blockquote>\n<blockquote>\n<p><a href="https://loj.ac/p/10091" target="_blank" rel="noopener noreferrer">https://loj.ac/p/10091<ExternalLinkIcon/></a>  受欢迎的牛</p>\n<p>参考：oiwiki 强连通分量</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/连通分量.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"连通分量",filePath:"/Users/jck/caicai_blog/docs/record/连通分量.md",filePathRelative:"record/连通分量.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/连通分量.html.vue",componentFilePathRelative:"pages/record/连通分量.html.vue",componentFileChunkName:"v-5a0eaa76",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/连通分量.html.js",dataFilePathRelative:"pages/record/连通分量.html.js",dataFileChunkName:"v-5a0eaa76",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/连通分量.html",htmlFilePathRelative:"record/连通分量.html"},{data:{key:"v-13fec48d",path:"/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",title:"青春鼠鼠不会数学期望就寄了吧",lang:"zh-CN",frontmatter:{title:"青春鼠鼠不会数学期望就寄了吧",tags:["杂谈","七月","数学","思绪"],categories:["数学"],date:"2021/11/19 12:00",coverUrl:"https://saber.love/f/2021-04-19_162146.jpg"},excerpt:"",headers:[{level:2,title:"1. 0-1分布",slug:"_1-0-1分布",children:[]},{level:2,title:"二项分布",slug:"二项分布",children:[]},{level:2,title:"3. 泊松分布",slug:"_3-泊松分布",children:[]},{level:2,title:"4.几何分布",slug:"_4-几何分布",children:[]},{level:2,title:"结语",slug:"结语",children:[]}],git:{}},key:"v-13fec48d",path:"/record/%E9%9D%92%E6%98%A5%E9%BC%A0%E9%BC%A0%E4%B8%8D%E4%BC%9A%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B%E5%B0%B1%E5%AF%84%E4%BA%86%E5%90%A7.html",title:"青春鼠鼠不会数学期望就寄了吧",lang:"zh-CN",frontmatter:{title:"青春鼠鼠不会数学期望就寄了吧",tags:["杂谈","七月","数学","思绪"],categories:["数学"],date:"2021/11/19 12:00",coverUrl:"https://saber.love/f/2021-04-19_162146.jpg"},excerpt:"",headers:[{level:2,title:"1. 0-1分布",slug:"_1-0-1分布",children:[]},{level:2,title:"二项分布",slug:"二项分布",children:[]},{level:2,title:"3. 泊松分布",slug:"_3-泊松分布",children:[]},{level:2,title:"4.几何分布",slug:"_4-几何分布",children:[]},{level:2,title:"结语",slug:"结语",children:[]}],content:"\n# 对于常见离散型随机变量数学期望和方差的证明\n\n前言：今天在看张宇概率论9讲和王式安概率论讲义的随机变量的期望和方差时，发现其直接给出了常见离散型随即变量的方差和数学期望，没有证明，故在此写下其证明。\nps1:打这个公式真尼玛累，体力活啊我超，然然啊，请赐予我力量，治愈我灵魂，然然你带我走吧。我好累啊，学不动了，学不懂了！！！！！\nps2:写着写着感觉证明的有点错误，因为我用到了级数逐项积分与求导，但是这里只有n,不是无穷，所以感觉有点奇怪，但证出来结果是对的，摆烂了，不管了，凑合着看\nps3:哼，啊，呜呜，恩啊，啊啊啊啊啊啊啊\nps4:呜呜呜u呜呜u我\nps5:是不是求个极限n->无穷就满足条件了啊。。。。。。\nps6:难得写个东西还破绽百出，我寄了啊，然然，然然呜呜呜\n\n\n## 1. 0-1分布\n\n0-1分布概率为p\n$$\n\\begin{aligned}\n  E(X) &= p \\times 1+(1-p)\\times 0 = p \\\\ D(x)&= (1-p)^2\\times 1+ (0-p)^2 \\times (1-p)\\\\ &=p(1-p)\n\\end{aligned}\n$$\n\n## 二项分布\n\n$$若 X \\sim B(n,p) 则其数学期望及方差为:$$\n$$\n\\begin{aligned}\n       E(X) &= \\sum_{k=0}^{n} k\\times C_n^k p^k (1-p)^{n-k} \\\\\n       &=\\sum_{k=0}^n \\frac{k n! p^k(1-p)^{n-k}}{k!(n-k)!} \\\\\n       &= \\sum_{k=1}^n \\frac{n! p^k(1-p)^{n-k}}{(k-1)! (n-k)!} = np \\sum_{k=1}^n \\frac{(n-1)!p^{k-1}(1-p)^{n-k}}{(k-1)!(n-k)!} \\\\\n       &=np \\sum_{k=1}^n C_{n-1}^{k-1} p^{k-1}(1-p)^{(n-1)-(k-1)} \\\\\n       &=np (p+(1-p))^{n-1} = np\n\\end{aligned}\n$$\n其方差为：\n\n由于直接计算$$D(X)= \\sum_{k=0}^{n} (k-E(x))^2 P_i $$ 不方便\n\n因此\n$$由 D(X) = E(X^2)-E(X)^2  $$\n得\n$$\n\\begin{aligned}\nD(x) &= E(X(X-1)+X) -E(X)^2 \\\\ &=E(X(X-1))+E(X)-E(X)^2\n\\end{aligned}\n$$\n接下来求 $E(X(X-1))$\n$$\n    \\begin{aligned}\n        E(X(X-1)) &= \\sum_{k=0}^n k(k-1)\\frac{n! p^k (1-p)^{n-k}}{k! (n-k)!} \\\\ &=  \\sum_{k=2}^n n(n-1)p^2 \\frac{(n-2)! p^{k-2} (1-p)^{n-2-(k-2)}}{(k-2)! (n-2-(k-2))!} \\\\ &=n(n-1)p^2\n    \\end{aligned}\n$$\n故\n$$\n\\begin{aligned}\n    D(X) &=E(X(X-1))+E(X)-E(X)\\\\&= n(n-1)p^2 + np -(np)^2 \\\\&= np(1-p)\n\\end{aligned}\n$$\n\n## 3. 泊松分布\n参数为$ \\lambda $泊松分布概率为\n$$ P(X=k) = \\frac{\\lambda^k}{k!} e^{-\\lambda} $$\n\n\n$$\n\\begin{aligned}\n故E(X) &= \\sum_{k=0}^n \\frac{k \\lambda^k e^{-\\lambda}}{k!} = e^{-\\lambda} \\sum_{k=1}^n \\frac{\\lambda ^k}{(k-1)!} \\\\ &= \\lambda e^{-\\lambda}  \\sum_{k=1}^n \\frac{\\lambda ^{k-1}}{(k-1)!} \\\\由 e^{x} &= \\sum_{k=0}^ \\infty \\frac{x^k}{k!} \\\\\n得E(X) &= \\lambda e^{\\lambda-\\lambda} = \\lambda\n\\end{aligned}\n$$\n\nD(X)直接计算很麻烦，所以像上一个那样拆开来\n$$ D(X)  = E(X(X-1)+X) - (E(X))^2 $$\n$$\n\\begin{aligned}\n   \\\\\n    E(X(X-1)) &= \\sum_{k=0}^n \\frac{ k(k-1) \\lambda ^k}{k!} e^{-\\lambda} = e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^k}{(k-2)!} \\\\ &=\\lambda^2 e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^{k-2}}{(k-2)!} = \\lambda^2\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n     D(X)  &= E(X(X-1)+X) - (E(X))^2  \\\\ &=\\lambda ^2 +\\lambda - \\lambda ^2 = \\lambda\n\\end{aligned}\n$$\n\n## 4.几何分布\n几何分布的概率$P(X=k) = p(1-p)^{k-1} (k\\in(1,2,3,4....))$\n因为\n$$\n    \\begin{aligned}\n         \\sum_{k=1}^{\\infty} kx^{k-1}&= ( \\sum_{k=1}^{\\infty} \\int kx^{k-1} )^{'} = (\\sum_{k=1}^{\\infty} x^{k})^{'}\\\\&=(\\frac{x}{1-x})^{'} = \\frac{1}{(1-x)^2}\n    \\end{aligned}\n$$\n$$\n    \\begin{aligned}\n       E(X) &= \\sum_{k=1}^n kp(1-p)^{k-1} = p \\sum_{k=1}^n k(1-p)^{k-1} \\\\ &=p \\frac{1}{(1-(1-p))^2} = \\frac{1}{p}\n    \\end{aligned}\n$$\n下面求方差D(X),\n直接求D(X)不好求，所以和上面一样分开来求\n$$\n        D(X) = E(X(X+1)-X)-(E(X))^2\n$$\n这里和上面有一点不一样\n$$\n    \\begin{aligned}\n         \\sum_{k=1}^{\\infty} k(k+1)x^{k-1}&= ( \\sum_{k=1}^{\\infty} \\int k(k+1)x^{k-1} )^{'} = (\\sum_{k=1}^{\\infty} (k+1)x^{k})^{'}\\\\ &=\n          (\\sum_{k=1}^{\\infty} \\int (k+1)x^{k})^{''}\\\\ &=(\\frac{x^2}{1-x})^{''} = \\frac{2}{(1-x)^3}\n    \\end{aligned}\n$$\n$$\n    \\begin{aligned}\n       E(X(X+1)) &= \\sum_{k=1}^n k(k+1)p(1-p)^{k-1} = p \\sum_{k=1}^n k(k+1)(1-p)^{k-1} \\\\ &=p \\frac{2}{(1-(1-p))^3} = \\frac{2}{p^2}\n    \\end{aligned}\n$$\n$$\n\\begin{aligned}\n     D(X)  &= E(X(X+1)-X) - (E(X))^2  \\\\ &= \\frac{2}{p^2} -\\frac{1}{p} -\\frac{1}{p^2} = \\frac{1-p}{p^2}\n\\end{aligned}\n$$\n## 结语 \n\nmarkdown打这个公式也太累了，打不动了，连续型随机变量下次再弄了，摆烂了，睡觉了，下次直接证明写纸上好了。",contentRendered:'<h1 id="对于常见离散型随机变量数学期望和方差的证明" tabindex="-1"><a class="header-anchor" href="#对于常见离散型随机变量数学期望和方差的证明" aria-hidden="true">#</a> 对于常见离散型随机变量数学期望和方差的证明</h1>\n<p>前言：今天在看张宇概率论9讲和王式安概率论讲义的随机变量的期望和方差时，发现其直接给出了常见离散型随即变量的方差和数学期望，没有证明，故在此写下其证明。\nps1:打这个公式真尼玛累，体力活啊我超，然然啊，请赐予我力量，治愈我灵魂，然然你带我走吧。我好累啊，学不动了，学不懂了！！！！！\nps2:写着写着感觉证明的有点错误，因为我用到了级数逐项积分与求导，但是这里只有n,不是无穷，所以感觉有点奇怪，但证出来结果是对的，摆烂了，不管了，凑合着看\nps3:哼，啊，呜呜，恩啊，啊啊啊啊啊啊啊\nps4:呜呜呜u呜呜u我\nps5:是不是求个极限n-&gt;无穷就满足条件了啊。。。。。。\nps6:难得写个东西还破绽百出，我寄了啊，然然，然然呜呜呜</p>\n<h2 id="_1-0-1分布" tabindex="-1"><a class="header-anchor" href="#_1-0-1分布" aria-hidden="true">#</a> 1. 0-1分布</h2>\n<p>0-1分布概率为p\n$$\n\\begin{aligned}\nE(X) &amp;= p \\times 1+(1-p)\\times 0 = p \\ D(x)&amp;= (1-p)^2\\times 1+ (0-p)^2 \\times (1-p)\\ &amp;=p(1-p)\n\\end{aligned}\n$$</p>\n<h2 id="二项分布" tabindex="-1"><a class="header-anchor" href="#二项分布" aria-hidden="true">#</a> 二项分布</h2>\n<p>$$若 X \\sim B(n,p) 则其数学期望及方差为:$$\n$$\n\\begin{aligned}\nE(X) &amp;= \\sum_{k=0}^{n} k\\times C_n^k p^k (1-p)^{n-k} \\\n&amp;=\\sum_{k=0}^n \\frac{k n! p^k(1-p)^{n-k}}{k!(n-k)!} \\\n&amp;= \\sum_{k=1}^n \\frac{n! p^k(1-p)^{n-k}}{(k-1)! (n-k)!} = np \\sum_{k=1}^n \\frac{(n-1)!p^{k-1}(1-p)^{n-k}}{(k-1)!(n-k)!} \\\n&amp;=np \\sum_{k=1}^n C_{n-1}^{k-1} p^{k-1}(1-p)^{(n-1)-(k-1)} \\\n&amp;=np (p+(1-p))^{n-1} = np\n\\end{aligned}\n$$\n其方差为：</p>\n<p>由于直接计算$$D(X)= \\sum_{k=0}^{n} (k-E(x))^2 P_i $$ 不方便</p>\n<p>因此\n$$由 D(X) = E(X^2)-E(X)^2  $$\n得\n$$\n\\begin{aligned}\nD(x) &amp;= E(X(X-1)+X) -E(X)^2 \\ &amp;=E(X(X-1))+E(X)-E(X)^2\n\\end{aligned}\n$$\n接下来求 $E(X(X-1))$\n$$\n\\begin{aligned}\nE(X(X-1)) &amp;= \\sum_{k=0}^n k(k-1)\\frac{n! p^k (1-p)^{n-k}}{k! (n-k)!} \\ &amp;=  \\sum_{k=2}^n n(n-1)p^2 \\frac{(n-2)! p^{k-2} (1-p)^{n-2-(k-2)}}{(k-2)! (n-2-(k-2))!} \\ &amp;=n(n-1)p^2\n\\end{aligned}\n$$\n故\n$$\n\\begin{aligned}\nD(X) &amp;=E(X(X-1))+E(X)-E(X)\\&amp;= n(n-1)p^2 + np -(np)^2 \\&amp;= np(1-p)\n\\end{aligned}\n$$</p>\n<h2 id="_3-泊松分布" tabindex="-1"><a class="header-anchor" href="#_3-泊松分布" aria-hidden="true">#</a> 3. 泊松分布</h2>\n<p>参数为$ \\lambda $泊松分布概率为\n$$ P(X=k) = \\frac{\\lambda^k}{k!} e^{-\\lambda} $$</p>\n<p>$$\n\\begin{aligned}\n故E(X) &amp;= \\sum_{k=0}^n \\frac{k \\lambda^k e^{-\\lambda}}{k!} = e^{-\\lambda} \\sum_{k=1}^n \\frac{\\lambda ^k}{(k-1)!} \\ &amp;= \\lambda e^{-\\lambda}  \\sum_{k=1}^n \\frac{\\lambda ^{k-1}}{(k-1)!} \\由 e^{x} &amp;= \\sum_{k=0}^ \\infty \\frac{x^k}{k!} \\\n得E(X) &amp;= \\lambda e^{\\lambda-\\lambda} = \\lambda\n\\end{aligned}\n$$</p>\n<p>D(X)直接计算很麻烦，所以像上一个那样拆开来\n$$ D(X)  = E(X(X-1)+X) - (E(X))^2 $$\n$$\n\\begin{aligned}\n\\\nE(X(X-1)) &amp;= \\sum_{k=0}^n \\frac{ k(k-1) \\lambda ^k}{k!} e^{-\\lambda} = e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^k}{(k-2)!} \\ &amp;=\\lambda^2 e^{-\\lambda} \\sum_{k=2}^n \\frac{ \\lambda ^{k-2}}{(k-2)!} = \\lambda^2\n\\end{aligned}\n$$</p>\n<p>$$\n\\begin{aligned}\nD(X)  &amp;= E(X(X-1)+X) - (E(X))^2  \\ &amp;=\\lambda ^2 +\\lambda - \\lambda ^2 = \\lambda\n\\end{aligned}\n$$</p>\n<h2 id="_4-几何分布" tabindex="-1"><a class="header-anchor" href="#_4-几何分布" aria-hidden="true">#</a> 4.几何分布</h2>\n<p>几何分布的概率$P(X=k) = p(1-p)^{k-1} (k\\in(1,2,3,4....))$\n因为\n$$\n\\begin{aligned}\n\\sum_{k=1}^{\\infty} kx^{k-1}&amp;= ( \\sum_{k=1}^{\\infty} \\int kx^{k-1} )^{\'} = (\\sum_{k=1}^{\\infty} x^{k})^{\'}\\&amp;=(\\frac{x}{1-x})^{\'} = \\frac{1}{(1-x)^2}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nE(X) &amp;= \\sum_{k=1}^n kp(1-p)^{k-1} = p \\sum_{k=1}^n k(1-p)^{k-1} \\ &amp;=p \\frac{1}{(1-(1-p))^2} = \\frac{1}{p}\n\\end{aligned}\n$$\n下面求方差D(X),\n直接求D(X)不好求，所以和上面一样分开来求\n$$\nD(X) = E(X(X+1)-X)-(E(X))^2\n$$\n这里和上面有一点不一样\n$$\n\\begin{aligned}\n\\sum_{k=1}^{\\infty} k(k+1)x^{k-1}&amp;= ( \\sum_{k=1}^{\\infty} \\int k(k+1)x^{k-1} )^{\'} = (\\sum_{k=1}^{\\infty} (k+1)x^{k})^{\'}\\ &amp;=\n(\\sum_{k=1}^{\\infty} \\int (k+1)x^{k})^{\'\'}\\ &amp;=(\\frac{x^2}{1-x})^{\'\'} = \\frac{2}{(1-x)^3}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nE(X(X+1)) &amp;= \\sum_{k=1}^n k(k+1)p(1-p)^{k-1} = p \\sum_{k=1}^n k(k+1)(1-p)^{k-1} \\ &amp;=p \\frac{2}{(1-(1-p))^3} = \\frac{2}{p^2}\n\\end{aligned}\n$$\n$$\n\\begin{aligned}\nD(X)  &amp;= E(X(X+1)-X) - (E(X))^2  \\ &amp;= \\frac{2}{p^2} -\\frac{1}{p} -\\frac{1}{p^2} = \\frac{1-p}{p^2}\n\\end{aligned}\n$$</p>\n<h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2>\n<p>markdown打这个公式也太累了，打不动了，连续型随机变量下次再弄了，摆烂了，睡觉了，下次直接证明写纸上好了。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/record/青春鼠鼠不会数学期望就寄了吧.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"青春鼠鼠不会数学期望就寄了吧",filePath:"/Users/jck/caicai_blog/docs/record/青春鼠鼠不会数学期望就寄了吧.md",filePathRelative:"record/青春鼠鼠不会数学期望就寄了吧.md",componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/青春鼠鼠不会数学期望就寄了吧.html.vue",componentFilePathRelative:"pages/record/青春鼠鼠不会数学期望就寄了吧.html.vue",componentFileChunkName:"v-13fec48d",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/record/青春鼠鼠不会数学期望就寄了吧.html.js",dataFilePathRelative:"pages/record/青春鼠鼠不会数学期望就寄了吧.html.js",dataFileChunkName:"v-13fec48d",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/record/青春鼠鼠不会数学期望就寄了吧.html",htmlFilePathRelative:"record/青春鼠鼠不会数学期望就寄了吧.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[]},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[]},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[]},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[]},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[]},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[]},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[]},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[]},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[]},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[]},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[]},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[]},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"/Users/jck/caicai_blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"/Users/jck/caicai_blog/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"}]}},n=>{n.O(0,[954,590],(()=>(5698,n(n.s=5698)))),n.O()}]);